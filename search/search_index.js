var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Learn how to program with Python</p>Programming with Python<p>CPU, memory and the internal workings of a computer</p>Systems Architecture<p>Bits, bytes and  binary</p>Data Representation<p>How the Internet works and fundamental aspects of networked systems</p>Computer Networks<p>Features of making the network system safe and secure</p>Network Security<p>Introduction to processing and managing data in a database</p>Relational Databases<p>Some of the key searching and sorting algorithms</p>Algorithms<p>Principles of programming languages and programming in general</p>Programming<p>Boolean algebra</p>Logic and Languages<p>Legal, ethical and societal impact of the use of computers in today's world</p>Impact of Technology"},{"location":"about.html","title":"About","text":""},{"location":"about.html#about","title":"About","text":"<p>Here is the about page</p>"},{"location":"contact.html","title":"Contact","text":""},{"location":"contact.html#contact","title":"Contact","text":"<p>The contact page</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2023/02/14/tips-for-success.html","title":"Tips for Success","text":"<p>Programming is the process of both designing a solution to a problem and writing instructions to solve that problem for the computer to execute using a programming language.  It's a bit like preparing a meal.  You need to assemble the ingredients for the meal, prepare them, combine them and ... do this in the right order.</p> <p>This tutorial covers just some of those essential ingredients and how they might be combined to provide solutions to problems.  The context here will be relatively simple problems but they form the foundation for further developments should you choose to continue with programming beyond these chapters.</p> <p>The over-arching context is to provide the skills and understanding for GCSE Computer Science and the language being used will be Python.  These same ingredients will be found in other programming languages.</p> <p>To be successful in this endeavour bear in mind the following:</p>"},{"location":"blog/2023/02/14/tips-for-success.html#do-not-be-intimidated","title":"Do not be intimidated","text":"<p>You will encounter many moments when all you seem to be doing is \"getting it wrong\".  Learning something new is always a challenge.  The computer can be a hard taskmaster.  If your get your algorithm wrong, the computer will not know it is wrong and just display the wrong result.  If you get the code wrong, the computer will tell you but will not be very helpful in telling you where you went wrong.  Consequently, it's really easy to feel a failure when you are programming, it's easy to want to give up.  We've all been there.  The key is to learn from the mistakes, be resilient and don't let that fear or self-doubt prevent you from wanting to continue, wanting to learn and stay curious.</p>"},{"location":"blog/2023/02/14/tips-for-success.html#it-takes-time","title":"It takes time","text":"<p>The author Malcolm Gladwell suggested it takes 10,000 hours to master a skill.  Whether it takes 10,000, 5,000 or 15,000 hours is debateable.  The point is we need to invest time in our own learning.  How we use that time will be important.  Our goal is to learn the fundamentals of the Python programming language and to use those fundamentals to write programs to solve problems.  So, use your time doing precisely that.  It won't happen overnight and even professional programmers will say they are still learning.  It takes time to learn something well.  </p>"},{"location":"blog/2023/02/14/tips-for-success.html#learn-to-code-by-coding","title":"Learn to code ... by coding","text":"<p>The more you spend time programming, the better you will become.  It is like learning how to play the piano.  If you don't spend time actually playing the piano you will never become a pianist.  Similarly, if you want to be a good footballer - play football!  If you want to be a good programmer - write programs!  Avoid reading or watching umpteen tutorials on learning how to code.  Its better to take what you know and try to apply it to new contexts and new problems.  Rather than seeking out new tutorials, look out for new problems to solve.</p>"},{"location":"blog/2023/02/14/tips-for-success.html#apply-the-feynman-technique","title":"Apply the Feynman technique","text":"<p>\"Knowing\" and \"Understanding\" are different.  The eminent physicist Richard Feyman refers to the Teach-back method for reinforcing our understanding.  On meeting a new concept think how you might explain this to a friend or member of your family who is not familiar with it.  Write out your own explanation of the topic.  Where you feel uncertain will be where there are gaps in your knowledge that requires further work.</p>"},{"location":"blog/2023/02/14/tips-for-success.html#you-dont-need-to-memorise-everything","title":"You don't need to memorise everything","text":"<p>We all have to look things up from time to time.  Even the professionals forget some of the syntax of a programming language.  The more you code in one language the more you will quite naturally remember the syntax that will be required.</p>"},{"location":"blog/2023/02/14/tips-for-success.html#break-down-the-problem-into-smaller-sub-problems","title":"Break down the problem into smaller sub-problems","text":"<p>This is a key skill for all programmers.  It can be hard at first but similar to preparing a meal there will be various stages of preparation.  You'll get into a mess if you try to fry the onions before they're been both peeled and chopped.  The majority of algorithms will come down to some variety of INPUT -&gt; PROCESS -&gt; OUTPUT.  This can be applied at both the macro and micro levels.  There will be many questions to ask and answer at each stage.  How many onions?  What type of onions?  Should they be sliced, chopped, quartered?  How should they be fried?  In what type of oil/fat?  For how long?  It's the same with programming.  What data do I need?  What type of data will that be i.e. numbers or characters?  Where will that data come from i.e. a keyboard, a file, a server on the Internet?  How do I need to organise that data?  Etc..</p>"},{"location":"blog/2023/02/14/tips-for-success.html#keep-it-simple","title":"Keep it simple","text":"<p>It's easy to get side-tracked and try to add new features to your code.  This can be important when learning, playing and experimenting but always keep your eye on the primary challenge and avoid losing focus.  Yes, you could read all the data you need for your program from an external file but does the challenge you're trying to solve require that?  If not, ignore it for now.  Get the simplest possible working solution first.  If you have time, then think about possible developments and extensions.</p>"},{"location":"blog/2023/02/14/tips-for-success.html#stay-curious","title":"Stay curious","text":"<p>It's an important mindset for the whole of your life.  Stay curious, fall in love with learning something new.  Programming is so open-ended and here you will take the first steps of an exciting adventure.  Who knows where it might end up?</p>"},{"location":"blog/2023/10/18/using-sets-in-python.html","title":"Using Sets in Python","text":""},{"location":"blog/2023/10/18/using-sets-in-python.html#using-sets-in-python","title":"Using Sets in Python","text":"<p>Python has a set data structure built-in.</p> <p>Declaring a set</p> <pre><code>mySet = {1.0, \"Python\", (4, 5, 6)}\nprint(mySet)\n</code></pre> <p>Sets do not have duplicates, not can they contain mutable items such as lists, but a set can be formed from a list:</p> <pre><code># no duplicates, this will output {1, 2, 3, 4}\nmySet = {1,1,2,2,2,3,4,4}\nprint(mySet)\n\n# this line will cause an error as the set contains a list\n# eSet = {1, 2, [3, 4]}\n\n# a set can be made, cast, from a list\neSet = set([1, 2, 3])\nprint(eSet)\n</code></pre> <p>Adding elements to a set</p> <p>Empty sets are created using the <code>set()</code> function on a dictionary with no arguments and elements are added to the set object using the methods <code>add()</code> for a single element and <code>update()</code> for multiple:</p> <pre><code># declare an empty set\ns = {}\n# check the data type ...\nprint(type(s))\ns = set()\n#check the data type again ..\nprint(type(s))\n\n# add an element\ns.add(42)\nprint(s)\n# add multiple elements\ns.update([6, 98])\nprint(s)\n</code></pre> <p>Removing elements from a set</p> <p>Elements can be removed using either <code>remove()</code> which raises an error if the element can not be found, or <code>discard()</code>, or to clear all elements use <code>clear()</code>.</p> <p>Python permits set operations as well.</p> <p>Set Operations: Union</p> <p>Use the \"|\" operator, or call the <code>union</code> method on a set object:</p> <pre><code>A = {1, 2, 3}\nB = {4, 5, 6}\n\nprint{A | B}        # {1, 2, 3, 4, 5, 6}\n\nC = {}              # declare a new set\nC = set()\nC = A.union(B)      # populate with A union B\n</code></pre> <p>Set Operations: Intersection</p> <p>Use the \"&amp;\" operator, or call the <code>intersection</code> method:</p> <pre><code>A = {1, 2, 3, 4}\nB = {3, 4, 5, 6}\n\nprint(A &amp; B)\n</code></pre> <p>Take it further</p> <p>There are a lot of other built in methods and functions for processing sets and you are encouraged to explore further, see for example the following:</p> <ul> <li>https://www.python-course.eu/sets_frozensets.php</li> <li>https://www.python-course.eu/sets_frozensets.php</li> <li>https://www.programiz.com/python-programming/set</li> <li>https://www.geeksforgeeks.org/sets-in-python/</li> </ul>"},{"location":"boards/index.html","title":"Awarding Organisations","text":""},{"location":"boards/index.html#awarding-organisations","title":"Awarding Organisations","text":"<p>In this section you can find the documents made available by the awarding organisations that are in the public domain.  Use the menu to navigate to each of the boards.  </p> <p>Note</p> <p>All files are accessed through the board's website and are not held locally.</p> <p>Additional documents, resources and other information can be found by going to the awarding organisation website:</p> <ul> <li>AQA</li> <li>OCR</li> <li>Pearson</li> <li>WJEC</li> </ul>"},{"location":"boards/aqa/index.html","title":"AQA","text":""},{"location":"boards/aqa/aqa_papers.html","title":"AQA Past Papers","text":""},{"location":"boards/aqa/aqa_papers.html#aqa-past-papers","title":"AQA Past Papers","text":""},{"location":"boards/aqa/aqa_papers.html#current-specification","title":"Current Specification20232022","text":"PaperPast PaperMark SchemeExaminer's Report Paper 1 AQA Paper 1 - 2023 AQA Mark Scheme - Paper 1 AQA Examiner's Report - Paper 1 Paper 2 AQA Paper 2 - 2023 AQA Mark Scheme - Paper 2 AQA Examiner's Report - Paper 2 PaperPast PaperMark SchemeExaminer's Report Paper 1 AQA Paper 1 - 2022 AQA Mark Scheme - Paper 1 AQA Examiner's Report - Paper 1 Paper 2 AQA Paper 2 - 2022 AQA Mark Scheme - Paper 2 AQA Examiner's Report - Paper 2"},{"location":"boards/aqa/specification.html","title":"AQA Specification","text":"AQA <p>Download PDF</p>"},{"location":"boards/ocr/index.html","title":"OCR","text":""},{"location":"boards/ocr/ocr_papers.html","title":"OCR Past Papers","text":""},{"location":"boards/ocr/ocr_papers.html#ocr-past-papers","title":"OCR Past Papers","text":""},{"location":"boards/ocr/ocr_papers.html#current-specification","title":"Current Specification20232022","text":"PaperPast PaperMark SchemeExaminer's Report Paper 1 OCR Paper 1 - 2023 OCR Mark Scheme - Paper 1 OCR Examiner's Report - Paper 1 Paper 2 OCR Paper 2 - 2023 OCR Mark Scheme - Paper 2 OCR Examiner's Report - Paper 2 PaperPast PaperMark SchemeExaminer's Report Paper 1 OCR Paper 1 - 2022 OCR Mark Scheme - Paper 1 OCR Examiner's Report - Paper 1 Paper 2 OCR Paper 2 - 2022 OCR Mark Scheme - Paper 2 OCR Examiner's Report - Paper 2"},{"location":"boards/ocr/specification.html","title":"OCR Specification","text":"OCR <p>Download PDF</p>"},{"location":"boards/pearson/index.html","title":"Pearson","text":""},{"location":"boards/pearson/specification.html","title":"Pearson Specification","text":"Pearson <p>Download PDF</p>"},{"location":"topics/algorithms/index.html","title":"Algorithms","text":""},{"location":"topics/algorithms/index.html#algorithms","title":"Algorithms","text":"<p>Slide deck</p>"},{"location":"topics/algorithms/index.html#overview","title":"Overview","text":"<p>An algorithm is:</p> <p>a set of mathematical instructions or rules that, especially if given to a computer, will help to calculate an answer to a problem</p> <p>That is, a step-by-step procedure or a set of well-defined instructions designed to perform a specific task or solve a particular problem. </p> <p>Algorithms can be found in various fields, not just in computing. They are commonly used in mathematics, physics, engineering, and other disciplines to define processes for solving problems. In the context of computer science, algorithms are crucial for programming and are often implemented in software to automate tasks or computations.</p> <p>Key characteristics of algorithms include:</p> <ol> <li>Input: Algorithms take some input(s), which are the data or values they operate on.</li> <li>Output: Algorithms produce output(s), which represent the result or solution to the problem.</li> <li>Definiteness: Each step in the algorithm must be precisely and unambiguously defined.</li> <li>Finiteness: The algorithm must stop after a number of steps.</li> <li>Effectiveness: Each step must be simple and executable in a given amount of time.</li> </ol> <p>Algorithms are fundamental to the field of computer science and are used in various applications, such as sorting data, searching for information, optimizing processes, and more. They serve as the foundation for developing efficient and effective software solutions.</p> <p>In this section we look at how we can create, interpret, complete and refine algorithms as well as how the algorithm can be expressed without using a programming language.  Both pseudocode and flowcharts will be used when considering algorithms used to accomplish searching and sorting.</p>"},{"location":"topics/algorithms/01_computational_thinking.html","title":"Computational Thinking","text":""},{"location":"topics/algorithms/01_computational_thinking.html#computational-thinking","title":"Computational Thinking","text":"<p>Objectives</p> <ul> <li>Understand and explain the term algorithm</li> <li>Define computational thinking and its significance in computer science and various disciplines.</li> <li>Identify the four key components of computational thinking and explain each component.</li> <li>Provide examples of how decomposition is applied in problem-solving, using analogies such as the sandwich-making process.</li> <li>Know how pattern recognition leads to the creation of generalizations.</li> <li>Understand how abstraction simplifies complex systems and allows for the creation of models.</li> <li>Identify the core principles of algorithmic thinking, including sequential steps, clear instructions, input and output, reusability, and efficiency.</li> </ul> <p>Before we can write the instructions for the computer solve a given problem we need to work out what the steps are that we need to take to solve the problem.  We need to know the how.  This is not always straightforward and we need to train our brain to think like a computer when designing these steps.  The steps are known as th algorithm.</p>"},{"location":"topics/algorithms/01_computational_thinking.html#what-is-an-algorithm","title":"What is an algorithm?","text":"<p>By definition, an algorithm is a step-by-step set of instructions or rules designed to solve a specific problem or carry out a task.  They are an essential component of computer science, they define the logic that drives software and systems.</p> <p>Take the problem of finding the largest value in a list of numbers e.g. </p> <ul> <li><code>[23, 8, -76, 49, 65, -2]</code> </li> </ul> <p>We can simply scan through this list of values and see that \\(65\\) is the largest value.  But how do we set out the set of instructions for a computer to execute to solve this problem.  We need to \"think like a computer\", or in other words we need to apply \"computational thinking\".</p>"},{"location":"topics/algorithms/01_computational_thinking.html#input-rightarrow-process-rightarrow-output","title":"Input \\(\\rightarrow\\) Process \\(\\rightarrow\\) Output","text":"<p>For all problems there will be some data we need to work with, our input and a result we're looking to obtain, our output.  </p> <p></p> <p>Inputs: Inputs are the data or values that the algorithm takes as input.  For our problem of finding the largest value in a list of values it will be the list itself: <code>[23, 8, -76, 49, 65, -2]</code>.  It's the raw material we will work with.  It may be the same set of values if we were wanting to sort the values into ascending order, or to find the minimum value, or sum all the values etc..</p> <p>Outputs: The output is the result produced by the algorithm after processing the input data.  It may be a single value as in the case of finding the largest value.  Here, we're expecting the output to be \\(65\\).  For a sorting algorithm it will be list of values sorted into ascending order, the minimum value output would be \\(-76\\), the sum of the values would be \\(67\\) etc..</p> <p>Process: The process is the series of steps or operations the algorithm performs on the input to transform it into the desired output.  For our finding the maximum value algorithm we might come up with the following set of instructions:</p> <ol> <li>Start with the first number in the list and consider it as the current maximum.</li> <li>Iterate through the remaining numbers in the list.</li> <li>For each number, compare it with the current maximum.</li> <li>If the current number is greater than the current maximum, update the current maximum to be that number.</li> <li>Continue this process until all numbers in the list have been considered.</li> <li>The final value of the current maximum is the maximum number in the list.</li> </ol> <p>Remember, this is exactly what you would have done when visually scanning the list for the largest value.  Before returning to this algorithm we;ll unpack some of the principles of thinking like a computer, or computational thinking.</p> <p>What steps would you need to take to:</p> <ul> <li>find the smallest value, the minimum?</li> <li>sum all the values together and output the result?</li> </ul>"},{"location":"topics/algorithms/01_computational_thinking.html#computational-thinking_1","title":"Computational thinking","text":"<p>Underpinning the whole of the GCSE in computer science is the development and understanding of computational thinking, basically \"thinking like a computer\".  Computational thinking provides a set of skills and analytical abilities that are deemed as being increasingly important in the 21st century.  It has application not just for computer science but also across other disciplines including physics, biology, chemistry, economics, sociology, and engineering itself. </p> <p>Most of the definitions of computational thinking have at their heart algorithmic thinking that is, the ability to describe problems that take some input and transform it in to a desired output.  It is to think like a computer.   The development of computational thinking is one of the fundamental reasons why we learn how to program at this level though by doing this we also collect other skills and understanding about the computer and digital systems work.</p> <p>Computational thinking is a problem-solving approach that involves breaking down complex problems into smaller, more manageable parts and systematically analyzing and solving them. It is a fundamental skill in computer science, though as already noted, impacts many other disciplines, and is essential for understanding how to design and implement algorithms, write code, and solve problems in a logical and efficient manner.</p> <p>In other topics, not just the programming topic here, computational thinking will have been used.</p> <p>There are four key components of computational thinking:</p> <ol> <li>Decomposition: Breaking down a complex problem into smaller, more manageable parts or sub-problems.</li> <li>Pattern Recognition: Identifying patterns, trends, and similarities within and between problems.</li> <li>Abstraction: Focusing on the essential details while ignoring unnecessary information, helping to create generalisations and models.</li> <li>Algorithmic Thinking: Developing a step-by-step solution or set of rules to solve a problem.</li> </ol>"},{"location":"topics/algorithms/01_computational_thinking.html#decomposition","title":"Decomposition","text":"<p>It's akin to the old joke \"How do you eat an elephant?\", answer: \"One piece at a time\".  Decomposition takes a problem and breaks it down into smaller, more manageable chunks.  Solve each of these smaller chunks and then combine them to provide the whole solution.</p> <p></p> <p>By analogy it's like a recipe, for example, making a cheese sandwich.  It's not something we stop to think about but when we do we see it can be broken down into a number of key steps, each step being a sub-problem of the overall task e.g.</p> <ul> <li>Gather ingredients: sliced bread, butter, cheese (other ingredients can be added)</li> <li>Gather tools: knife, cheese slicer</li> <li>Prepare the work surface: place a clean chopping board or plate on the worktop</li> <li>Get the bread ready: remove two slices of bread from the packet</li> <li>Spread butter: using a knife spread butter thinly on to the bread</li> <li>Slice the cheese: using a cheese slicer get 4 slices of cheese </li> <li>Add cheese to the bread: place two slices of cheese on each piece of bread</li> <li>Combine the bread slices: place the two slices of bread together, with cheese in the middle</li> <li>Cut and serve: cut completed sandwich into two halves</li> </ul> <p></p> <p>There is a precise order to these instructions.  Some tasks must be done before others, some in this example could be swapped around e.g. you might slice the cheese before spreading the butter etc.. But, the key point is the problem has been broken down into a number of discrete steps.  Complete each in turn and you will be able to make a cheese sandwich over and over again!</p> <p>It's a simple example, but the concept of decomposition scales to more complex problems in computer science, where breaking down tasks into smaller steps is a key strategy for solving problems efficiently.</p> <p>Note</p> <p>Our algorithm for making a cheese sandwich does not require a programming language.  The algorithm and the code we use to implement that algorithm are two quite separate concepts.</p> <p>In \"Finding the Max\" we decomposed the high level problem into a set of lower level instructions:</p> <ol> <li>Start with the first number in the list and consider it as the current maximum.</li> <li>Iterate through the remaining numbers in the list.</li> <li>For each number, compare it with the current maximum.</li> <li>If the current number is greater than the current maximum, update the current maximum to be that number.</li> <li>Continue this process until all numbers in the list have been considered.</li> <li>The final value of the current maximum is the maximum number in the list.</li> </ol> <p>Embedded in these instruction will be constructs you recognise from programming:</p> <ul> <li>Initialisation: setting the first value to the current maximum</li> <li>Iteration: looping through each of the values in turn</li> <li>Selection: If the current number is greater than the current maximum then set current maximum to that value</li> </ul>"},{"location":"topics/algorithms/01_computational_thinking.html#pattern-recognition","title":"Pattern Recognition","text":"<p>Pattern recognition involves identifying patterns, trends, and similarities within and between problems.  For example, all sorting algorithm (and there are many different ways to sort a list of items as well see later) share common steps, such as comparing elements and swapping them.  Thus we can create an algorithm that swaps elements in the list which can then be used in all the different sorting algorithms that require this function.</p> <p>We could take the previous example and realise that making a cheese sandwich and making a tuna sandwich share a number of common characteristics and steps, similarly making a cheese sandwich and making a toasted cheese sandwich etc..</p> <p>Thus, the process of \"making a sandwich\" can be generalised.  The specific detail of the type of sandwich (i.e. cheese or tuna) can be passed in to this process, to the person making the sandwich , and called upon when that relevant step is encountered in the sandwich making process.  We do not to re-examine the algorithm for making a sandwich, that's been done and described the only difference will be the filling to use.</p> <p>Sandwiches are a trivial example but we see pattern recognition be used and applied in a whole host of more complex situations.  Think of the \"Find the Max\" algorithm, finding the largest value in a list of values. If we then have, in a different problem, the task of finding the longest word in a set of given words we can reapply the same solution but this time using strings and their associated lengths.  The pattern tells us that this is really the same problem, but the data we use, our inputs, will be different but the process will be very similar.</p> <p>In pattern recognition we are looking for:</p> <ul> <li>Similarities:  Computational thinkers look for similarities between different problems or scenarios. For example, recognizing that searching for a specific item in a list and finding a particular word in a document both involve a search process.</li> <li>Trends and Regularities:  Patterns often involve recurring elements or trends. In data analysis, pattern recognition may involve identifying trends in datasets, such as sales increasing during certain seasons.</li> <li>Applying Known Solutions to New Problems: When a pattern is recognized, individuals can apply solutions that worked in similar situations to the current problem. For instance, if a programmer has successfully used a sorting algorithm in one program, recognizing the need for sorting in a new program may prompt the reuse of the same or a similar algorithm.</li> <li>Abstraction through Pattern Recognition: Abstraction, another principle of computational thinking, often involves recognizing common elements among different problems. Pattern recognition supports abstraction by allowing individuals to focus on essential similarities while ignoring irrelevant details.</li> <li>Efficiency Improvements:  Recognizing patterns helps in creating more efficient solutions. If a problem can be mapped onto a known pattern, it is possible to reuse or adapt existing solutions, saving time and effort.</li> </ul>"},{"location":"topics/algorithms/01_computational_thinking.html#abstraction","title":"Abstraction","text":"<p>Abstraction is a crucial concept in computational thinking, involving the process of simplifying complex systems by focusing on the essential aspects while ignoring unnecessary details. It enables individuals to create models that capture the fundamental features of a problem, making it more manageable and understandable.</p> <p>The Tube Map of London is s classic example of abstraction.  It shows the different tube lines and the stops on those lines.  It does not show the distance between the stations, nor how far underground they are.  It does nto show the precise geographical location of the stations.</p> <p></p> <p>Note</p> <ul> <li>Take a look at the map here for the geographical view of the London underground: https://jonathancrowe.net/images/2015/london-connections.jpg</li> </ul> <p>Examples abound in the field of computer science and beyond, e.g. when designing a traffic management system, abstraction involves focusing on the essential components like traffic lights, intersections, and vehicles while ignoring specific details about individual cars.</p> <p>Abstraction allows us to simplify complex systems, making them more manageable and understandable. It facilitates the creation of models that capture the essential features without getting bogged down by unnecessary details.</p> <p>Abstraction brings many benefits to the problem solving process:</p> <ul> <li>Identify Essential Details:  Abstraction involves identifying and isolating the essential details or components of a problem. This step requires distinguishing between what is crucial to solving the problem and what can be safely ignored.</li> <li>Ignoring Unnecessary Details: Once the essential details are identified, unnecessary or extraneous information is ignored. This simplifies the problem, making it more approachable and easier to comprehend.</li> <li>Creating Generalizations: Abstraction often leads to the creation of generalizations or models. These models capture the essential features of a problem without getting bogged down by specific, context-dependent details. For example, a sorting algorithm can be abstracted as a set of steps applicable to various datasets.</li> <li>Hierarchy of Abstraction: Abstraction can occur at multiple levels. In complex systems, there may be hierarchies of abstraction, where higher levels focus on broader, more general aspects, and lower levels delve into finer details. For instance, a software application can be abstracted at the user interface level, algorithmic level, and data storage level.</li> <li>Ease of Understanding and Communication: Abstraction enhances the understandability of a problem or system. By removing unnecessary complexities, individuals can grasp the core concepts more easily. It also facilitates communication among team members, allowing them to discuss high-level concepts without getting mired in details.</li> </ul> <p>In essence, abstraction is about creating simplified, yet effective, representations of complex systems. It allows computational thinkers to manage the complexity of problems, design scalable solutions, and build a foundation for problem-solving in computer science. Abstraction is closely intertwined with other computational thinking principles like decomposition and pattern recognition, forming a comprehensive approach to tackling complex challenges.</p> <p>In \"Finding the Max\", we do not know what these values actually represent.  It may be significant but it may be unnecessary detail.  In any event, if we're finding the largest of these values it does not matter if those values represent temperatures, gross domestic product of a country, stock market movements for a company or weekly results from a fantasy football league!  We can abstract that detail away and just focus on what is essential to find the largest value.</p>"},{"location":"topics/algorithms/01_computational_thinking.html#algorithmic-thinking","title":"Algorithmic Thinking","text":"<p>Algorithmic thinking involves developing a step-by-step solution or set of rules to solve a problem. Creating a recipe for baking a cake, or making a sandwich is an example of algorithmic thinking. It specifies the exact steps to be followed, such as mixing ingredients, baking at a certain temperature, and cooling.</p> <p>There are some core principles to consider when thinking algorithmically, these include:</p> <ul> <li>Sequential Steps: Algorithmic thinking requires breaking down a problem into a sequence of individual steps. Each step represents a specific action or operation that contributes to solving the overall problem.</li> <li>Clear and Precise Instructions:  Algorithms provide clear and precise instructions for solving a problem. These instructions must be unambiguous and can be followed by anyone with a basic understanding of the problem domain, or, of course, followed by a computer.</li> <li>Input and Output:  Algorithms take input, process it through a series of steps, and produce an output. Understanding the relationship between input and output is crucial for designing effective algorithms.</li> <li>Reusability:  Well-designed algorithms are often reusable. Once an algorithm is developed for a specific task, it can be applied to similar problems, saving time and effort in the problem-solving process.  This is generalisation as discussed earlier.</li> <li>Efficiency and Optimization:  Algorithmic thinking involves considering the efficiency of a solution. This includes minimizing the number of steps, optimizing resource usage (such as time and space), and ensuring the algorithm performs well in various scenarios.</li> <li>Pseudocode and Flowcharts:  Communicating algorithms often involves using pseudocode or flowcharts. Pseudocode is a high-level description of the algorithm using a mix of natural language and simple code-like structures. Flowcharts use visual symbols to represent the flow of control in an algorithm.</li> </ul> <p>In \"Finding The Max\" we set out the following steps:</p> <ol> <li>Start with the first number in the list and consider it as the current maximum.</li> <li>Iterate through the remaining numbers in the list.</li> <li>For each number, compare it with the current maximum.</li> <li>If the current number is greater than the current maximum, update the current maximum to be that number.</li> <li>Continue this process until all numbers in the list have been considered.</li> <li>The final value of the current maximum is the maximum number in the list.</li> </ol> <p>This algorithmic approach breaks down the task into a series of simple steps, providing a systematic way to find the maximum number in a list regardless of its size.  These steps will still work with 10, 100 or 1,000,000 items.</p>"},{"location":"topics/algorithms/01_computational_thinking.html#questions","title":"Questions","text":"1. What is an algorithm?A sequence of numbers arranged in a specific orderA step-by-step set of instructions or rules to solve a problemA process for recognizing patterns in large datasetsA complex mathematical equation for solving problemsAn algorithm is defined as a step-by-step set of instructions designed to solve a specific problem or carry out a task.Submit 2. What are the key components of computational thinking?Decomposition, Pattern Recognition, Abstraction, Algorithmic ThinkingDecomposition, Sorting, Searching, Pattern MatchingDecomposition, Input-Output, Data Analysis, DebuggingProblem Solving, Programming, Pseudocode, FlowchartsThe four components of computational thinking are Decomposition, Pattern Recognition, Abstraction, and Algorithmic Thinking.Submit 3. Which of the following best illustrates decomposition?Breaking a large problem into smaller, manageable partsIdentifying trends in a dataset over timeCreating a general solution for multiple problemsWriting code to solve a complex issueDecomposition involves breaking down complex problems into smaller sub-problems to solve each part individually.Submit 4. In the 'Find the Max' example, what is the input?The largest numberThe process to find the maximum numberThe list of numbersThe output of the algorithmIn the 'Find the Max' example, the input is the list of numbers on which the algorithm operates to find the maximum value.Submit 5. Which step in the algorithm for 'Finding the Max' involves selection?Initializing the current maximum to the first number in the listIterating through each number in the listComparing the current number to the current maximum and updating if necessaryReturning the final maximum valueSelection occurs when the algorithm checks whether the current number is greater than the current maximum and updates accordingly.Submit 6. What is the main benefit of using abstraction in computational thinking?To create complex models with detailed informationTo simplify complex systems by focusing on essential detailsTo break down problems into smaller componentsTo recognize similarities in multiple problemsAbstraction simplifies complex systems by ignoring unnecessary details and focusing only on the essential features.Submit 7. What is an example of pattern recognition from the material?Breaking a problem into sub-problems to solve itRecognizing that finding the longest word is similar to finding the largest numberUsing pseudocode to communicate an algorithmSorting a list of numbers in ascending orderPattern recognition involves identifying similar patterns, such as recognizing that finding the longest word and finding the largest number follow similar processes.Submit 8. How does algorithmic thinking differ from programming?Algorithmic thinking focuses on writing the actual code, while programming does notAlgorithmic thinking involves creating step-by-step instructions, while programming implements those instructions in codeAlgorithmic thinking deals with hardware, and programming deals with softwareAlgorithmic thinking is used only in mathematics, while programming is used in computer scienceAlgorithmic thinking involves developing a logical set of steps to solve a problem, while programming is the process of writing code to implement that logic.Submit 9. Why is efficiency important in algorithmic thinking?It ensures that the algorithm produces the correct resultIt helps minimize the number of steps and resource usageIt makes the code easier to writeIt ensures the problem is decomposed properlyEfficiency in algorithmic thinking is important because it minimizes the number of steps and optimizes the use of resources like time and memory.Submit 10. How do pseudocode and flowcharts help in computational thinking?They help decompose problems into smaller partsThey provide a clear visual or textual representation of algorithmsThey ensure the algorithm is efficientThey focus on the input and output of the algorithmPseudocode and flowcharts help communicate algorithms clearly by providing a high-level representation of the steps involved.Submit"},{"location":"topics/algorithms/02_describing_an_algorithm.html","title":"Describing an Algorithm","text":""},{"location":"topics/algorithms/02_describing_an_algorithm.html#describing-an-algorithm","title":"Describing an Algorithm","text":"<p>Objectives</p> <ul> <li>Understand the logical steps involved in solving a problem using algorithms</li> <li>Know the difference between Structured English and Pseudocode</li> <li>Know how to express an algorithms using pseudocode</li> <li>Be able to read and comprehend algorithms represented in the form of flowcharts</li> <li>Understand that a computer program is an implementation of an algorithm; an algorithm is not a computer program</li> </ul> <p>In the previous section we were working on an algorithm to find the largest value in a list of numbers: <code>[23, 8, -76, 49, 65, -2]</code>.  We set out the steps using Structured English:</p> <ol> <li>Start with the first number in the list and consider it as the current maximum.</li> <li>Iterate through the remaining numbers in the list.</li> <li>For each number, compare it with the current maximum.</li> <li>If the current number is greater than the current maximum, update the current maximum to be that number.</li> <li>Continue this process until all numbers in the list have been considered.</li> <li>The final value of the current maximum is the maximum number in the list.</li> </ol> <p>Structured English is a high-level description language that uses natural language constructs to represent the logic of a process or algorithm. </p> <p>It is some step removed from the code used for a programming language.  It is intended for humans to read who may not be familiar with the syntax or forms used in a formal programming language such as Python.  </p> <p>For GCSE Computer Science we need to be familiar with a more stylised form known as pseudocode and how flowcharts can also be used to describe an algorithm. Both AQA and OCR have their own versions of pseudocode and require students to express their answers to any questions requiring an algorithm using their version of pseudocode.</p> <p>Note</p> <p>For questions that require pseudocode answers, marks will still be awarded if the pseudocode is incorrect but the meaning of the algorithm remains sufficiently clear.</p>"},{"location":"topics/algorithms/02_describing_an_algorithm.html#pseudocode","title":"Pseudocode","text":"<p>Pseudocode is similar to Structured English in that they both provide high-level, human-readable representations of algorithms or processes without specifying the exact syntax of a particular programming language. However, there are some distinctions between the two:</p> Structured English Pseudocode It often resembles a more natural language, using sentences and phrases to describe the steps of the algorithm in a way that is closer to everyday language. It tends to have a structure that is more similar to code, using keywords and simple statements that are a bit closer to actual programming syntax It is generally less formal and more human-readable. It is often used in the early stages of designing algorithms, providing a conceptual understanding of the process. It can be a bit more formal and may include constructs that resemble programming language syntax. Pseudocode is often used as a transitional step between algorithm design and actual code implementation. It is often intended for a broader audience, including stakeholders and individuals who may not have programming expertise. It is typically geared more towards programmers or those with some familiarity with programming concepts. <p>The finding the max algorithm becomes:</p> <pre><code>values &lt;- [23, 8, -76, 49, 65, -2]\ncurrent_maximum &lt;- first value in the list   # or current_maximum &lt;- values[0]\nnumber_of_values &lt;- LEN(values)              # LEN() returns length of the list\nFOR i &lt;- 1 TO number_of_values\n    current_value &lt;- values[i]\n    IF current_value &gt; current_maximum THEN\n        current_maximum &lt;- current_value\n    ENDIF\nENDFOR\nOUTPUT current_maximum\n</code></pre> <p>The pseudocode used above follows the form used by AQA.  </p> <p>The OCR version would be:</p> <pre><code>values = [23, 8, -76, 49, 65, -2]\ncurrent_maximum = first value in the list   # or current_maximum &lt;- values[0]\nnumber_of_values = LEN(values)              # LEN() returns length of the list\nfor i = 1 to number_of_values\n    current_value &lt;- values[i]\n    if current_value &gt; current_maximum then\n        current_maximum &lt;- current_value\n    endif\nnext i\nprint current_maximum\n</code></pre> <p>In both cases note how the pseudocode differs from the Structured English version.  It look more like programming code but stops short of being an actual programming language.  As programmers we can recognise assignment, a loop and a section statement, it may not take someone not familiar with programming that long to work out the purpose of this algorithm.</p> <p>The pseudocode should express unambiguously the steps required to solve the given problem.  We should be able to take the pseudocode and convert into the programming language of our choice: Python, C# etc..</p>"},{"location":"topics/algorithms/02_describing_an_algorithm.html#flowcharts","title":"Flowcharts","text":"<p>Another form we can use is a visual form, a diagram to represent the steps known as a flowchart.</p> <p>The flowchart uses various shapes and arrows to illustrate the steps and the flow of control within that process. It is a diagrammatic tool that provides a clear and systematic way to represent the logical sequence of actions or decisions in a system.</p> <p>They serve the same purpose as pseudocode and can be easier for non-programmers to follow and understand.</p> <p>The flowchart uses a number of symbols to represent the steps in an algorithm and their sequence:</p> <p></p> <p>The flowchart for the find the maximum algorithm might be:</p> <p></p> <p>Flowcharts are a valuable tool for many situations.  It is required for the GCSE that you both know how to create a flowchart and to read the algorithm from the given flowchart.  However, they can be time consuming to construct and for more complex algorithms the diagrams quickly become large and fiddly to deal with.  They do not handle detailed code well but are OK for high level view of an algorithm and useful for sketching ideas.</p>"},{"location":"topics/algorithms/02_describing_an_algorithm.html#questions","title":"Questions","text":"1. What is the key difference between Structured English and Pseudocode?Pseudocode is less formal and more human-readable.Structured English resembles everyday language, while Pseudocode resembles programming syntax.Structured English is for programmers only.Pseudocode can be understood by anyone without programming experience.Structured English uses more natural language, while Pseudocode is closer to programming syntax.Submit 2. What does the following pseudocode do?<pre><code>values &lt;- [23, 8, -76, 49, 65, -2]\ncurrent_maximum &lt;- first value in the list\nFOR each value in the list\n    IF value &gt; current_maximum THEN\n        current_maximum &lt;- value\nENDFOR\nOUTPUT current_maximum\n</code></pre>Finds the sum of all the values in the list.Finds the minimum value in the list.Finds the maximum value in the list.Calculates the average of the list values.The pseudocode iterates through the list and updates the current maximum if a larger value is found.Submit 3. Which of the following best describes a flowchart?A visual representation of an algorithm using shapes and arrows.A way to write code in a simpler language.A table showing possible values of variables.A method for writing pseudocode in a more complex form.Flowcharts use shapes and arrows to diagrammatically represent the steps of an algorithm.Submit 4. Why might Structured English be used instead of pseudocode?It is faster to write.It is more formal and precise.It is intended for broader audiences, including non-programmers.It looks more like actual programming code.Structured English is designed to be more readable and accessible to non-programmers.Submit 5. Which pseudocode statement correctly initializes a list in AQA format?list &lt;- [1, 2, 3]list = {1, 2, 3}list = [1, 2, 3]list := [1, 2, 3]The AQA pseudocode format uses '&lt;-' for assignment.Submit 6. Which flowchart symbol represents a decision point (e.g., IF-THEN statement)?A rectangleA diamondA circleAn arrowThe diamond shape is used to represent decisions in a flowchart.Submit 7. In the following pseudocode, what will be the output if the list contains [5, 12, 7]?<pre><code>values &lt;- [5, 12, 7]\ncurrent_maximum &lt;- first value in the list\nFOR i &lt;- 1 TO LEN(values)\n    current_value &lt;- values[i]\n    IF current_value &gt; current_maximum THEN\n        current_maximum &lt;- current_value\nENDFOR\nOUTPUT current_maximum</code></pre>5712The code will not run.The pseudocode finds the maximum value in the list, which is 12.Submit 8. Why are flowcharts considered easier for non-programmers to follow?They use shapes instead of programming constructs.They are written in plain English.They include detailed code explanations.They are only used for simple algorithms.Flowcharts represent logical steps visually, making them easier for non-programmers to understand.Submit 9. Which of the following is a characteristic of pseudocode?It is written in the syntax of a specific programming language.It is human-readable but close to actual code syntax.It includes detailed comments explaining each step.It is only used in Python programming.Pseudocode is designed to be human-readable while resembling programming constructs.Submit 10. What is the purpose of the LEN() function in the pseudocode?<pre><code>values &lt;- [23, 8, -76, 49, 65, -2]\nnumber_of_values &lt;- LEN(values)</code></pre>It returns the total number of values in the list.It returns the maximum value in the list.It returns the sum of all the values in the list.It sorts the values in the list.The LEN() function returns the length of the list, i.e., the number of elements in it.Submit"},{"location":"topics/algorithms/03_searching.html","title":"Searching Algorithms","text":""},{"location":"topics/algorithms/03_searching.html#searching-algorithms","title":"Searching Algorithms","text":"<p>Objectives</p> <ul> <li>Understand the concept of linear search as a sequential algorithm for finding a specific element in a list.</li> <li>Know how to implement a linear search algorithm in pseudocode and a programming language (e.g., Python).</li> <li>Understand the binary search algorithm as a more efficient searching technique that requires a sorted list.</li> <li>Know how to implement a binary search algorithm in pseudocode and a programming language (e.g., Python).</li> <li>Compare the linear search and binary search algorithms in terms of efficiency and suitability for different scenarios.</li> <li>Gain experience in tracing and debugging code for both linear and binary search algorithms.</li> </ul> <p>These learning objectives cover a range of skills and knowledge related to searching algorithms, algorithmic efficiency, coding implementation, and problem-solving in a computer science context.</p> <p>Sifting through a whole bunch of data looking for a particular item is a very common occurrence, not least when we use a computer.  There are a number of algorithms we can use to search for data.  Here we look at two:</p> <ul> <li>Linear Search</li> <li>Binary Search</li> </ul>"},{"location":"topics/algorithms/03_searching.html#linear-search","title":"Linear Search","text":"<p>Take something simple as a shopping list e.g.</p> <ul> <li>Milk</li> <li>Eggs</li> <li>Tomatoes</li> <li>Mince</li> <li>Flour</li> </ul> <p>We want to find if a particular item exists in the list, say \"Mince\".  Being human it's trivial to scan through such a short list and find that \"Mince\" is indeed in the list.  We do this so quickly without really thinking about the steps we are taking to arrive at the answer i.e. the algorithm we are using.  If we are going to get a machine to do this for us then we need to work through that algorithm.</p> <p>The item we are looking for is \"Mince\", this is known as the search key.  We have the list of items held as a list of strings, or an array of strings.  We compare our search key against the first item in the list: \"Milk\".  \"Mince\" is not the same as \"Milk\", so we then move on to the next item in the list.  \"Eggs\", again is not the string we are looking for.  We continue to do this until we find \"Mince\" as the fourth item in the list and we can quit searching.</p> <p>If we were looking for, say, \"Crisps\" we would get to the end of the list having not found it as \"Crisps\" does not exist in our current list.</p> <p>We've carried out a linear search, sometimes called a sequential search.  The linear search is a relatively simple searching algorithm that looks for a specific element in a list one by one, checking each element until a match is found or the end of the list is reached.</p> <p>So, when looking for \"Mince\" each item is compared to this search key:</p> <p>Warning</p> <p>If the animation does not appear, just refresh the page!</p> Linear Search Animation Start Search <p>The process again:</p> <ul> <li>Start from the beginning of the list.</li> <li>Compare the target element with each element in the list sequentially</li> <li>If a match is found, return the index of the element; otherwise, continue searching until the end of the list</li> <li>If the end of the list is reached without finding a match, indicate that the element is not present.</li> </ul> <p>In Python we can easily write the code for the linear search:</p> <pre><code># linear search\n\nshopping_list = [\"Milk\", \"Eggs\", \"Tomatoes\", \"Mince\", \"Flour\"]  # initialise the list\nitem_count = len(shopping_list) \nsearch_key = \"Mince\"        # initialise the search key\nfound = False\n\nfor i in range(item_count):\n    if shopping_list[i] == search_key:\n        found = True\n\nif found:\n    print(f\"{search_key} is in the list\")\nelse:\n    print(f\"{search_key} is not in the list\")\n</code></pre> <p></p> <p>Notice how we have to start at the beginning of the list and compare the search key with every item in the list.  The boolean variable <code>found</code> is set to <code>True</code> if the item is there.  In the current algorithm we keep on searching for the item even when it has already been found.  This is the worst case behaviour of our algorithm i.e. if <code>n</code> is the length of the list then the worst case means we will be making a total of <code>n</code> comparisons.  Our current algorithm is always the worst case!  If the item we're looking for is the first item in the list we keep on searching ... what a waste of computing time.  We can improve on this by changing the loop in lines 8-10 to:</p> <pre><code>while i &lt; item_count and found == False:\n    if shopping_list[i] == search_key:\n        found = True\n    i += 1\n</code></pre> <p>As soon as we find the search key in our list the loop will terminate.  Our best case will not be when the item we're looking for is the first item in the list.  The worst case remains, it will be when the search key is the last item in the list (or not in the list).</p> <p>With such a small number of items this change will make little difference but as the number of items in our list increases, and increases, it will being to have a significant impact on how quickly our algorithm will return a result.  Mathematically, computer scientists use something called BigO notation to describe the efficiency of an algorithm.  BigO notation is not part of the GCSE syllabus but we would describe the linear search as O(n) where <code>n</code> is the number of items.  As <code>n</code> grows so does the time taken for this algorithm to complete (in the worst case).</p> <p>The study of algorithms is about finding the best algorithm for the given situation.</p> <p>Note</p> <p>It would be even better to put this algorithm into its own function passing in the search key and the item list as parameters to this function.</p> <p>If there is a small dataset, and the items in that dataset are not ordered then a linear search will be fine.  However, for large datasets it will very quickly begins to slow down and there is a better alternative, the binary search.</p>"},{"location":"topics/algorithms/03_searching.html#binary-search","title":"Binary Search","text":"<p>The binary search is a more efficient searching algorithm that requires the list to be sorted. Remember that point, it's a common examination question, the items in the dataset must be sorted.</p> <p>It works by repeatedly dividing the list of items in half until the target element is found.  Think of the children's game of \"Guess The Number\".  It starts with one player thinking of a number between say 1 and 100.  We could approach this linearly i.e. \"Is it 1?\", \"Is it 2?\", \"Is it 3?\" etc..  Or we could ask \"Is it higher than 50?\"  If the answer is \"yes\" then we can automatically discount all the values between 1 and 50 thus chopping the original list in half. </p> <p>In outline, the binary search works as follows:</p> <ul> <li>Start with the entire sorted list.</li> <li>Compare the target element with the middle element of the list.</li> <li>If the target is equal to the middle element, the search is successful.</li> <li>If the target is less than the middle element, repeat the search on the lower half of the list.</li> <li>If the target is greater than the middle element, repeat the search on the upper half of the list.</li> <li>Continue dividing the search interval until the target is found or the interval becomes empty.</li> </ul> <p>A binary search is generally more efficient than linear search for large datasets, especially when the data is sorted. Linear search may require checking every element in the worst case.</p> <p>It's a more complicated algorithm to implement:</p> <p></p><pre><code>def binary_search(items, target):\n    low = 0\n    high = len(items) - 1\n\n    while low &lt;= high:\n        mid = (low + high) // 2  # Calculate the middle index\n\n        if items[mid] == target:\n            return mid  # Element found, return its index\n        elif items[mid] &lt; target:\n            low = mid + 1  # Discard the left half\n        else:\n            high = mid - 1  # Discard the right half\n\n    return -1  # Element not found\n</code></pre> This implementation defines a function <code>binary_search</code> that takes a sorted list (<code>items</code>) and a target element (<code>target</code>). It returns the index of the target element if found, or \\(\\(-1\\)\\) if the element is not in the list.  <p>The function uses a while loop to repeatedly narrow down the search range by adjusting the low and high indices based on the comparison of the middle element with the target.</p> <p>The function can be called:</p> <pre><code>sorted_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget_element = 7\n\nresult = binary_search(sorted_list, target_element)\n\nif result != -1:\n    print(f\"Element {target_element} found at index {result}.\")\nelse:\n    print(f\"Element {target_element} not found in the list.\")\n</code></pre> <p></p> <p>Copy the code to the IDE you use for Python programming and try it out.  Change the <code>items</code> being searched.  They can be strings or floats, the data type does not matter.</p> <p>Note</p> <p>In the next section we'll use these algorithms to learn an important skill for debugging programs, that of tracing code.</p> <p>Warning</p> <p>If the animation does not appear, just refresh the page!</p> Binary Search Animation Start Search <p>Mathematically, using the Big O notation introduced in the previous section, we can work out the number of \"guesses\" required or a given number of items:</p> Number of items in the list (<code>n</code>) Maximum number of \"guesses\" 10,000 14 1,000 10 500 9 100 6 50 5 10 3 <p>This is \\(O(log_2 n)\\)</p>"},{"location":"topics/algorithms/03_searching.html#questions","title":"Questions","text":"1. Why is a linear search also known as a 'sequential search,' and how does it operate on a list?It compares elements in random order to find the target.It starts at the end of the list and works backwards.It checks each element in the list one by one until it finds the target or reaches the end.It skips every second element to make the search faster.A linear search works sequentially by comparing each element in the list until the target is found or the entire list is traversed.Submit 2. Which of the following is a correct pseudocode for a linear search?FOR each item in list IF item == search_key THEN RETURN indexIF search_key == first_item THEN RETURN 0 ELSE RETURN -1FOR item in list COMPARE search_key TO item UNTIL FOUNDWHILE search_key NOT FOUND CONTINUE THROUGH LISTThe correct pseudocode iterates through each item in the list and compares it to the search key, returning the index when a match is found.Submit 3. Convert the following pseudocode into Python code:<pre><code>FOR each item in list\n    IF item == search_key THEN\n        RETURN index</code></pre>for item in list: if item == search_key: return indexfor i in range(len(list)): if list[i] == search_key: return iwhile list not empty: compare search_key to item and return indexfor item in list: if item == search_key: breakThe correct Python code uses <code>for i in range(len(list))</code> to loop through the list and check each item against the search key.Submit 4. What is the worst-case behavior of a linear search algorithm?The search key is found at the beginning of the list.The search key is found in the middle of the list.The search key is the last item in the list or not present at all.The search key appears multiple times in the list.In the worst case, a linear search has to check every item in the list, either finding the target at the end or not finding it at all.Submit 5. Which of the following describes the main principle of a binary search?It compares each element in the list one by one.It sorts the list first before searching.It divides the list in half, comparing the middle element to the target and repeating the process on the relevant half.It starts from the last element and works backwards.Binary search divides the list in half, compares the target with the middle element, and repeats the search on the left or right half depending on the result.Submit 6. Why does a binary search require the list to be sorted?Because it compares adjacent elements.Because it divides the list and compares the middle element, which only works correctly in a sorted list.Because it must check each item sequentially.Because sorting makes the search faster.Binary search works by comparing the middle element and eliminating half of the list at each step, which only works if the list is sorted.Submit 7. Which of the following pseudocode correctly implements a binary search?Set low to 0, high to length of list, check middle, adjust low or high and repeat until found.Start at the first element, move forward by halves, check middle, repeat until found.Divide list into thirds, check middle element, repeat on one-third until found.Compare first and last elements, eliminate all but the middle element.The binary search pseudocode sets initial low and high values, checks the middle element, and narrows the search range by adjusting either low or high.Submit 8. In Python, which of the following implementations correctly performs a binary search?while low &lt; high: compare middle element, return if found, else adjust rangewhile low &lt;= high: calculate mid, compare target with items[mid], adjust low or high accordinglyif target in list: return list.index(target), else return -1for item in list: if item == target: return itemThe correct Python implementation repeatedly calculates the middle index and adjusts the search range based on the comparison with the target.Submit 9. Which of the following statements correctly compares the efficiency of linear and binary search algorithms?Linear search is faster than binary search when the list is large.Binary search is more efficient for large datasets if the list is sorted, while linear search is preferred for smaller or unsorted lists.Binary search works better for unsorted lists.Linear search is more efficient than binary search in all cases.Binary search is more efficient when the list is large and sorted, while linear search is used for unsorted lists or smaller datasets.Submit 10. Which real-world scenario would be most suitable for a linear search?Searching for a word in a large dictionary where the words are in alphabetical order.Finding a person's name in an unordered guest list.Looking up a phone number in a sorted phone book.Checking whether a number is present in a list of sorted lottery numbers.Linear search is suitable for unsorted lists, such as an unordered guest list, where binary search wouldn't be efficient.Submit"},{"location":"topics/algorithms/04_sorting.html","title":"Sorting Algorithms","text":""},{"location":"topics/algorithms/04_sorting.html#sorting-algorithms","title":"Sorting Algorithms","text":"<p>Objectives</p> <ul> <li>To understand and explain how the Bubble Sort algorithm works.</li> <li>To learn the mechanics of the algorithm, with examples and key concepts.</li> <li>To understand and explain how the Insertion Sort algorithm works.</li> <li>To learn the mechanics of the algorithm, with examples and key concepts.</li> <li>To understand and explain how the Merge Sort algorithm works.</li> <li>To learn the mechanics of the algorithm, with examples and key concepts.</li> </ul> <p>The task of a sorting algorithm is organise a list of items into a defined order.  A list of numbers could be organised into ascending or descending order based on their value, a list of strings could be sorted according to the length of each string (smallest or largest first) or put into lexicographic order i.e. <code>apple</code> would come before <code>banana</code>, and <code>banana</code> would come before <code>basket</code> etc..</p> <p>It is a common problem and one that has been of interest to computer scientists for a long time and there a number of different algorithms that have been devised to solve this problem.  It's an excellent way of being introduced to the idea that some algorithms are \"better\" than others.  How \"better\" is defined there is dependent on the requirements of the task such as the time needed to complete the task, or how much memory is available and how much data is needing to be sorted.</p> <p>Here we'll consider three sorting algorithms:</p> <ul> <li>Bubble Sort</li> <li>Insertion Sort</li> <li>Merge Sort</li> </ul> <p>Note</p> <p>There are many others worth exploring e.g. selection sort or quick sort but these are not required by the syllabus.</p>"},{"location":"topics/algorithms/04_sorting.html#bubble-sort","title":"Bubble Sort","text":"<p>Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through a list, compares adjacent items, and swaps them if they are in the wrong order. The process is repeated until the entire list is sorted.</p> <p>Bubble Sort gets its name because the smaller (or larger, depending on the order) elements gradually \"bubble\" to the top (beginning) of the list with each pass through the data.</p> <ol> <li>Compare adjacent elements: Starting from the beginning of the list, compare each pair of adjacent elements.</li> <li>Swap if needed: If the two elements are in the wrong order, swap them so that the larger element moves to the right (or smaller element moves to the left if sorting in descending order).</li> <li>Repeat the process: Continue comparing adjacent elements, moving from the start to the end of the list.</li> <li>Reduce the range: After each pass, the largest (or smallest) unsorted element is in its correct position, so the algorithm can ignore the last element during the next pass.</li> <li>Stop when sorted: Repeat the process until no swaps are needed, meaning the list is fully sorted.</li> </ol>"},{"location":"topics/algorithms/04_sorting.html#example","title":"Example","text":"<p>Let's sort the following list using Bubble Sort:</p> <p>Unsorted List: </p><pre><code>[38, 27, 43, 3, 9, 82, 10]\n</code></pre> <p>Step 1: First Pass - Compare <code>38</code> and <code>27</code>. Since 38 &gt; 27, we swap them:   </p><pre><code>[27, 38, 43, 3, 9, 82, 10]\n</code></pre> - Compare <code>38</code> and <code>43</code>. No swap needed. - Compare <code>43</code> and <code>3</code>. Since 43 &gt; 3, we swap:   <pre><code>[27, 38, 3, 43, 9, 82, 10]\n</code></pre> - Compare <code>43</code> and <code>9</code>. Swap:   <pre><code>[27, 38, 3, 9, 43, 82, 10]\n</code></pre> - Compare <code>43</code> and <code>82</code>. No swap needed. - Compare <code>82</code> and <code>10</code>. Swap:   <pre><code>[27, 38, 3, 9, 43, 10, 82]\n</code></pre> <p>After the first pass, the largest element <code>82</code> has \"bubbled\" to the last position.</p> <p>Step 2: Second Pass - Compare <code>27</code> and <code>38</code>. No swap needed. - Compare <code>38</code> and <code>3</code>. Swap:   </p><pre><code>[27, 3, 38, 9, 43, 10, 82]\n</code></pre> - Compare <code>38</code> and <code>9</code>. Swap:   <pre><code>[27, 3, 9, 38, 43, 10, 82]\n</code></pre> - Compare <code>38</code> and <code>43</code>. No swap needed. - Compare <code>43</code> and <code>10</code>. Swap:   <pre><code>[27, 3, 9, 38, 10, 43, 82]\n</code></pre> <p>After the second pass, <code>43</code> is in its correct position, and we continue for the remaining elements.</p> <p>Step 3: Third Pass - Compare <code>27</code> and <code>3</code>. Swap:   </p><pre><code>[3, 27, 9, 38, 10, 43, 82]\n</code></pre> - Compare <code>27</code> and <code>9</code>. Swap:   <pre><code>[3, 9, 27, 38, 10, 43, 82]\n</code></pre> - Compare <code>27</code> and <code>38</code>. No swap needed. - Compare <code>38</code> and <code>10</code>. Swap:   <pre><code>[3, 9, 27, 10, 38, 43, 82]\n</code></pre> <p>Step 4: Fourth Pass - Compare <code>3</code> and <code>9</code>. No swap needed. - Compare <code>9</code> and <code>27</code>. No swap needed. - Compare <code>27</code> and <code>10</code>. Swap:   </p><pre><code>[3, 9, 10, 27, 38, 43, 82]\n</code></pre> <p>Step 5: Fifth Pass - Compare <code>3</code> and <code>9</code>. No swap needed. - Compare <code>9</code> and <code>10</code>. No swap needed.</p> <p>The list is now fully sorted!</p> <p>Sorted List: </p><pre><code>[3, 9, 10, 27, 38, 43, 82]\n</code></pre>"},{"location":"topics/algorithms/04_sorting.html#the-mechanics-of-bubble-sort","title":"The Mechanics of Bubble Sort","text":"<p>a. Comparing Adjacent Elements:</p> <ul> <li>The fundamental operation in Bubble Sort is comparing adjacent elements in the list and swapping them if they are in the wrong order.</li> </ul> <p>b. Multiple Passes:</p> <ul> <li>The algorithm requires multiple passes through the list. With each pass, the largest unsorted element gets moved to its correct position.</li> <li>The process repeats until a full pass occurs with no swaps, meaning the list is sorted.</li> </ul> <p>c. Optimized Bubble Sort (Optional for Higher Understanding):</p> <ul> <li>A simple improvement can stop the algorithm early if no swaps are made during a pass. This is useful if the list becomes sorted before completing all possible passes.</li> </ul>"},{"location":"topics/algorithms/04_sorting.html#why-bubble-sort-is-considered-inefficient","title":"Why Bubble Sort is Considered Inefficient","text":"<p>a. Time Complexity:</p> <ul> <li>Bubble Sort has a time complexity of O(n\u00b2), where <code>n</code> is the number of elements in the list.</li> <li>This means that as the size of the list increases, the time taken to sort grows quadratically (very quickly).</li> <li>Bubble Sort is inefficient for large lists and is generally slower than more advanced algorithms like Merge Sort or Quick Sort.</li> </ul> <p>b. Best Used for Small Datasets:</p> <ul> <li>While inefficient for large datasets, Bubble Sort is easy to understand and can be used for small lists or as an introduction to sorting algorithms.</li> </ul>"},{"location":"topics/algorithms/04_sorting.html#summary-of-key-steps","title":"Summary of Key Steps","text":"<ol> <li>Compare adjacent elements in the list.</li> <li>Swap them if they are in the wrong order.</li> <li>Repeat until no more swaps are needed, indicating that the list is sorted.</li> </ol>"},{"location":"topics/algorithms/04_sorting.html#bubble-sort-in-pseudocode","title":"Bubble Sort in PseudocodeBubble Sort Animation","text":"<p>Here\u2019s a high-level pseudocode to help visualize the process:</p> <pre><code>function bubbleSort(list):\n    n = length of list\n    for i from 0 to n-1:\n        swapped = false\n        for j from 0 to n-i-1:\n            if list[j] &gt; list[j+1]:\n                swap list[j] and list[j+1]\n                swapped = true\n        if swapped == false:\n            break\n</code></pre> <ul> <li>The variable <code>swapped</code> is used to optimize the algorithm. If no swaps are made during a pass, the algorithm stops early because the list is already sorted.</li> </ul> <p>Bubble Sort is a simple but inefficient sorting algorithm that uses repeated comparison and swapping of adjacent elements to sort a list. While easy to understand, it is not practical for large datasets due to its time complexity of O(n\u00b2). However, it is a great introduction to sorting algorithms for students and helps build the foundation for understanding more complex algorithms.</p> <p>Warning</p> <p>If the animation does not appear, just refresh the page!</p> Start Bubble Sort <p>Note</p> <p>Follow the animation closely.  You may be able to spot an improvement?  Depending on the values chosen (at random) and their starting positions a sorted result might be obtained before the number of iterations has been reached.  In this code, it continues to check for swaps even when no swaps have taken place on the previous iteration.</p>"},{"location":"topics/algorithms/04_sorting.html#insertion-sort","title":"Insertion Sort","text":"<p>Insertion Sort is a simple, intuitive sorting algorithm that builds the final sorted list one item at a time. It works similarly to how people arrange playing cards in their hands, inserting each new card into its correct position among the already sorted cards.</p> <p>The algorithm starts with an initially sorted list of one element and inserts each subsequent element into the correct position relative to the already sorted portion.</p> <p>It works as follows:</p> <ol> <li>Start with the second element: Assume that the first element is already sorted. Start with the second element and compare it with the elements before it.</li> <li>Shift larger elements: If the element to the left is larger than the current element, shift it to the right.</li> <li>Insert the current element: Once you find the correct position for the current element, insert it in its correct place.</li> <li>Repeat the process for the next element, gradually building up a larger sorted section of the list.</li> </ol>"},{"location":"topics/algorithms/04_sorting.html#example-of-insertion-sort","title":"Example of Insertion Sort","text":"<p>Let's sort the following list using Insertion Sort:</p> <p>Unsorted List: </p><pre><code>[38, 27, 43, 3, 9, 82, 10]\n</code></pre> <p>Step 1: Starting with the second element (<code>27</code>) - Compare <code>27</code> with <code>38</code> (the element to the left). - Since <code>27 &lt; 38</code>, shift <code>38</code> to the right. - Insert <code>27</code> in the first position:   </p><pre><code>[27, 38, 43, 3, 9, 82, 10]\n</code></pre> <p>Step 2: Move to the third element (<code>43</code>) - Compare <code>43</code> with <code>38</code>. Since <code>43 &gt; 38</code>, no shifts are needed. - <code>43</code> is already in its correct position:   </p><pre><code>[27, 38, 43, 3, 9, 82, 10]\n</code></pre> <p>Step 3: Move to the fourth element (<code>3</code>) - Compare <code>3</code> with <code>43</code>. Since <code>3 &lt; 43</code>, shift <code>43</code> to the right. - Compare <code>3</code> with <code>38</code>. Since <code>3 &lt; 38</code>, shift <code>38</code> to the right. - Compare <code>3</code> with <code>27</code>. Since <code>3 &lt; 27</code>, shift <code>27</code> to the right. - Insert <code>3</code> in the first position:   </p><pre><code>[3, 27, 38, 43, 9, 82, 10]\n</code></pre> <p>Step 4: Move to the fifth element (<code>9</code>) - Compare <code>9</code> with <code>43</code>. Since <code>9 &lt; 43</code>, shift <code>43</code> to the right. - Compare <code>9</code> with <code>38</code>. Since <code>9 &lt; 38</code>, shift <code>38</code> to the right. - Compare <code>9</code> with <code>27</code>. Since <code>9 &lt; 27</code>, shift <code>27</code> to the right. - Insert <code>9</code> in the second position:   </p><pre><code>[3, 9, 27, 38, 43, 82, 10]\n</code></pre> <p>Step 5: Move to the sixth element (<code>82</code>) - Compare <code>82</code> with <code>43</code>. Since <code>82 &gt; 43</code>, no shifts are needed. - <code>82</code> is already in its correct position:   </p><pre><code>[3, 9, 27, 38, 43, 82, 10]\n</code></pre> <p>Step 6: Move to the seventh element (<code>10</code>) - Compare <code>10</code> with <code>82</code>. Since <code>10 &lt; 82</code>, shift <code>82</code> to the right. - Compare <code>10</code> with <code>43</code>. Since <code>10 &lt; 43</code>, shift <code>43</code> to the right. - Compare <code>10</code> with <code>38</code>. Since <code>10 &lt; 38</code>, shift <code>38</code> to the right. - Compare <code>10</code> with <code>27</code>. Since <code>10 &lt; 27</code>, shift <code>27</code> to the right. - Insert <code>10</code> in the third position:   </p><pre><code>[3, 9, 10, 27, 38, 43, 82]\n</code></pre> <p>Sorted List: </p><pre><code>[3, 9, 10, 27, 38, 43, 82]\n</code></pre>"},{"location":"topics/algorithms/04_sorting.html#the-mechanics-of-insertion-sort","title":"The Mechanics of Insertion Sort","text":"<p>a. Building the Sorted List:</p> <ul> <li>Insertion Sort works by maintaining a growing, sorted portion of the list.</li> <li>For each element, the algorithm inserts it into its correct position in the already sorted part of the list by shifting larger elements to the right.</li> </ul> <p>b. Efficient for Small or Nearly Sorted Data:</p> <ul> <li>Insertion Sort is very efficient for small datasets or when the input list is nearly sorted.</li> <li>For small lists or nearly sorted data, it can outperform more complex algorithms like Merge Sort.</li> </ul> <p>c. Comparisons and Shifts:</p> <ul> <li>Insertion Sort makes comparisons between the current element and the elements in the sorted portion of the list, shifting the larger elements to make room for the current element.</li> </ul>"},{"location":"topics/algorithms/04_sorting.html#why-use-insertion-sort","title":"Why Use Insertion Sort?","text":"<p>a. Time Complexity:</p> <ul> <li>Insertion Sort has a time complexity of O(n\u00b2) in the worst case, where <code>n</code> is the number of elements in the list.</li> <li>However, in the best case, when the list is already sorted, its time complexity is O(n), making it quite efficient for nearly sorted data.</li> </ul> <p>b. Best Used for Small or Partially Sorted Data:</p> <ul> <li>While not efficient for large datasets, Insertion Sort works well for small datasets or datasets that are already partially sorted.</li> </ul> <p>c. Stable Sorting Algorithm:</p> <ul> <li>Insertion Sort is stable, meaning it preserves the relative order of equal elements, which can be important in certain situations, such as sorting records by multiple fields.</li> </ul>"},{"location":"topics/algorithms/04_sorting.html#summary-of-key-steps_1","title":"Summary of Key Steps","text":"<ol> <li>Start from the second element and compare it to the elements on its left.</li> <li>Shift the larger elements to the right to make room for the current element.</li> <li>Insert the current element into its correct position.</li> <li>Repeat this process until the entire list is sorted.</li> </ol>"},{"location":"topics/algorithms/04_sorting.html#insertion-sort-in-pseudocode","title":"Insertion Sort in PseudocodeInsertion Sort Animation","text":"<p>Here\u2019s a high-level pseudocode to help you visualize the process:</p> <pre><code>function insertionSort(list):\n    for i from 1 to length of list:\n        currentValue = list[i]\n        j = i - 1\n        while j &gt;= 0 and list[j] &gt; currentValue:\n            list[j + 1] = list[j]\n            j = j - 1\n        list[j + 1] = currentValue\n</code></pre> <ul> <li>In this pseudocode, the variable <code>currentValue</code> stores the element being inserted into the sorted portion of the list, while <code>j</code> is used to shift elements in the sorted section to the right.</li> </ul> Start Insertion Sort <p>Insertion Sort is an easy-to-understand sorting algorithm that sorts a list by inserting each element into its correct position within a growing sorted section of the list. Though it has a time complexity of O(n\u00b2) in the worst case, it is efficient for small lists and nearly sorted data. Understanding Insertion Sort provides a strong foundation for more complex sorting algorithms, as it introduces the idea of comparisons and shifts, key concepts in sorting.</p>"},{"location":"topics/algorithms/04_sorting.html#merge-sort","title":"Merge Sort","text":"<p>Merge Sort, like the binary search, is a divide and conquer sorting algorithm. It is efficient, particularly for large lists, and uses a recursive approach to sort data. </p> <ul> <li>Divide: Split the list into smaller sub-lists until each sub-list contains only one element.</li> <li>Conquer: Merge the sub-lists in a sorted manner to produce the final sorted list.</li> </ul> <p>Merge Sort is often considered better than simpler sorting algorithms like Bubble Sort or Insertion Sort, especially when dealing with large datasets, due to its predictable time efficiency.</p> <p>How Merge Sort Works</p> <ol> <li>Splitting (Dividing) Phase:</li> <li>The unsorted list is repeatedly divided into two halves until all sub-lists contain a single element.</li> <li> <p>A single element is considered sorted by definition because there is nothing to compare it with.</p> </li> <li> <p>Merging (Conquering) Phase:</p> </li> <li>The sub-lists are then merged together in pairs, and during each merge, the elements are placed in order.</li> <li>This process of merging continues until all the sub-lists are merged back into one fully sorted list.</li> </ol>"},{"location":"topics/algorithms/04_sorting.html#example_1","title":"Example","text":"<p>Let's look at how the Merge Sort works with a list of numbers:</p> <p>Unsorted List: </p><pre><code>[38, 27, 43, 3, 9, 82, 10]\n</code></pre> <p>Step 1: Divide the List - First, we split the list into two halves: </p><pre><code>Left:  [38, 27, 43]\nRight: [3, 9, 82, 10]\n</code></pre> - We continue splitting until we get sub-lists of one element: <pre><code>Left:  [38], [27], [43]\nRight: [3], [9], [82], [10]\n</code></pre> <p>Step 2: Merge the Lists - Now, we begin merging the sub-lists while sorting them: </p><pre><code>Merge [38] and [27] \u2192 [27, 38]\nMerge [43] remains as is.\nMerge [3] and [9] \u2192 [3, 9]\nMerge [82] and [10] \u2192 [10, 82]\n</code></pre> - The partially merged lists are now: <pre><code>Left:  [27, 38, 43]\nRight: [3, 9, 10, 82]\n</code></pre> - Finally, merge the two large sorted lists: <pre><code>Merge [27, 38, 43] and [3, 9, 10, 82] \u2192 [3, 9, 10, 27, 38, 43, 82]\n</code></pre> <p>Sorted List: </p><pre><code>[3, 9, 10, 27, 38, 43, 82]\n</code></pre>"},{"location":"topics/algorithms/04_sorting.html#the-mechanics-of-merge-sort","title":"The Mechanics of Merge Sort","text":"<p>a. Divide and Conquer Principle:</p> <ul> <li>Divide: The list is recursively split into smaller sub-lists.</li> <li>Conquer: Each pair of sub-lists is merged in sorted order.</li> </ul> <p>b. Recursive Nature:</p> <ul> <li>Merge Sort is a recursive algorithm. This means that the function repeatedly calls itself to split the list into halves, until only single elements remain.</li> </ul> <p>c. Merging:</p> <ul> <li>The merge process takes two sorted sub-lists and combines them into one sorted list by comparing the smallest elements from both sub-lists and arranging them in order.</li> </ul>"},{"location":"topics/algorithms/04_sorting.html#why-merge-sort-is-efficient","title":"Why Merge Sort is Efficient:","text":"<p>a. Time Complexity:</p> <ul> <li>Merge Sort has a time complexity of O(n log n), which means that as the size of the list (n) increases, the time taken to sort grows in proportion to n multiplied by the logarithm of n.</li> <li>This is better than algorithms like Bubble Sort and Insertion Sort, which have time complexities of O(n\u00b2).</li> </ul> <p>b. Stable Sorting Algorithm:</p> <ul> <li>Merge Sort is stable, meaning it preserves the relative order of items with equal values.</li> <li>This can be important when sorting complex data types with multiple fields.</li> </ul> <p>c. Drawback:</p> <ul> <li>One of the downsides of Merge Sort is that it requires extra memory for the temporary storage of sub-lists during the merging process, which can be a limitation when working with large datasets in memory-constrained environments.</li> </ul>"},{"location":"topics/algorithms/04_sorting.html#summary-of-key-steps_2","title":"Summary of Key Steps:","text":"<ol> <li>Split the list recursively into halves until each sub-list has one element.</li> <li>Merge the sub-lists back together in a sorted manner.</li> </ol>"},{"location":"topics/algorithms/04_sorting.html#merge-sort-in-pseudocode","title":"Merge Sort in Pseudocode","text":"<p>Here\u2019s a high-level pseudocode to help visualize the process:</p> <pre><code>function mergeSort(list):\n    if length of list &lt;= 1:\n        return list\n\n    mid = length of list / 2\n    leftHalf = mergeSort(list[0:mid])\n    rightHalf = mergeSort(list[mid:])\n\n    return merge(leftHalf, rightHalf)\n\nfunction merge(left, right):\n    result = []\n    while left and right are not empty:\n        if left[0] &lt; right[0]:\n            append left[0] to result\n            remove left[0] from left\n        else:\n            append right[0] to result\n            remove right[0] from right\n\n    append remaining elements of left (if any) to result\n    append remaining elements of right (if any) to result\n\n    return result\n</code></pre> <p>Merge Sort is an efficient, recursive algorithm that uses the divide and conquer approach. It breaks down the problem of sorting into smaller, more manageable sub-problems and then merges them back together in a sorted order. While Merge Sort requires additional space to store sub-lists, its time complexity of O(n log n) makes it a preferred choice for sorting large datasets efficiently.</p>"},{"location":"topics/algorithms/04_sorting.html#questions","title":"Questions","text":"1. What is the primary action performed during each step of the Bubble Sort algorithm?Compare adjacent elements and swap them if necessary.Insert each element into its correct position.Divide the list into smaller parts and sort them individually.Find the smallest element and place it at the beginning.Bubble sort works by comparing adjacent elements and swapping them if they are in the wrong order.Submit 2. Which of the following sorting algorithms has an average-case time complexity of $O(n log_n)$?Bubble SortMerge SortInsertion SortSelection SortMerge Sort has an average and worst-case time complexity of O(n log n), making it efficient for larger datasets.Submit 3. In Merge Sort, what is the key operation performed to merge two sorted arrays?Compare the first elements of both arrays and add the smaller one to the result.Swap the elements between the arrays.Move the smallest element to the front of both arrays.Insert elements in a pre-sorted list.In Merge Sort, two sorted arrays are merged by repeatedly comparing the first elements of both arrays and appending the smaller one to the result.Submit 4. Which sorting algorithm works by repeatedly finding the minimum element from the unsorted part and putting it at the beginning?Insertion SortBubble SortSelection SortHeap SortSelection Sort works by repeatedly selecting the minimum element from the unsorted portion of the list and placing it at the front.Submit 5. In the worst-case scenario, what is the time complexity of Bubble Sort?$O(n)$$O(log_n)$$O(n log_n)$$O(n^2)$The worst-case time complexity of Bubble Sort is O(n^2) due to the nested loops used for comparisons and swaps.Submit 6. Which of the following algorithms is an example of a divide-and-conquer algorithm?Bubble SortSelection SortMerge SortInsertion SortMerge Sort is a classic example of the divide-and-conquer strategy, where the array is divided into halves, sorted, and then merged.Submit 7. What is the key advantage of Merge Sort over Bubble Sort?Merge Sort requires less memory.Merge Sort has a guaranteed time complexity of O(n log n), while Bubble Sort is O(n^2).Merge Sort is easier to implement.Merge Sort works in-place, while Bubble Sort does not.Merge Sort has a guaranteed time complexity of O(n log n), making it more efficient for large datasets compared to Bubble Sort's O(n^2).Submit 8. Which sorting algorithm performs the best on nearly sorted data?Merge SortSelection SortInsertion SortBubble SortInsertion Sort performs very efficiently on nearly sorted data, achieving O(n) time complexity in such cases.Submit 9. Which of the following algorithms is stable, meaning it preserves the relative order of equal elements?Selection SortMerge SortHeap SortBubble SortMerge Sort is a stable sorting algorithm, meaning it preserves the relative order of equal elements.Submit 10. What is the best-case time complexity of Insertion Sort?$O(n log_n)$$O(n^2)$$O(n)$$O(log n)$The best-case time complexity of Insertion Sort is O(n), which occurs when the array is already nearly sorted.Submit"},{"location":"topics/algorithms/05_tracing.html","title":"Tracing an algorithm","text":""},{"location":"topics/algorithms/05_tracing.html#tracing-an-algorithm","title":"Tracing an algorithm","text":"<p>Objectives</p> <ul> <li>to identify where inputs, processing and outputs are taking place within an algorithm</li> <li>know how, and be able to, construct a trace table to illustrate how the value of variables are changing during the execution of an algorithm</li> </ul> <p>Often, when writing and implementing our algorithms using code, we do not get the results we are expecting.  We get an error.  There may be different types of errors.</p>"},{"location":"topics/algorithms/05_tracing.html#types-of-error","title":"Types of error","text":"<p>Syntax Errors</p> <p>Syntax errors are related to the structure or grammar of the code and occur when the programmer violates the rules of the programming language.  They are picked up by the compiler or interpreter during the compilation phase.  Typically these might include missing semicolons, mismatched parentheses, or typos in keywords. The program won't run until all syntax errors are fixed.</p> <p>Logic Errors</p> <p>Logic errors occur when the program's logic is flawed, leading to incorrect results or unexpected behavior. The code may run without producing any error messages, but the output is not what was intended.  Logic errors are usually discovered during testing and debugging phases and may involve tracing the code and analyzing the output to identify discrepancies.  The program runs, but it does not produce the expected or desired results.</p> <p>Runtime Errors</p> <p>Runtime errors occur during the execution of a program, they are not detected by the compiler but emerge when the program is running.  They are usually  identified by error messages displayed during program execution and typically might include division by zero, accessing an out-of-bounds array element, or using an undefined variable.  When that happens the execution of the program is interrupted or terminated.</p>"},{"location":"topics/algorithms/05_tracing.html#tracing-an-algorithm_1","title":"Tracing an algorithm","text":"<p>Tracing an algorithm can help track down i.e. debug logic errors, and runtime errors.  Let's first look at the process and principles then use the technique on code that does have a logic error that needs to be corrected.</p> <p>Note</p> <p>A trace table can also be used to determine the purpose of the algorithm</p> <p>We'll start with the binary search algorithm from the previous section:</p> <pre><code>def binary_search(items, target):\n    low = 0\n    high = len(items) - 1\n\n    while low &lt;= high:\n        mid = (low + high) // 2  # Calculate the middle index\n\n        if items[mid] == target:\n            return mid  # Element found, return its index\n        elif items[mid] &lt; target:\n            low = mid + 1  # Discard the left half\n        else:\n            high = mid - 1  # Discard the right half\n\n    return -1  # Element not found\n</code></pre> <p>Our list of items will be: <code>sorted_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>, and our <code>target</code> will be \\(7\\).</p> <p>When tracing we play the role of the computer keeping a record of the variables and how they are being changed during the execution of the function.  Proceed cautiously, do not try to second guess what you think might be happening, do not look forward just take it line by line.  It can help to cover up any lines of code not being considered, analyse that one line, note the variables and any change of state, before moving on to the next line.</p> <p>Our function has a number of important variables.  Make these the columns of a table:</p> target low high mid items[mid] output <p>We know our target is 7 and lines 2-3 of our function can be entered quite easily into our table:</p> target low high mid items[mid] output 7 0 9 <p>Moving down our code, line 5 is <code>True</code> as 0 is less than 9, so we proceed to the next line and note the value iof <code>mid</code>, then check the value at <code>items[mid]</code>:</p> target low high mid items[mid] output 7 0 9 4 5 <p>Line 8, we've  not found the target value in this position, the value is less than our target so we need to adjust the <code>low</code> value:</p> target low high mid items[mid] output 7 0 9 4 5 5 <p>Note</p> <p>You do not need to repeat the values for <code>target</code>, <code>high</code>, <code>mid</code> etc..  It is assumed these have not changed - which, of course, they haven't.</p> <p>We return to the top of the loop and repeat.  </p> <p>Line 5 is still <code>True</code> and we can progress to work out the value for <code>mid</code> (line 6) and then get the value for <code>items[mid]</code>:</p> target low high mid items[mid] output 7 0 9 4 5 5 7 8 <p>It's not our <code>target</code> value, but it is higher than our target so we use line 13 to adjust the value if <code>high</code>:</p> target low high mid items[mid] output 7 0 9 4 5 5 7 8 6 <p>Returning to the top of the loop again, <code>low &lt;= high</code>  is still <code>True</code> so we update the value if <code>mid</code> and get the value of <code>items[mid]</code> as before:</p> target low high mid items[mid] output 7 0 9 4 5 5 7 8 6 5 6 <p>It's still not our target value so we continue.  The value is less than the target so we update the value of <code>low</code>:</p> target low high mid items[mid] output 7 0 9 4 5 5 7 8 6 5 6 6 <p>Returning to the top of the loop again, it evaluates to <code>True</code> and we proceed as before to the next line to get the value of <code>mid</code> and the corresponding item in the list:</p> target low high mid items[mid] output 7 0 9 4 5 5 7 8 6 5 6 6 6 7 <p>Now the <code>target</code> is the same as <code>items[mid]</code> and on line 9 we can return the value iof <code>mid</code> from our function and we are done.</p>"},{"location":"topics/algorithms/05_tracing.html#questions","title":"Questions","text":"1. What will be the value of 'x' after executing the following pseudocode?<pre><code>x = 5\ny = 3\nwhile y &gt; 0:\n    x = x + y\n    y = y - 1</code></pre>891011Initially, x is 5 and y is 3. The loop adds y to x and decreases y. The final values are x = 5 + 3 + 2 + 1 = 11 and y = 0.Submit 2. What will be the output of the following pseudocode?<pre><code>for i = 1 to 3:\n    for j = 1 to i:\n        print(i, j)</code></pre>1 1 2 1 2 2 3 1 3 2 3 31 1 2 1 2 3 1 2 31 2 3 2 1 3 3 1 21 1 2 2 3 3The outer loop runs from 1 to 3. For each iteration of i, the inner loop prints pairs of (i, j) where j ranges from 1 to i.Submit 3. Which of the following algorithms is used to find the shortest path in a weighted graph with positive weights?Bubble SortSelection SortDijkstra's AlgorithmMerge SortDijkstra's Algorithm is designed to find the shortest paths from a source vertex to all other vertices in a weighted graph with positive weights.Submit 4. What is the time complexity of the binary search algorithm in the worst case?$O(n)$$O(n log n)$$O(log n)$$O(1)$Binary search has a time complexity of $O(log n)$ in the worst case, as it repeatedly divides the search interval in half.Submit 5. What will the value of the variable 'sum' be after executing the following pseudocode?<pre><code>sum = 0\ni = 1\nwhile i &lt;= 4:\n    sum = sum + i\n    i = i + 1</code></pre>6789The loop adds values 1 through 4 to sum, resulting in sum = 1 + 2 + 3 + 4 = 10.Submit 6. Which sorting algorithm is best suited for small datasets due to its simplicity and low overhead?Quick SortMerge SortInsertion SortHeap SortInsertion Sort is often preferred for small datasets due to its simplicity and efficiency with a small number of elements.Submit 7. What is the key feature of a stable sorting algorithm?It sorts elements in place.It guarantees the order of equal elements remains unchanged.It has the best possible time complexity.It requires additional memory for sorting.A stable sorting algorithm preserves the relative order of elements with equal keys.Submit 8. In a trace table for a sorting algorithm, what information is typically recorded?Values of variables at each step and changes made during the algorithm's execution.The final sorted list only.The time complexity of the algorithm.The original unsorted list.A trace table records the values of variables and changes made during each step of the algorithm's execution to understand its behavior.Submit 9. What is the best-case time complexity of the Bubble Sort algorithm?O(n^2)O(n log n)O(n)O(log n)Bubble Sort has a best-case time complexity of O(n) when the array is already sorted and no swaps are needed.Submit 10. Which algorithm is characterized by dividing the list into two halves, recursively sorting each half, and then merging them back together?Insertion SortMerge SortSelection SortHeap SortMerge Sort divides the list into halves, recursively sorts each half, and merges them to produce a sorted list.Submit 11. What will be the output of the following pseudocode?<pre><code>n = 5\nfor i = 1 to n:\n    for j = 1 to i:\n        print(i, j)</code></pre>1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 51 1 2 1 2 3 3 1 2 3 4 4 5 51 1 1 2 2 2 3 3 3 4 4 51 2 3 4 5The nested loop prints pairs of (i, j) where i ranges from 1 to n and j ranges from 1 to i, resulting in increasing sequences of printed pairs.Submit"},{"location":"topics/algorithms/06_structure_diagrams.html","title":"Structure Diagrams","text":""},{"location":"topics/algorithms/06_structure_diagrams.html#structure-diagrams","title":"Structure Diagrams","text":"<p>Objectives</p> <ul> <li>first</li> </ul> <p>As we have seen the importance of algorithms in solving computational problems. One essential tool in developing algorithms is the structure diagram, which helps visualize and organize the steps involved in solving a problem. In this note, we'll explore the role of structure diagrams in algorithm development, using the example of finding a maximum in a list of values.</p>"},{"location":"topics/algorithms/06_structure_diagrams.html#what-is-a-structure-diagram","title":"What is a Structure Diagram?","text":"<p>A structure diagram is a graphical representation of an algorithm, showing the sequence of steps and the flow of control between them. It's a high-level design tool that helps programmers plan, organize, and communicate their algorithms effectively.</p> <p>Unlike the flowchart, it highlights the broad steps that are needed to solve the problem without getting into the detail of loops or selection structures.  If you find yourself here, you have gone into too much detail.  Think of the structure diagram as containing those elements that will be converted into functions in your programming language.</p>"},{"location":"topics/algorithms/06_structure_diagrams.html#finding-a-maximum-in-a-list-of-values","title":"Finding a Maximum in a List of Values","text":"<p>Suppose we have a list of integers, and we want to find the maximum value in the list. For example, given the list <code>[3, 1, 4, 2, 5, 6]</code>, we want to write an algorithm that returns the maximum value, which is 6.</p>"},{"location":"topics/algorithms/06_structure_diagrams.html#the-structure-diagram","title":"The Structure Diagram","text":"<p>From the specification we can see there are three main steps (it's the input -&gt; process -&gt; output model again):</p> <ol> <li>Input: read in a list of integers</li> <li>Find Maximum: identify the maximum value in the list</li> <li>Output: Display the maximum value</li> </ol> <p>Each of these three steps get displayed in a rectangle, the process:</p> <pre><code>graph TD\n    A[FINDING THE MAX] --&gt; B[Get List of Integers]\n    A --&gt; J[Find Maximum Value]\n    A --&gt; D[Output Maximum]</code></pre> <p>Note</p> <p>We are not interested at this stage about the detail of how we get hold of the list of integers, nor the algorithm of finding the max etc..  It's just a bird's eye view!</p>"},{"location":"topics/algorithms/06_structure_diagrams.html#unpack-each-of-the-processes","title":"\"Unpack\" each of the processes","text":"<p>The next stage is to them consider what is  involved in each of these processes.</p> <p>Get list of integers</p> <p>There may be several ways of getting hold of these:</p> <ul> <li>hard code them directly in your code</li> <li>ask the user to enter the values (and provide some validation of that input)</li> <li>read the values in from a file</li> </ul> <p>To keep it simple, we'll use the first method:</p> <pre><code>def read_input():\n    return [3, 1, 4, 2, 5]  # Replace with actual input mechanism\n</code></pre> <p>FindMax()</p> <p>This is the tricky piece of the algorithm.  In pseudocode we might use:</p> <pre><code> Initialize max_value to the first element of the list\n For each element in the list:\n   If element &gt; max_value:\n     Update max_value to element\n Return max_value\n</code></pre> <p>Output Maximum</p> <p>Again we need to know where the output is to go, it could go to the screen or written to a file.  Here we just output it to the screen:</p> <pre><code>def display_output(max_value):\n    print(\"Maximum value:\", max_value)\n</code></pre> <p>MAIN</p> <p>Our main program now consists of the three processes we identified in our structure diagram:</p> <pre><code>def main():\n    numbers = read_input()\n    max_value = find_max(numbers)\n    display_output(max_value)\n\nmain()\n</code></pre>"},{"location":"topics/algorithms/06_structure_diagrams.html#expanding-the-structure-diagram","title":"Expanding the structure diagram","text":"<p>Perhaps the specification required the user to enter the integers.  This would require another process for the user enter the value, which should then be validated to ensure it is a genuine integer, before adding that value to the list.</p> <p>The structure diagram can thus be expanded:</p> <pre><code>graph TD\n    A[FINDING THE MAX] --&gt; B[Get List of Integers]\n    A --&gt; J[Find Maximum Value]\n    B --&gt; C[getValue]\n    C --&gt; D[validateValue]\n    A --&gt; K[Output Maximum]</code></pre>"},{"location":"topics/algorithms/06_structure_diagrams.html#benefit-of-structure-diagram","title":"Benefit of Structure Diagram","text":"<p>The structure diagram helps us in several ways:</p> <ul> <li>Clarifies the problem: By breaking down the problem into smaller steps, we can better understand what we need to do to find the maximum value.</li> <li>Organizes the algorithm: The structure diagram shows the sequence of steps and the flow of control, making it easier to write the algorithm.</li> <li>Identifies key processes: The diagram highlights the comparison step, where we decide whether to update the maximum value or not.</li> <li>Simplifies the implementation: With a clear structure diagram, we can focus on implementing each step individually, making the coding process more manageable.</li> </ul> <p>A good workflow can be developed once you have the structure diagram in place.  The <code>main()</code> function calls each of the processes from the structure diagram.  Then each of the functions can be defined with stubs</p> <pre><code>def read_input():\n    print(\"Read input\")\n    return 0\n\ndef find_max(numbers):\n    print(\"Find Max\")\n    return 0\n\ndef display_output():\n    print(\"Display output\")\n    return 0\n\ndef main():\n    numbers = read_input()\n    max_value = find_max(numbers)\n    display_output(max_value)\n\nmain()\n</code></pre> <p>Structure diagrams are a powerful tool in algorithm development, helping us to plan, organize, and communicate our algorithms effectively. By using a structure diagram to find the maximum in a list of values, we can break down the problem into manageable steps, identify key decisions, and simplify the implementation. As you continue to develop your programming skills, remember to use structure diagrams to help you design and implement algorithms efficiently.</p>"},{"location":"topics/algorithms/06_structure_diagrams.html#questions","title":"Questions","text":"1. What is the primary purpose of a structure diagram?To visualize and organize the steps involved in solving a problemTo detail the exact code implementation of an algorithmTo show the time complexity of an algorithmTo compare different sorting algorithmsA structure diagram helps visualize and organize the steps involved in solving a problem, offering a high-level view of the algorithm.Submit 2. In a structure diagram, what does each rectangle represent?A specific function or processA loop in the algorithmA decision pointAn input or output operationIn a structure diagram, each rectangle represents a specific function or process in the algorithm.Submit 3. What does the following structure diagram represent?  A[FINDING THE MAX] --&gt; B[Get List of Integers] A --&gt; J[Find Maximum Value] A --&gt; D[Output Maximum]<pre><code>graph TD\n    A[FINDING THE MAX] --&gt; B[Get List of Integers]\n    A --&gt; J[Find Maximum Value]\n    A --&gt; D[Output Maximum]</code></pre>A high-level overview of the process to find the maximum value in a listDetailed steps for reading input from a fileAlgorithm for sorting a list of integersPseudocode for validating user inputThis diagram provides a high-level overview of the process for finding the maximum value in a list, breaking it into input, processing, and output steps.Submit 4. In the structure diagram for finding a maximum value, what does the 'Find Maximum Value' step involve?Identifying and updating the maximum value in a listReading integers from user inputDisplaying the maximum value on the screenValidating input valuesThe 'Find Maximum Value' step involves identifying and updating the maximum value in a list of integers.Submit 5. Which of the following is NOT typically included in a structure diagram?Detailed implementation of loops and conditionalsHigh-level steps of the algorithmThe sequence of processesThe flow of control between stepsA structure diagram does not typically include detailed implementations of loops and conditionals; it focuses on high-level steps and flow of control.Submit 6. How does the structure diagram help in implementing an algorithm?By breaking down the problem into manageable steps and clarifying the sequence of operationsBy providing exact code for each stepBy specifying the time complexity of the algorithmBy comparing different data structuresThe structure diagram helps by breaking down the problem into manageable steps and clarifying the sequence of operations, making the implementation process more organized.Submit 7. What additional step is added to the structure diagram if user input is required for the list of integers?Get ValueValidate ValueOutput MaximumRead InputIf user input is required, steps like 'Get Value' and 'Validate Value' are added to ensure that the input is obtained and validated before processing.Submit 8. In the provided Python code, what does the 'display_output' function do?<pre><code>def display_output(max_value):\n    print(\"Maximum value:\", max_value)</code></pre>Prints the maximum value to the screenReads input from the userFinds the maximum value in the listValidates user inputThe 'display_output' function prints the maximum value to the screen.Submit 9. Which part of the structure diagram corresponds to the 'FindMax()' pseudocode?Find Maximum ValueGet List of IntegersOutput MaximumMain Function'FindMax()' corresponds to the 'Find Maximum Value' step in the structure diagram, which involves the logic to determine the maximum value in the list.Submit 10. What is a benefit of using a structure diagram in algorithm development?It simplifies the implementation by breaking down the problem into stepsIt provides a detailed code implementationIt measures the performance of the algorithmIt helps in debugging codeA structure diagram simplifies the implementation process by breaking down the problem into steps, making it easier to manage and understand.Submit"},{"location":"topics/data/index.html","title":"Data Representation","text":""},{"location":"topics/data/index.html#data-representation","title":"Data Representation","text":"<p>Slide Deck</p>"},{"location":"topics/data/index.html#overview","title":"Overview","text":"<p>In this topic we'll explore how data is stored and processed in computers using binary, the fundamental language of computers. Binary, a base-2 number system, uses only two digits: \\(0\\) and \\(1\\). You'll learn how to convert between binary, decimal and hexadecimal (base-16) systems, which is crucial for understanding how data is represented and manipulated in computing.</p> <p>The module will also cover how different types of data \u2014 such as text, images, and sound \u2014 are represented in binary form. For instance, text is often encoded using systems like ASCII or Unicode, where each character is assigned a unique binary code. Images are represented using binary through pixel values, and sound is converted into binary data through sampling. Understanding these conversions will give you insight into how complex data is processed and stored efficiently.</p> <p>Additionally, you'll study how data size is measured and managed in computing. This includes understanding units like bits, bytes, kilobytes, and megabytes, and how these units scale with the amount of data. The module will also touch on data compression techniques, which are used to reduce the size of data files while maintaining their quality.</p> <p>By mastering these concepts, you'll gain a foundational understanding of how digital systems operate and how data is handled behind the scenes in everyday technology. This knowledge is essential for any further studies in computing and helps in appreciating the complexity and efficiency of modern digital systems.</p>"},{"location":"topics/data/01_number_systems.html","title":"Number Systems","text":""},{"location":"topics/data/01_number_systems.html#number-systems","title":"Number Systems","text":"<p>Objectives</p> <ul> <li>Be able to describe the binary number system, Base-2  </li> <li>Be able to convert between decimal (denary) and binary number bases, Base-10 and Base-2</li> </ul> <p>From an electronic perspective a computer is built of lots (lots and lots) of transistors - a type of semiconductor.  They are the building blocks of modern electronic circuits.  They act like a switch either allowing a voltage to pass through or not.  They can be in two states which can be represented by the digits \\(0\\) and \\(1\\) (or <code>True</code> and <code>False</code>).  This aligns neatly with a number system, the number base we call binary or base 2.</p>"},{"location":"topics/data/01_number_systems.html#binary-number-system","title":"Binary Number System","text":"<p>Imagine if we had to count up to say \\(5\\) but only had the digits \\(0\\) and \\(1\\) to work with:</p> Decimal Binary 0 0 1 1 2 10 3 11 4 100 5 101 <p>What is happening here?  How have we arrived at those binary numbers?  </p> <p>Pause for a moment and consider how we work with decimal, or denary, numbers which is our norm.  Take the number \\(245\\).  We know this is \\(2\\) lots of \\(100\\) plus \\(4\\) lots of \\(10\\) plus \\(5\\).</p> <p>Our decimal system is also know as Base-10.  It has 10 digits (0..9).  If we think of our number, \\(245\\), as having three columns, each column will have, reading from right to left, place values that are powers of \\(10\\):</p> Hundreds Tens Units \\(10^2\\) \\(10^1\\) \\(10^0\\) 2 4 5 <p>Thousands would be \\(10^3\\) and so on.</p> <p>So, the binary (or Base-2) number system has the following pattern, where each column represents an increasing power of \\(2\\):</p> 16 8 4 2 1 \\(2^4\\) \\(2^3\\) \\(2^2\\) \\(2^1\\) \\(2^0\\) 1 0 1 <p>We can see that \\(101_2\\) is 1 lot of 4 plus 1.</p> <p>Note</p> <p>To distinguish the number 101 in decimal and 101 in binary we need to add a subscript to the number.  This \\(101_{10}\\) is \\(101\\) (\"one hundred and one\"), a decimal number; but \\(101_2\\) is a binary number, Base-2, which converts to \\(5_{10}\\).</p>"},{"location":"topics/data/01_number_systems.html#decimal-to-binary","title":"Decimal to Binary","text":"<p>There are two methods we can use to convert a decimal number to a binary number.  Let's use \\(245_{10}\\) and convert it to a binary number:</p> <p>Method 1: \"By inspection\"</p> <ul> <li>Find the nearest power of \\(2\\) to the given value, in this case it's \\(128\\) (\\(2^{7}\\)), put a \\(1\\) in that column and then take \\(128\\) away from the original value leaving \\(117\\).  </li> <li>Repeat the process, this time with \\(117\\) the remainder, putting a \\(1\\) in the nearest column, \\(64\\) (\\(2^{6}\\)) and take that away from \\(117\\) leaving \\(53\\).  </li> <li>Repeat, this time putting a \\(1\\) in the closest column, \\(32\\) (\\(2^{5}\\)), and take that away from \\(53\\) leaving \\(21\\).  </li> <li>Repeat, putting a \\(1\\) in the next column, \\(16\\) (\\(2^{4}\\)), and that away from \\(21\\) leaving \\(5\\)  which can quickly be added in the remaining columns for \\(2^{2}\\) and \\(2^{0}\\).</li> </ul> 128 64 32 16 8 4 2 1 \\(2^7\\) \\(2^6\\) \\(2^5\\) \\(2^4\\) \\(2^3\\) \\(2^2\\) \\(2^1\\) \\(2^0\\) 1 1 1 1 0 1 0 1 <p>If you had up the column headings where there is a \\(1\\), (\\(128 + 64 + 32 + 16 + 4 + 1\\)) you will get the sum: \\(245\\).</p> <p>Method 2: Repeated division by 2</p> <p>Take the decimal number and repeatedly divide by \\(2\\) writing down the remainder and stop when zero is reached:</p> Quotient New Number Remainder 245/2 122 1 122/2 61 0 61/2 30 1 30/2 15 0 15/2 7 1 7/2 3 1 3/2 1 1 1/2 0 1 <p>Then read up from the bottom!</p> <p>This can be described in pseudocode as:</p> <pre><code>    number = positive integer\n    while (number &gt; 0) {\n        bit = number mod 2\n        number = number div 2\n        put bit to left of any previous bits\n    }\n</code></pre> <p>Note</p> <p>The \"magic number\" \\(2\\) represents the target base and can be replaced by another value to convert the binary number into any other base.</p>"},{"location":"topics/data/01_number_systems.html#binary-to-decimal","title":"Binary to Decimal","text":"<p>Again, two methods can be applied:</p> <p>Method 1:</p> <p>Start from the left of the binary number, take your current total, multiply it by two and add the current digit and continue until there are no more digits left.  So, taking the binary number \\(11110101\\):</p> <p>\\(2 \\times 0 + 1 = 1\\) \\(2 \\times 1 + 1 = 3\\) \\(2 \\times 3 + 1 = 7\\) \\(2 \\times 7 + 1 = 15\\) \\(2 \\times 15 + 0 = 30\\) \\(2 \\times 30 + 1 = 61\\) \\(2 \\times 61 + 0 = 122\\) \\(2 \\times 122 + 1 = 245\\) </p> <p>Personally, this seems a little counter intuitive and method 2 is a preferred option.</p> <p>Method 2:</p> <p>The second method uses the positional notation and multiplies each digit by their corresponding power of two and sums these products:</p> <p>\\((1 \\times 128) + (1 \\times 64) + (1 \\times 32) + (1 \\times 16) + (1 \\times 4) + (1 \\times 1) = 245\\) </p> <p>This can be described in pseudocode as:</p> <pre><code>    power = 1\n    decimal = 0\n    loop through all bits in the binary string\n        decimal = decimal + power * bit\n        power = power * 2\n</code></pre>"},{"location":"topics/data/01_number_systems.html#binary-numbers-and-python","title":"Binary Numbers and Python","text":"<p>To convert character data to an integer we use the function <code>int()</code> as in:</p> <pre><code>value = input(\"Enter a number: \")\nvalue_int = int(value)\n</code></pre> <p>Note</p> <p>Remember: all data entered by the user at the keyboard is received by the computer as character data.  That is, you type the digit 4, but the computer receives it as '4'.</p> <p>The related functions <code>float()</code> and <code>str()</code> can also be used to convert one data type to another, the first converting a string to a floating point number, the second converting numeric data to a string.</p> <p>We can also use the function <code>bin()</code>.  This function takes an integer argument and returns its binary representation.</p> <pre><code>value = int(input(\"Enter a number: \"))      # e.g. 5\nvalue_bin = bin(value)              # convert to binary\nprint(value_bin)                # =&gt; '101'\n</code></pre> <p>Running this in the Python interactive environment:</p> <pre><code>&gt;&gt;&gt; value = int(input(\"Enter a number: \"))\nEnter a number: 5\n&gt;&gt;&gt; value_bin = bin(value)\n&gt;&gt;&gt; print(value_bin)\n0b101\n</code></pre> <p>Note</p> <p>The output is prefixed with <code>0b</code> to indicate that the number is binary.</p> <p>A binary string can be converted to its integer form by adding an additional argument to the <code>int()</code> function:</p> <pre><code>binary_num = '0101'\ndecimal_num = int(binary_num, 2)\nprint(decimal_num)\n</code></pre> <p>And the output is:</p> <pre><code>&gt;&gt;&gt; value_dec = int(value_bin, 2)\n&gt;&gt;&gt; print(value_dec)\n5\n</code></pre> <p>Converting to other number bases is also possible just by changing that second argument to show the base of the number of be converted e.g. <code>int('FF', 16)</code> will return \\(255\\).</p>"},{"location":"topics/data/01_number_systems.html#questions","title":"Questions","text":"1. Convert the binary number $1101_2$ to decimal.11131415The binary number $1101_2$ equals $1*2^3 + 1*2^2 + 0*2^1 + 1*2^0$, which is $8 + 4 + 0 + 1 = 13$ in decimal.Submit 2. Convert the decimal number $25_{10}$ to binary.11000110011101011011The decimal number $25_{10}$ can be converted to binary by dividing by 2 repeatedly, yielding the binary number $11001_2$.Submit 3. Convert the binary number $10101_2$ to decimal.19212223The binary number $10101_2$ equals $1*2^4 + 0*2^3 + 1*2^2 + 0*2^1 + 1*2^0$, which is $16 + 0 + 4 + 0 + 1 = 21$ in decimal.Submit 4. Convert the decimal number $42_{10}$ to binary.101010101011110101100110The decimal number $42_{10}$ can be converted to binary by dividing by 2 repeatedly, yielding the binary number 101010_2.Submit 5. Convert the binary number $1111101_2$ to decimal.123125127129The binary number $1111101_2$ equals $1*2^6 + 1*2^5 + 1*2^4 + 1*2^3 + 1*2^2 + 0*2^1 + 1*2^0$, which is $64 + 32 + 16 + 8 + 4 + 0 + 1 = 125$ in decimal.Submit 6. Convert the decimal number $18_{10}$ to binary.10010101001011010011The decimal number $18_{10}$ can be converted to binary by dividing by 2 repeatedly, yielding the binary number 10010_2.Submit 7. Convert the binary number $1001101_2$ to decimal.75777981The binary number $1001101_2$ equals $1*2^6 + 0*2^5 + 0*2^4 + 1*2^3 + 1*2^2 + 0*2^1 + 1*2^0$, which is $64 + 0 + 0 + 8 + 4 + 0 + 1 = 77$ in decimal.Submit 8. Convert the decimal number $63_{10}$ to binary.111111111110111101111100The decimal number $63_{10}$ can be converted to binary by dividing by 2 repeatedly, yielding the binary number 111111_2.Submit 9. Convert the binary number $110110_2$ to decimal.52545658The binary number $110110_2$ equals $1*2^5 + 1*2^4 + 0*2^3 + 1*2^2 + 1*2^1 + 0*2^0$, which is $32 + 16 + 0 + 4 + 2 + 0 = 54$ in decimal.Submit 10. Convert the decimal number $55_{10}$ to binary.110111110110111011111000The decimal number $55_10$ can be converted to binary by dividing by 2 repeatedly, yielding the binary number $110111_2$.Submit"},{"location":"topics/data/02_units.html","title":"Units","text":""},{"location":"topics/data/02_units.html#units","title":"Units","text":"<p>Objectives</p> <ul> <li>The bit is a fundamental unit of information (either 0 or 1)</li> <li>A byte is a group of 8 bits</li> <li>Explain the least significant bit and most significant bit in a binary number</li> <li>Know how to identify whether a binary number is odd or even</li> <li>Calculate the range of values for a given number of bits</li> <li>Know the common names for multiples of bytes</li> </ul> <p>In the last section we saw the binary digit, or bit, is the fundamental unit of information for digital systems, it is either a \\(0\\) or a \\(1\\).  One bit can have two possible values: 1 or 0.  </p> <p>Bits are described in groups of 8 bits, known as a byte (which as we'll see later gives enough space to score a single character like 'h' or 'W'). </p>"},{"location":"topics/data/02_units.html#msb-and-lsb","title":"MSB and LSB","text":"<p>In binary notation, MSB (Most Significant Bit) and LSB (Least Significant Bit) refer to the positions of the bits within a binary number, indicating their relative importance in terms of value.</p> <p>Most Significant Bit (MSB):</p> <ul> <li>The MSB is the leftmost bit in a binary representation.</li> <li>It holds the highest value in the binary place value system.</li> <li>Changing the MSB can significantly affect the overall value of the binary number.</li> <li>In an 8-bit binary number, the MSB is the bit in the 128's place (2^7).</li> </ul> <p>Least Significant Bit (LSB):</p> <ul> <li>The LSB is the rightmost bit in a binary representation.</li> <li>It holds the lowest value in the binary place value system.</li> <li>Changing the LSB has the smallest impact on the overall value of the binary number.</li> <li>In an 8-bit binary number, the LSB is the bit in the 1's place (2^0).</li> </ul> <p>Here's an example of an 8-bit binary number with the MSB and LSB labeled:</p> <pre><code>MSB                                LSB\n \u2193                                  \u2193\n 1    0    1    1    0    0    1    0\n2^7  2^6  2^5  2^4  2^3  2^2  2^1  2^0\n</code></pre> <p>In this example, the leftmost bit (1) is the MSB, and the rightmost bit (0) is the LSB. The MSB and LSB are essential concepts when working with binary numbers, especially in contexts where the relative importance of bits in a number is significant, such as in digital systems and data encoding.</p>"},{"location":"topics/data/02_units.html#odd-or-even","title":"Odd or Even","text":"<p>For binary numbers the LSB determines whether a number is odd or even. If the LSB is 1 the number is odd, if the LSB is 0 the number is even.  For example:</p> <ul> <li>\\(00000101_2\\): The LSB is a \\(1\\) so it must be an odd number.  (It's the decimal value \\(5_{10}\\).)</li> <li>\\(01010100_2\\):  The LSB is a \\(0\\) so it must be an even number. (It's the decimal value \\(84_{10}\\).)</li> </ul> <p>Note</p> <p>Although not technically required get into the habit of writing out ALL binary numbers in multiples of 8, as bytes, with leading zeros.</p>"},{"location":"topics/data/02_units.html#ranges-of-values","title":"Ranges of values","text":"<p>Note:</p> <ul> <li>One bit can have two distinct values (\\(2^1\\)), ranging between \\(0\\) and \\(1\\)</li> <li>Two bits can have four distinct values (\\(2^2\\)), ranging between \\(0\\) and \\(3\\)</li> <li>Three bits provide eight (\\(2^3\\)), randing between \\(0\\) and \\(7\\)</li> </ul> <p>Thus, one byte can have \\(256\\) distinct values ranging between \\(0\\) and \\(255\\)  (which as we'll see later provides enough space to store values representing characters, digits and punctuation) because \\(2^8\\) is \\(256\\).  </p> <p>REMEMBER</p> <p>For a given number of bits:</p> <ul> <li>The maximum number is: \\(2^{n-1}\\). For instance, if we have 3 bits the maximum value is: \\(2^{3-1} = 7\\)</li> <li>The number of numbers is \\(2^n\\). For unsigned integers the minimum and maximum values are \\(0\\) and \\(2^{n-1}\\) respectively where \\(n\\) is the number of bits.</li> </ul> <p>Warning</p> <ul> <li>Do not get confused between the maximum value (2n-1) and number of values (2n) that can be represented for a given number of bits. </li> <li>The number of bits available determines the number, the range, of values that can be represented in that number of bits.</li> </ul>"},{"location":"topics/data/02_units.html#byte-multiples","title":"Byte multiples","text":"<p>Bytes are small so they are most often used to measure the amount of data, the characters in a text document or pixels in an image file, or the amount of storage available:</p> Unit Equivalent (bytes) 1 kilobyte (KB) 1,024 1 megabyte (MB) 1,048,576 1 gigabyte (GB) 1,073,741,824 1 terabyte (TB) 1,099,511,627,776 1 petabyte (PB) 1,125,899,906,842,624 <p>Note</p> <p>Can you find out the names of even bigger byte multiples? How big is a Zoogolplex?</p> <p>You will also meet the term nibble to represent half a byte (which is an attempt at humour by computer scientists) and the word which is the amount of data a processor can handle.  The most common word sizes are 32-bits and 64-bits.  The precise amount of data in a word is a bit fuzzy as some processors might have different word sizes for different tasks but will usually hold for the number of bits the CPU can process in one chunk.</p> <p>To provide some context for these larger values, 1TB is roughly equivalent to the amount of information as all the books in a large library and 1PB would create (roughly) a stack of CDs a mile high!</p> <p>These values are used to define amounts of storage space available and useful to note that hard drive manufacturer's will usually use the decimal system to define storage e.g. 500GB to represent 5,000,000,000 bytes (that's \\(5 \\times 10^9\\) bytes).  However, your operating system will define the size of the drive using binary, \\(5 \\times 2^{30} = 465 GB\\), it seems 35GB of storage space has been lost!</p> <p>Whilst the above definitions remain as accepted terms they were actually replaced back in 2000.  To be up-to-date (!) we should all be using the following<sup>1</sup></p> Unit Short form Magnitude Kibibyte KiB \\(2^{10}\\) Mebibyte MiB \\(2^{20}\\) Gibibyte GiB \\(2^{30}\\) Tebibyte TiB \\(2^{40}\\) Pebibyte PiB \\(2^{50}\\) <p>These have been slow to get adopted, perhaps because:</p> <ul> <li>they sound a bit ridiculous</li> <li>hard drive manufacturers do not use them</li> <li>it's hard to break out of a tradition</li> </ul>"},{"location":"topics/data/02_units.html#questions","title":"Questions","text":"1. Define a bit and explain its fundamental role in digital systems.A bit is a binary digit that can be either 0 or 1. It is the smallest unit of data in digital systems, representing a binary choice.A bit is a unit of measurement for data transfer speed. It is used to calculate network bandwidth.A bit is a memory storage unit that can hold multiple types of data. It is used to represent complex data structures.A bit is a type of storage medium used in hard drives. It is fundamental to data retrieval processes.A bit is the smallest unit of data in digital systems, representing a binary choice of 0 or 1.Submit 2. Describe the composition of a byte and explain why it is a fundamental unit in digital systems.A byte is composed of 4 bits. It is fundamental because it represents a single character in most encoding systems.A byte is composed of 8 bits. It is fundamental because it can represent 256 different values, which is suitable for encoding characters.A byte is composed of 16 bits. It is fundamental because it is the basic unit for data transfer in memory.A byte is composed of 2 bits. It is fundamental because it is used to store floating-point numbers in calculations.A byte is composed of 8 bits and is fundamental because it can represent 256 different values, making it suitable for encoding characters.Submit 3. Given a binary number (e.g., $11011010_2$), identify the Most Significant Bit (MSB) and the Least Significant Bit (LSB).In $11011010_2$, the MSB is 1 and the LSB is 0.In $11011010_2$, the MSB is 0 and the LSB is 1.In $11011010_2$, the MSB is 1 and the LSB is 1.In $11011010_2$, the MSB is 0 and the LSB is 0.In the binary number $11011010_2$, the MSB is the leftmost bit (1) and the LSB is the rightmost bit (0).Submit 4. Explain how to determine whether a binary number is odd or even based on the value of its Least Significant Bit (LSB).If the LSB is 1, the binary number is even. If the LSB is 0, the binary number is odd.If the LSB is 0, the binary number is even. If the LSB is 1, the binary number is odd.If the LSB is 1, the binary number is neither odd nor even. If the LSB is 0, the number is even.If the LSB is 0, the binary number is neither odd nor even. If the LSB is 1, the number is odd.A binary number is even if the LSB is 0 and odd if the LSB is 1.Submit 5. Convert the binary number $10101001_2$ to decimal.$10101001_2$ is 169 in decimal.$10101001_2$ is 85 in decimal.$10101001_2$ is 133 in decimal.$10101001_2$ is 255 in decimal.The binary number $10101001_2$ converts to 169 in decimal.Submit 6. Convert the decimal number $37_{10}$ to binary.$37_{10}$ is $100101_2$.$37_{10}$ is $100111_2$.$37_{10}$ is $110010_2$.$37_{10}$ is $101010_2$.The decimal number $37_{10}$ converts to $100101_2$ in binary.Submit 7. Given a certain number of bits, calculate the maximum value that can be represented. For example, if given 5 bits, what is the maximum value?The maximum value with 5 bits is 31.The maximum value with 5 bits is 32.The maximum value with 5 bits is 25.The maximum value with 5 bits is 15.With 5 bits, the maximum value that can be represented is $2^5 - 1 = 31$.Submit 8. Explain the difference between the maximum value ($2^{n-1}$) and the number of values ($2^n$) that can be represented for a given number of bits.The maximum value ($2^{n-1}$) is half of the total number of values ($2^n$).The maximum value ($2^{n-1}$) is the same as the number of values ($2^n$).The maximum value ($2^{n-1}$) is double the number of values ($2^n$).The maximum value ($2^{n-1}$) is the square root of the number of values ($2^n$).The maximum value that can be represented ($2^{n-1}$) is half of the total number of values ($2^n$) that can be represented.Submit 9. Provide the equivalent number of bytes for 1 kilobyte (KB), 1 megabyte (MB), and 1 gigabyte (GB).1 KB = 1024 bytes, 1 MB = 1024 KB, 1 GB = 1024 MB.1 KB = 1000 bytes, 1 MB = 1000 KB, 1 GB = 1000 MB.1 KB = 1024 bytes, 1 MB = 1000 KB, 1 GB = 1000 MB.1 KB = 1000 bytes, 1 MB = 1024 KB, 1 GB = 1024 MB.1 kilobyte (KB) equals 1024 bytes, 1 megabyte (MB) equals 1024 KB, and 1 gigabyte (GB) equals 1024 MB.Submit 10. Differentiate between a kibibyte (KiB) and a kilobyte (KB), considering their magnitudes and usage in the binary and decimal systems.1 KiB = 1024 bytes, 1 KB = 1000 bytes. KiB is used in binary systems, KB in decimal systems.1 KiB = 1000 bytes, 1 KB = 1024 bytes. KiB is used in decimal systems, KB in binary systems.1 KiB = 1024 bytes, 1 KB = 1024 bytes. Both are used interchangeably in binary and decimal systems.1 KiB = 1000 bytes, 1 KB = 1000 bytes. Both represent the same amount of data in binary and decimal systems.1 kibibyte (KiB) is 1024 bytes and is used in binary systems, while 1 kilobyte (KB) is 1000 bytes and is used in decimal systems.Submit <ol> <li> <p>Some exam boards at GCSE require knowledge of these terms.\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/data/03_binary_arithmetic.html","title":"Binary Arithmetic","text":""},{"location":"topics/data/03_binary_arithmetic.html#binary-arithmetic","title":"Binary Arithmetic","text":"<p>Objectives</p> <ul> <li>To know how to add two binary numbers</li> <li>Be able to add two binary numbers</li> <li>Explain how the binary shift operator is used to perform multiplication and division of numbers by powers of 2</li> <li>Apply the binary shift operators <code>&gt;&gt;</code> and <code>&lt;&lt;</code> to a range of numbers</li> </ul> <p>As we saw in the last section all the data the computer processes has to be represented using the binary number system, Base-2.  The computer is made of electrical circuits and at the heart of these circuits are transistors.  The transistor can either hold a charge or not.  Those two states can be represented as \\(0\\) and \\(1\\) the two digits in the binary number system.</p> <p>All operations have to be carried out using this system, including adding, subtracting, multiplying and dividing values.  Here we will examine how this is done. </p> <p>Note</p> <p>We are only dealing with positive whole numbers in the range \\(0\\) to \\(255\\) i.e. one byte.</p>"},{"location":"topics/data/03_binary_arithmetic.html#addition","title":"Addition","text":"<p>Adding binary numbers follows the same rules as for denary.  Add each column starting with the least significant bit and move to the right.  Any carry from a column is added into the next column and so on.  It's relatively trivial as their are only four possible outcomes when adding two binary digits:</p> <p>\\(0_2 + 0_2 = 0_2\\) \\(0_2 + 1_2 = 1_2\\) \\(1_2 + 0_2 = 1_2\\) \\(1_2 + 1_2 = 0_2\\) carry \\(1_2\\) </p> <p>Bearing the carry in mind, four additional rules should be referenced:</p> <p>\\(0_2 + 0_2 + 1_2 = 1_2\\) \\(0_2 + 1_2 + 1_2 = 0_2\\) carry \\(1_2\\) \\(1_2 + 0_2 + 1_2 = 0_2\\) carry \\(1_2\\) \\(1_2 + 1_2 + 1_2 = 1_2\\) carry \\(1_2\\) </p> <p>For example, adding the binary number \\(01101110_2\\) and \\(00011100_2\\).  Work through the example, make sure you understand how the carry comes into play:</p> <pre><code>    01101110\n    00011100 +\n    --------\n    10001010\n    --------\n    1111\n</code></pre> <p>Note</p> <p>To check you have the right answer, convert the result (and original numbers) into decimal</p>"},{"location":"topics/data/03_binary_arithmetic.html#overflow-error","title":"Overflow Error","text":"<p>An overflow error occurs when the result of a calculation requires more bits than are in the available range.</p> <p>For example, when using eight bits, the largest number that can be represented is \\(11111111_2\\) (that is \\(255_{10}\\)). If we wanted to add \\(2\\) to \\(254\\) the following would occur:</p> <pre><code>1 1 1 1 1 1 1 0 +\n0 0 0 0 0 0 1 0 \n---------------\n0 0 0 0 0 0 0 0\n</code></pre> <p>We know the actual result should be \\(100000000_2\\) (that is \\(256_{10}\\)) but that requires nine bits and we only have 8.  An overflow error has occurred.  When this happens it can have serious consequences for the validity of calculations.</p>"},{"location":"topics/data/03_binary_arithmetic.html#multiplication-and-division","title":"Multiplication and Division","text":"<p>Binary numbers can be multiplied and divided by shifting the bits to the left or the right respectively.</p> <p>Note</p> <ul> <li>The Most Significant Bit is the bit on the left side of the binary number and, if changed, has the greatest impact on the magnitude of that number; </li> <li>the Least Significant Bit is the bit on the right side of the binary number ans, if changed, has the least impact on the magnitude of that number.</li> </ul> <p>Multiplication</p> <p>To multiply a number, a binary shift moves all the digits in the binary number along to the left and fills the gaps after the shift with 0:</p> <ul> <li>to multiply by two, all digits shift one place to the left</li> <li>to multiply by four, all digits shift two places to the left</li> <li>to multiply by eight, all digits shift three places to the left</li> <li>etc..</li> </ul> <p>Observe the following binary numbers and their decimal equivalents:</p> <p>\\(00000101_2 = 5_{10}\\) \\(00001010_2 = 10_{10}\\) \\(00010100_2 = 20_{10}\\) </p> <p>Notice how the binary pattern \\(101\\) is being shifted to the left by one place, this is multiplying that number by \\(2\\).  Shifting it \\(4\\) places to the left multiplies it by \\(4\\).</p> <p>By applying a combination of shifting by a power of two and addition we can multiply any binary number.</p> <p>Division</p> <p>To divide a binary number shift in the other direction, to the right, and fill the gaps before the shift with \\(0\\).  You should be able to see how this works by taking the previous example but not starting with \\(20\\):</p> <p>\\(00010100_2 = 20_{10}\\) \\(00001010_2 = 10_{10}\\) \\(00000101_2 = 5_{10}\\) </p> <p>Note</p> <p>To subtract one binary number the computer will add the complement of the second number, that is we add the negative.  we'll see how to do this later.</p>"},{"location":"topics/data/03_binary_arithmetic.html#errors-met-when-shifting","title":"Errors met when shifting","text":"<p>Consider the following example of shifting bits to the right:</p> <p>Starting with \\(11_{10}\\):  </p> <p>\\(00001011_2 = 11_{10}\\) </p> <p>We shift the bits one place to the right, resulting in the value \\(5\\):</p> <p>\\(00000101_2 = 5_{10}\\)</p> <p>The least significant bit has been lost, it's fallen off the end, thus the answer we're expecting of dividing by \\(2\\) has been rounded down.</p> <p>Consider too this situation when shifting to the left, and assuming we only have 8 bits to work with:</p> <p>\\(10100000_2 = 160_{10}\\) \\(01000000_2 = 64_{10}\\)</p> <p>Here, the most significant bit has been lost.  Instead of multiplying by \\(2\\) we have been left with a wrong answer as we only have 8 bits to hold our result.  A further example of an overflow error.</p>"},{"location":"topics/data/03_binary_arithmetic.html#python-shift-operators","title":"Python shift operators","text":"<p>We can observe this functionality using Python.  For example:</p> <pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; b = a &lt;&lt; 1      # shift by 1 place to the left\n&gt;&gt;&gt; b\n10\n</code></pre> <p>Experiment with this using different shift values to see how the original value is shifted by that power of 2 (the shift value).  Similarly, try with the right shift operator: <code>&gt;&gt;</code> to divide by a power of 2.</p> <p>Note</p> <p>Adding two binary numbers is also possible but not directly as they need to be converted into integers first e.g. <code>result = bin(int('1010',2) + int('1011', 2))</code>.</p>"},{"location":"topics/data/03_binary_arithmetic.html#questions","title":"Questions","text":"1. What is the result of adding the binary numbers $01101110_2$ and $00011100_2$?The result is $10101010_2$.The result is $10001010_2$.The result is $11001010_2$.The result is $11110010_2$.Adding $01101110_2$ and $00011100_2$ results in $10001010_2$.Submit 2. What happens when an overflow error occurs in binary arithmetic?The result is rounded up to the nearest power of 2.The result is truncated to fit within the available bits.The calculation is extended to more bits automatically.The result is converted to hexadecimal for accuracy.An overflow error results in the result being truncated to fit within the available bits.Submit 3. How can binary numbers be multiplied using binary shift operations?By shifting the bits to the right and adding zeros on the left.By shifting the bits to the left and filling the gaps with zeros.By rotating the bits to the right and adding a carry bit.By shifting the bits to the right and adding a carry bit.To multiply binary numbers, shift the bits to the left and fill the gaps with zeros.Submit 4. What is the result of shifting the binary number $00001011_2$ one place to the right?$00000101_2$$00001101_2$$00001001_2$$00000110_2$Shifting $00001011_2$ one place to the right results in $00000101_2$.Submit 5. What is the maximum value that can be represented with 8 bits?255256127128With 8 bits, the maximum value that can be represented is $2^8 - 1 = 255$.Submit 6. What is the result of the following binary addition: $1010_2 + 1100_2$?$10110_2$$10000_2$$10010_2$$11100_2$Adding $1010_2$ and $1100_2$ results in $10010_2$.Submit 7. How is a binary number divided by a power of 2 using binary shift operations?By shifting the bits to the left and filling the gaps with zeros.By shifting the bits to the right and filling the gaps with zeros.By rotating the bits to the left and discarding the overflow.By rotating the bits to the right and adding carry bits.To divide a binary number by a power of 2, shift the bits to the right and fill the gaps with zeros.Submit 8. Which bit is considered the Most Significant Bit (MSB) in a binary number?The rightmost bitThe leftmost bitThe bit in the middleThe second bit from the rightThe Most Significant Bit (MSB) is the leftmost bit in a binary number.Submit 9. What is the decimal equivalent of the binary number $10110101_2$?181177165185The binary number $10110101_2$ converts to 181 in decimal.Submit 10. What is the result of shifting the binary number $10100000_2$ three places to the left?$10100000_2$$01000000_2$$10000000_2$$00000000_2$Shifting $10100000_2$ three places to the left results in $10000000_2$.Submit 11. What is the result of shifting the binary number $00011100_2$ two places to the right?$00000111_2$$00011100_2$$00001110_2$$00000011_2$Shifting $00011100_2$ two places to the right results in $00000111_2$.Submit"},{"location":"topics/data/04_hexadecimal.html","title":"Hexadecimal","text":""},{"location":"topics/data/04_hexadecimal.html#hexadecimal","title":"Hexadecimal","text":"<p>Objectives</p> <ul> <li>To be able to explain why hexadecimal is often used in computer science.</li> <li>To understand how hexadecimal can be used to represent whole numbers.</li> <li>To be able to convert a hexadecimal number into binary, and vice versa</li> <li>To be able to convert a binary number into hexadecimal, and vice versa</li> <li>To be able to convert a hexadecimal number into decimal, and vice versa </li> <li>To be able to convert a decimal number into hexadecimal, and vice versa</li> </ul> <p>Everything that takes place in the computer depends on two-state switches. Each switch can be either on or off which can more easily be represented as either a \\(0\\) or a \\(1\\) (or, also, <code>False</code> or <code>True</code>).</p> <p>For convenience, we also need to know the hexadecimal number system, Base-16, as a shorthand for representing binary.</p> <p>Warning</p> <p>The computer only deals with the binary representation, the 0s and the 1s.  Obviously, as this represents the state of a particular transistor.  Hexadecimal is a shorthand for us as it helps make sense of long binary strings.</p> <p>Given a 32-bit binary string such as \\(01110010101000001111001011100101\\).  If we had to handle this number of bits it would be easy to make mistakes.  To make our lives a little easier we can represent this binary string as a hexadecimal number: \\(72A0F2E5_{16}\\).</p>"},{"location":"topics/data/04_hexadecimal.html#base-16","title":"Base-16","text":"<p>It looks a little weird, letters representing numbers but we borrow the first six letters from the alphabet to represent \\(10\\) through to \\(15\\).  Looking at the following table we can see how Base-16 numbers map directly to 4 binary digits:</p> Base-10 Base-2 Base-16 0 0000 0 1 0001 1 2 0010 2 3 0011 3 4 0100 4 5 0101 5 6 0110 6 7 0111 7 8 1000 8 9 1001 9 10 1010 A 11 1011 B 12 1100 C 13 1101 D 14 1110 E 15 1111 F <p>It is easier to use hexadecimal rather than denary to represent binary numbers as it is also based on powers of 2.  It is easy to group the binary digits into groups of four (a nibble) and use the table above to convert into the hexadecimal equivalent.  </p> <p>It saves a lot of space.  It takes 8 binary digits to represent a number between \\(0\\) and \\(255\\), but only ywo hexadecimal digits for the same range, \\(00\\) and \\(FF\\).</p> <p>Returning to our previous 32-bit number: \\(01110010101000001111001011100101\\).  To arrive at the hexadecimal equivalent:</p> <ul> <li>split the binary string into groups of four:</li> </ul> <p>\\(0111 0010 1010 0000 1111 0010 1110 0101\\)</p> <ul> <li>Use the table above to look up the hexadecimal:</li> </ul> \\(0111\\) \\(0010\\) \\(1010\\) \\(0000\\) \\(1111\\) \\(0010\\) \\(1110\\) \\(0101\\) \\(7\\) \\(2\\) \\(A\\) \\(0\\) \\(F\\) \\(2\\) \\(E\\) \\(5\\)"},{"location":"topics/data/04_hexadecimal.html#uses-of-hexadecimal","title":"Uses of hexadecimal","text":"<p>Repeating the point above:</p> <p>Warning</p> <p>The computer only deals with the binary representation, the 0s and the 1s.  Obviously, as this represents the state of a particular transistor.  Hexadecimal is a shorthand for us as it helps make sense of long binary strings.</p> <p>We use hexadecimal in computer science for a number of reasons:</p> <ul> <li> <p>Concise Representation: Hexadecimal allows for a more compact and concise representation of binary data. Each hexadecimal digit represents 4 binary digits (bits), making it easier to read and write large binary numbers.</p> </li> <li> <p>Memory Addresses: Memory addresses in computer systems are often expressed in hexadecimal. This is because each digit in hexadecimal corresponds to 4 bits, making it a natural choice when dealing with memory locations in a system where memory is often addressed at the byte level.</p> </li> <li> <p>Color Representation: Hexadecimal is commonly used in representing colors in computing. In HTML, for example, colors are often specified using hexadecimal notation (e.g., <code>#RRGGBB</code>, where <code>RR</code>, <code>GG</code>, and <code>BB</code> represent the red, green, and blue components, respectively).</p> </li> <li> <p>Binary Conversion: When working with binary data, it's common to convert between binary and hexadecimal for readability. Hexadecimal is more concise than binary and is easier for humans to read and write.</p> </li> </ul> <p>Using hexadecimal is easier for programmers to work with than binary, and it can be more readable than decimal for certain tasks.</p>"},{"location":"topics/data/04_hexadecimal.html#decimal-to-hexadecimal-conversion","title":"Decimal to Hexadecimal conversion","text":"<p>There are two methods that be used here.</p> <p>Method 1 - Repeated division by 16</p> <p>As we say when converting a decimal number to binary we can divide the value by \\(2\\) (the base) and note the remainder.  We can do the same here but using the number \\(16\\):</p> <p>For example, to convert \\(245_{10}\\):</p> <ul> <li>Divide \\(245\\) by \\(16 \\rightarrow 15\\) remainder \\(5\\)</li> <li>Find the hexadecimal equivalents ot both \\(15\\) and \\(5\\) and concatenate them together \\(\\rightarrow F5\\)</li> </ul> <p>Method 2 - Via binary</p> <p>Alternatively, convert the decimal number into binary (using one of the previous algorithms) and then convert the binary number into hexadecimal.</p> <p>For example, to convert \\(245_{10}\\):</p> <ul> <li>Convert \\(245_{10}\\) to binary \\(\\rightarrow 11110101_2\\)</li> <li>Divide the binary string into groups of 4 bits: \\(1111\\) and \\(0101\\)</li> <li>Use the look up table to get the equivalent hexadecimal digits, thus \\(F5\\).</li> </ul>"},{"location":"topics/data/04_hexadecimal.html#binary-to-hexadecimal-conversion","title":"Binary to hexadecimal conversion","text":"<ul> <li>Split the binary string into groups of four bits</li> <li>Find the corresponding hex value for each group of four</li> </ul> <p>For example: \\(01101100_2\\)</p> <ul> <li>Split into groups of 4: \\(0110_2\\) and \\(1100_2\\)</li> <li>Using the look-up table: \\(0110_2\\) is \\(6_{16}\\), \\(1100_2\\) is \\(C_{16}\\)</li> <li>Thus: \\(01101100_2\\) is \\(6C_{16}\\)</li> </ul>"},{"location":"topics/data/04_hexadecimal.html#hexadecimal-to-binary-conversion","title":"Hexadecimal to binary conversion","text":"<ul> <li>Take each hex digit </li> <li>Use the look up table to find the corresponding binary nibble</li> <li>Concatenate the results together</li> </ul> <p>For example: \\(5D_{16}\\)</p> <ul> <li>Use the look up table to find the binary equivalent for both \\(5_{16}\\) and \\(D_{16}\\)</li> <li>\\(5_{16}\\) is \\(0101_2\\), and \\(D_{16}\\) is \\(1101_2\\)</li> <li>Thus, \\(5D_{16}\\) is \\(0101 1101_2\\)</li> </ul>"},{"location":"topics/data/04_hexadecimal.html#hexadecimal-to-decimal","title":"Hexadecimal to decimal","text":"<p>The simplest approach here is to convert the hexadecimal number into binary and then convert the binary number into decimal.</p> <p>For example: \\(B3_{16}\\)</p> <ul> <li>Look up the binary equivalent for \\(B_{16} \\rightarrow 1011_2\\)</li> <li>Look up the binary equivalent for \\(3_{16} \\rightarrow 0011_2\\)</li> <li>Concatenate the two together: \\(10110011_2\\)</li> <li>Convert to decimal: \\(((128 * 1) + (32 * 1) + (16 * 1) + (2 * 1) + ( 1 * 1)) \\rightarrow 179\\)</li> </ul>"},{"location":"topics/data/04_hexadecimal.html#questions","title":"Questions","text":"1. Why is hexadecimal often used in computer science?It is easier for humans to read compared to binary.It is the native number system of computers.It is more compact than decimal for representing large binary numbers.It is the default number system used in arithmetic operations.Hexadecimal is often used because it provides a more compact representation of binary-coded values.Submit 2. How can hexadecimal be used to represent whole numbers?By using binary-coded decimal.By grouping binary digits into sets of four and converting to hexadecimal.By using a direct conversion from decimal to binary.By performing arithmetic operations in base-10.Hexadecimal can represent whole numbers by grouping binary digits into sets of four and converting each group to a hexadecimal digit.Submit 3. What is the hexadecimal representation of the decimal number $156_{10}$?9C_{16}A6_{16}B4_{16}C2_{16}The decimal number $156_{10}$ converts to $9C_{16}$ in hexadecimal.Submit 4. Convert the hexadecimal number $2A7_{16}$ to decimal.639679723745The hexadecimal number $2A7_{16}$ converts to $639$ in decimal.Submit 5. Why is hexadecimal commonly used in memory addresses in computer systems?It matches the binary structure of memory directly.It reduces the number of digits compared to binary and is easier to read.It is simpler to convert from decimal addresses.It automatically adjusts for different address sizes.Hexadecimal is used in memory addresses because it reduces the number of digits compared to binary and is easier for humans to read.Submit 6. What is the hexadecimal representation of the binary number $110110101011_{2}$?1B5_{16}1D6_{16}1E5_{16}1E6_{16}The binary number $110110101011_{2}$ converts to $1B5_{16}$ in hexadecimal.Submit 7. How does hexadecimal provide a more compact representation for binary-coded values?By reducing the number of digits needed to represent the same value.By using fewer bits per digit.By allowing for direct conversion from decimal.By simplifying arithmetic operations.Hexadecimal provides a more compact representation by reducing the number of digits needed to represent the same binary value.Submit 8. Convert the hexadecimal number $4F_{16}$ to binary.01001111_{2}00101111_{2}10011111_{2}11001111_{2}The hexadecimal number $4F_{16}$ converts to $01001111_{2}$ in binary.Submit 9. If a memory address is expressed as $1A3F_{16}$ in hexadecimal, what is the equivalent decimal value?6719692867676912The hexadecimal address $1A3F_{16}$ converts to $6719$ in decimal.Submit 10. Describe the relationship between hexadecimal and binary, and how each hexadecimal digit corresponds to a set of binary digits.Each hexadecimal digit corresponds to a 3-bit binary group.Each hexadecimal digit corresponds to a 2-bit binary group.Each hexadecimal digit corresponds to a 4-bit binary group.Each hexadecimal digit corresponds to an 8-bit binary group.Each hexadecimal digit corresponds to a 4-bit binary group, making it a compact representation of binary numbers.Submit"},{"location":"topics/data/05_negative_numbers.html","title":"Negative Numbers","text":""},{"location":"topics/data/05_negative_numbers.html#negative-numbers","title":"Negative Numbers","text":"<p>Objectives</p> <ul> <li>Know that signed binary can be used to represent negative integers and that one possible coding scheme is two's complement</li> <li>Know how to represent negative and positive integers in two's complement</li> <li>Know how to perform subtraction using two's complement</li> </ul> <p>Using the binary number system to represent the voltages (on or off) presents a problem when needing a third symbol to represent a minus sign ('-'), we have to use the two symbols we have, '0' and '1', to represent both the size and sign of any number.  </p> <p>There are two ways of doing this:</p> <ul> <li>Sign and Magnitude</li> <li>Twos Complement</li> </ul>"},{"location":"topics/data/05_negative_numbers.html#sign-and-magnitude","title":"Sign and Magnitude","text":"<p>Sign and magnitude is a method for representing negative numbers in binary by using the most significant bit (MSB) as a sign indicator. In this system, the MSB (also called the sign bit) is set to <code>0</code> for positive numbers and <code>1</code> for negative numbers. The remaining bits represent the magnitude (absolute value) of the number.</p> <p>For example, in an 8-bit system:</p> <ul> <li><code>00001010</code> represents the positive number \\(+10_{10}\\).</li> <li><code>10001010</code> represents the negative number \\(-10_{10}\\).</li> </ul> <p>The main drawback of sign and magnitude representation is that it allows for two representations of zero (<code>00000000</code> for +0 and <code>10000000</code> for -0), which can complicate arithmetic operations. </p> <p>Additionally, arithmetic with sign and magnitude can be more complex compared to other methods, such as two's complement.</p>"},{"location":"topics/data/05_negative_numbers.html#twos-complement","title":"Twos Complement","text":"<p>Twos complement representation again uses the most significant bit to act as the sign bit but it also contributes to the actual value.  If the MSB is 1, it represents a negative value equal to \\(-2^{(n-1)}\\) in an n-bit system.  </p> <p>Consider the following table:</p> \\(2^{-2}\\) \\(2^{1}\\) \\(2^{0}\\) Decimal 0 0 0 0 0 0 1 1 0 1 0 2 0 1 1 3 1 0 0 -4 1 0 1 -3 1 1 0 -2 1 1 1 -1 <p>Each of the negative numbers now has a \\(1\\) as its most significant bit whereas the positive numbers have \\(0\\) in that position.  </p> <p>It also ensures there is only one representation of zero.</p> <p>Take note of some other observations:</p> <ul> <li>The most negative value has \\(1\\) in the most significant bit and all other values are set to \\(0\\)</li> <li>For \\(-1\\), every bit is set to \\(1\\)</li> <li>The most positive value has a \\(1\\) in every position except for the most significant bit which is \\(0\\)</li> <li>Using 3 bits the number of values possible is \\(2^3 = 8\\) but the range is \\(-4 \\text{ to } +3\\)</li> </ul>"},{"location":"topics/data/05_negative_numbers.html#converting-decimal-to-twos-complement-binary","title":"Converting decimal to twos complement binary","text":"<p>There are two methods.  Before using either of these methods the decimal integer must be converted into binary using any of the methods, e.g. repeated division by two, outlined above.  Ignore whether the decimal number is negative, treat it as positive then follow either method 1 or 2 below:</p> <ol> <li>Invert all of the binary values, and add 1</li> <li>Start with the least significant bit, copy down all values up to and including the first \\(1\\) encountered, then flip the remaining digits.</li> </ol> <p>For example using method 1, \\(-23\\):</p> <ul> <li>\\(00010111_2\\)  (\\(23\\) converted into binary)</li> <li>\\(11101000_2\\)  (Invert all the digits)</li> <li>\\(11101001_2\\)  (Added \\(1\\))</li> </ul> <p>To confirm:</p> \\(2^{-7}\\) \\(2^{6}\\) \\(2^{5}\\) \\(2^{4}\\) \\(2^{3}\\) \\(2^{2}\\) \\(2^{1}\\) \\(2^{0}\\) 1 1 1 0 1 0 0 1 <p>For example, using method 2, \\(-40\\)</p> <ul> <li>\\(00101000_2\\)  (\\(40\\) converted into binary)</li> <li>\\(11011000_2\\)  (copy all from the left up to the first \\(1\\), then flip remaining bits)</li> </ul> <p>To confirm:</p> \\(2^{-7}\\) \\(2^{6}\\) \\(2^{5}\\) \\(2^{4}\\) \\(2^{3}\\) \\(2^{2}\\) \\(2^{1}\\) \\(2^{0}\\) 1 1 0 1 1 0 0 0"},{"location":"topics/data/05_negative_numbers.html#converting-twos-complement-binary-into-decimal","title":"Converting twos complement binary into decimal","text":"<p>As for converting unsigned binary number, sum the products of the column weightings.  Thus, for the example above, \\(-40_{10}\\):</p> <p>\\((1 \\times -128) + (1 \\times 64) + (0 \\times 32) + (1 \\times 16) + (1 \\times 8) + (0 \\times 4) + (0 \\times 2) + (0 \\times 1) = 40_{10}\\)</p>"},{"location":"topics/data/05_negative_numbers.html#subtraction-with-twos-complement","title":"Subtraction with twos complement","text":"<p>Taking advantage of the fact that \\(A - B = A + (-B)\\) makes addition and subtraction very simple for designers of circuits as the same circuitry can be used for both.  So, to do e.g. \\(7 - 4\\) we can do instead \\(7 + (-4)\\):</p> <p>\\(0111_2 - 0100_2 \\rightarrow 0111_2 + (-0100_2) \\rightarrow 0111_2 + 1100_2 = (1)0011_2\\) </p> <p>The carry generated in the final answer is just ignored so that the answer uses the same number of bits as those used we started with.</p>"},{"location":"topics/data/05_negative_numbers.html#range-with-a-given-number-of-bits","title":"Range with a given number of bits","text":"<p>There are only so many bits that can be allocated to represent a number, we can't magic new circuitry out of thin air!  Therefore, knowing the range of twos complement integers that can be accessed with a given number of bits is really important.</p> <p>The range can be calculated using the following formula:  \\(-2^{n-1}\\) to \\(2^{n-1} - 1\\).  Thus, the range for 8 bits will be \\(-2^7\\) to \\(2^7 - 1\\), or, \\(-128\\) to \\(127\\).</p>"},{"location":"topics/data/05_negative_numbers.html#questions","title":"Questions","text":"1. Convert the denary value -26 into 8-bit binary using two's complement.11100110111010101100011010011010The correct 8-bit two's complement representation of -26 is 11100110.Submit 2. Convert the denary value -85 into 8-bit binary using two's complement.10101011101111011101011110101101The correct 8-bit two's complement representation of -85 is 10101011.Submit 3. Convert the 8-bit two's complement binary number 11100001 into denary.-31-15-33-127The binary number 11100001 in 8-bit two's complement represents -31 in denary.Submit 4. Convert the 8-bit two's complement binary number 10001101 into denary.-115-101-119-123The binary number 10001101 in 8-bit two's complement represents -115 in denary.Submit 5. Convert the 8-bit two's complement binary number 11110111 into denary.-9-25-7-17The binary number 11110111 in 8-bit two's complement represents -9 in denary.Submit 6. How would a computer carry out the binary calculation for 18 - 9?Convert 9 to its two's complement and add to 18Direct subtraction in binaryShift left 18 and subtract 9Shift right 9 and add to 18To perform 18 - 9 in binary, the computer converts 9 to its two's complement (inverse binary plus 1) and then adds it to 18.Submit 7. How would a computer carry out the binary calculation for 26 - 15?Convert 15 to its two's complement and add to 26Direct subtraction in binaryShift left 26 and subtract 15Convert 26 to two's complement and subtract 15To perform 26 - 15 in binary, the computer converts 15 to its two's complement and then adds it to 26.Submit 8. How would a computer carry out the binary calculation for 17 - 34?Convert 34 to its two's complement and add to 17Direct subtraction in binaryConvert 17 to its two's complement and subtract 34Shift right 34 and add to 17To perform 17 - 34 in binary, the computer converts 34 to its two's complement and then adds it to 17.Submit 9. Convert the 8-bit two's complement binary number 10101110 into denary.-82-42-78-18The binary number 10101110 in 8-bit two's complement represents -82 in denary.Submit 10. Convert the denary value -120 into 8-bit binary using two's complement.10001100100010001000000010011000The correct 8-bit two's complement representation of -120 is 10001000.Submit"},{"location":"topics/data/06_character_encoding.html","title":"Character Encoding","text":""},{"location":"topics/data/06_character_encoding.html#character-encoding","title":"Character Encoding","text":"<p>Objectives</p> <ul> <li>To understand what a character set is</li> <li>Explain how characters are represented using ASCII</li> <li>Understand how character codes are grouped</li> <li>Explain the difference between ASCII and UNICODE</li> </ul> <p>When a user types a key on the keyboard a character is transferred to the computer.  As we've seen all our data has to be represented in binary so when the computer receives that character it actually receives a number.  That number is a code that stands for the character being sent.  every character will have a corresponding code.  The codes used is known as the character set.</p> <p>There are two character sets to consider:</p> <ul> <li>ASCII:  American Standard Code for Information Interchange</li> <li>Unicode</li> </ul>"},{"location":"topics/data/06_character_encoding.html#ascii","title":"ASCII","text":"<p>ASCII is the widely used encoding standard. First published back in 1963. It represents characters using 7 bits, allowing for \\(2^7\\) or \\(128\\) different characters.  This is enough for all the characters on a standard keyboard with a few codes left over for other purposes.</p> <p>It includes:</p> <ul> <li>the digits: '0' - '9'</li> <li>lower case letters: 'a' - 'z'</li> <li>upper case letters: 'A' - 'Z'</li> <li>punctuation symbols: ';', '*', '?', '@', '!' etc..</li> <li>non-printing control codes: most of these are now obsolete with a couple of exceptions e.g. TAB, CR, LF</li> </ul> <p>It was originally devised as a  standardised coding scheme for text.  Messages could be sent between computers and other telecommunication devices that all machines could interpret the text using a standard conversion format.  There had been other attempts e.g. EBCDIC which itself was an extension of Binary Coded Decimal developed by IBM in the early 1960s.</p> <p>Take a look at the ASCII table printed below:</p> <p></p> <p>The grouping of letters, numbers and punctuation might appear on first look to be a bit random but there is a beautiful logic behind this grouping.</p> <p>Start with the numbers:</p> Character Decimal Hexadecimal Binary '0' 48 30 0110000 '1' 49 31 0110001 '2' 50 32 0110010 '3' 51 33 0110011 '4' 52 34 0110100 .. .. .. .. <p>If we \"strip off\" the leading 3 bits of the binary code we are left with the binary value for that character.  Neat?  By \"strip off\" we mean turn those leading 1s into 0s.  This can be done by subtracting \\(48\\) from the character code:</p> <pre><code>0 1 1 0 0 1 1            51\n0 1 1 0 0 0 0  -         48 -\n-------------           ---\n0 0 0 0 0 1 1             3\n-------------           ---\n</code></pre> <p>Note</p> <p>When writing out characters, or strings of characters ALWAYS use quotes.  This way it is easy to distinguish between, e.g., the character '5' and the value \\(5\\).</p> <p>We'll see something similar when comparing the lower and upper case characters:</p> Character Decimal Hexadecimal Binary 'A' 65 41 1000001 'B' 66 42 1000010 'C' 67 43 1000011 .. .. .. .. 'a' 97 61 1100001 'b' 98 62 1100010 'c' 99 63 1100011 .. .. .. .. <p>A lower case character and its upper case equivalent differs only by one bit, in the \\(2^5\\) position.  Therefore, to convert between lower and upper case characters we just need to flip the bit in that position.  Applying the <code>XOR</code> logical operator will do this for us:</p> <p>Note</p> <p>XOR stands for \"eXclusive OR,\" and it is a logical binary operation. The XOR operation returns true (or 1) only one of the input bits is set to true (or 1)</p> <pre><code>1 0 0 0 0 1 0              'B'\n0 1 0 0 0 0 0  XOR         32   XOR\n-------------             ----\n1 1 0 0 0 1 0              'b'                                     \n-------------             ----\n</code></pre>"},{"location":"topics/data/06_character_encoding.html#ascii-and-python","title":"ASCII and Python","text":"<p>We can use some built-in functions in Python to explore the ASCII encoding system:</p> <p>7-bit ASCII</p> <p>Use <code>ord()</code> to return the ASCII code for a given character:</p> <pre><code>ascii_char = 'A'\nascii_code = ord(ascii_char) \nprint(f\"ASCII Code for '{ascii_char}': {ascii_code}\")\n</code></pre> <p>Use <code>chr()</code> to return the ASCII character for a given code:</p> <pre><code>ascii_code = 97\nascii_char = chr(ascii_code)   \nprint(f\"ASCII Chraccter for '{ascii_ccode}': {ascii_char}\")\n</code></pre> <p>Convert character digit to value</p> <pre><code>digit_char = '5'\nnumeric_value = ord(digit_char) - ord('0')\nprint(f\"Numeric value of '{digit_char}': {numeric_value}\")\n</code></pre>"},{"location":"topics/data/06_character_encoding.html#extended-ascii","title":"Extended ASCII","text":"<p>Standard ASCII uses 7 bits to represent each character, allowing for a total of 128 different characters. However, the limitations of standard ASCII became apparent as computer systems expanded and the need for additional characters, symbols, and language support arose.</p> <p>Note</p> <p>Standard ASCII does not include symbols for e.g. '\u00a3' and '\u20ac', nor any accented characters for languages such as French or German.</p> <p>To address these limitations, extended ASCII was introduced, which uses 8 bits (1 byte) to represent each character. This extension allows for a total of 256 possible characters, doubling the capacity of standard ASCII. The additional 128 characters are used to include special characters, accented letters, symbols, and characters from various languages.</p> <p>The first 128 characters in extended ASCII remain the same as standard ASCII, ensuring backward compatibility. The extended range (128-255) varies across different implementations and may include characters specific to certain languages, symbols, or additional graphical elements.</p> <p>It's important to note that the term \"extended ASCII\" does not refer to a single universally accepted standard. Different systems and applications might use different extended ASCII sets, leading to compatibility issues which Unicode addressed.</p>"},{"location":"topics/data/06_character_encoding.html#unicode","title":"Unicode","text":"<p>Unicode is a more extensive character encoding system that overcomes the limitations of ASCII and Extended ASCII. It uses a variable number of bits for each character, typically 8, 16, or 32 bits. Unicode aims to provide a universal character set to support all languages and symbols worldwide.  Unicode  assigns a unique code point to each character, it can produce over a million code points which is more than enough for every character in every language.</p> <p>Unicode is now the universal standard system for encoding characters - even emojis are included!</p> <p>The codes are grouped in tables, and it extends far beyond the 128 characters of ASCII but it utilizes the same codes as ASCII for the first 127 characters. This ensures that text encoded in ASCII can be seamlessly interpreted as Unicode, simplifying the transition and compatibility between the two standards.</p> <p>When working with the web, HTML and also Python programming you'll encounter the UTF-8 encoding standard.  Unicode alone doesn\u2019t store words in binary. Computers need a way to translate Unicode into binary so that its characters can be stored in text files.  This the role of UTF-8.  UTF stands for Unicode Transformation Format, it translates any Unicode character to a matching unique binary string and vice versa.</p>"},{"location":"topics/data/06_character_encoding.html#questions","title":"Questions","text":"1. What is a character set in the context of computer science? Provide an example of a commonly used character set.A collection of binary codes used to represent computer instructions. Example: UTF-8A collection of characters that a computer can recognize and process. Example: ASCIIA collection of programming languages. Example: PythonA collection of file formats used to encode images. Example: JPEGA character set is a collection of characters that a computer can recognize and process. ASCII is an example of a commonly used character set.Submit 2. How many unique characters can be represented in 7-bit ASCII?641282565127-bit ASCII can represent 128 unique characters, as it uses 7 bits for each character, allowing for 2^7 possible combinations.Submit 3. Compare and contrast 7-bit ASCII with Unicode. Which of the following best highlights a key difference?ASCII can encode more characters than Unicode.Unicode is limited to English characters, while ASCII supports multiple languages.ASCII supports fewer characters, while Unicode can represent characters from many different languages and scripts.Both ASCII and Unicode support the same number of characters, but Unicode uses fewer bits.ASCII supports only 128 characters, while Unicode can represent characters from many different languages and scripts, making it much more versatile.Submit 4. Why is the organization of character codes within encoding tables important?To ensure faster processing of images and videos.To allow for efficient representation and retrieval of characters.To reduce the complexity of algorithms in machine learning.To optimize the storage of large data sets.The organization of character codes in encoding tables is important for efficient representation and retrieval, which is crucial for text processing and data storage.Submit 5. How does Unicode address the limitations of ASCII?By using fewer bits to represent each character.By supporting only the English language.By allowing for the representation of a much larger range of characters from various languages and scripts.By improving the speed of data transmission over networks.Unicode addresses the limitations of ASCII by allowing for the representation of a much larger range of characters from various languages and scripts, which ASCII cannot handle.Submit 6. Which of the following is NOT an advantage of Unicode over ASCII?Unicode can represent characters from multiple languages.Unicode is compatible with ASCII.Unicode is limited to 256 characters.Unicode supports a much wider range of symbols and emojis.Unicode is not limited to 256 characters; this is a limitation of ASCII. Unicode can represent over a million characters.Submit 7. What is the significance of the first 127 codes in Unicode being the same as ASCII?It ensures compatibility between ASCII and Unicode.It limits Unicode to only English characters.It allows Unicode to use fewer bits than ASCII.It makes ASCII obsolete.The first 127 codes in Unicode being the same as ASCII ensures compatibility, allowing systems to easily transition between the two character sets.Submit 8. Convert the number '34' to its ASCII character.'4''3''\"''@'In ASCII, the number '34' corresponds to the double quote character '\"'.Submit 9. How many bits are needed to store the phrase 'Hello, World!' using ASCII?96104112128The phrase 'Hello, World!' consists of 13 characters. Each character in ASCII is represented using 8 bits, so the total number of bits required is 13 * 8 = 104 bits.Submit 10. What does a program that prints the ASCII table from character code 32 to 127 typically display?Control characters and symbols.Uppercase and lowercase letters, digits, punctuation marks, and some control characters.Only digits and lowercase letters.Hexadecimal representations of binary codes.Printing the ASCII table from character code 32 to 127 typically displays uppercase and lowercase letters, digits, punctuation marks, and some control characters.Submit"},{"location":"topics/data/07_images.html","title":"Images","text":""},{"location":"topics/data/07_images.html#images","title":"Images","text":"<p>Objectives</p> <ul> <li>Understand what a pixel is and be able to describe how pixels relate to an image and the way images are displayed.</li> <li>Describe how a bitmap represents an image using pixels and colour depth</li> <li>Explain the following for bitmaps:  <ul> <li>image   </li> <li>colour depth  </li> </ul> </li> <li>Describe using examples how the number of pixels and colour depth can affect the file size of a bitmap image</li> <li>Calculate storage requirements for bitmapped images and be aware that bitmap image files may also contain metadata.</li> <li>Be able to convert binary data into a bitmap image</li> <li>Be able to convert binary data into a bitmap image</li> </ul> <p>The storing and processing of images is another important feature of computer systems.  The data for the image has to be stored as binary patterns and there are two main methods:</p> <ul> <li>bit-mapped graphics: data is stored as a grid of elements, each element representing a colour being used</li> <li>vector graphics:  individual shapes are stored as a set of instructions used to recreate the graphic</li> </ul> <p>For GCSE we only need to know how  bitmap is used to represent images.</p>"},{"location":"topics/data/07_images.html#bit-mapped-graphics","title":"Bit-mapped graphics","text":"<p>The bitmap, as the name suggests, is a map of bits implying an underlying array structure with rows and columns.  At each intersection is a picture element, or pixel which is the smallest identifiable element of an image.  The pixel is the building block that builds any image, font, screen that you see.  Each pixel will have a single numeric value, this value represents the colour of the pixel.  </p> <p>If an image is opened with any image editing program on the computer and we zoom in on that image the pixels become visible as individual squares, as shown in the following image:</p> <p></p> <p>This occurs because the image is being displayed with a lower dots per inch density and is known as pixellation.</p> <p>Note</p> <p>Many of the common file formats we use for storing and representing images will use this format including .BMP, .JPG, .PNG though many will also apply sophisticated compression techniques which we'll consider later.</p> <p>There are two aspects of any bit-mapped image which impact the quality of that image (ignoring any compression for now):</p> <ul> <li>Resolution (or image size)</li> <li>Bit depth (or Colour Depth)</li> </ul>"},{"location":"topics/data/07_images.html#image-resolution","title":"Image Resolution","text":"<p>There are two ways to define the resolution of an image:</p> <ol> <li>The number of pixels that an image contains per inch, expressed as either pixels per inch (PPI) or dots per inch (DPI).  This of also called the pixel density.  It specifically refers to the number of pixels per inch in a printed image.  The higher the pixel density (a higher PPI or DPI) the sharper the image.</li> <li>The total number of pixels in an image.  This definition is related to the size of the image file itself.  It is calculated by multiplying the number of pixels in the width of the image by those in the height of the image.  The greater the number of pixels the better the quality of the image. </li> </ol> <p></p> <p>Both of these values will impact on how clear of sharp the image will be as well as determining the size of the image when printed.</p> <p>So, by example, an image with pixel resolution of \\(6000 \\times 4000\\) means the image is \\(6000\\) pixels wide and \\(4000\\) pixels high.  In total, the image contains \\(24,000,000\\) pixels or \\(24 \\text{MP}\\).  This is a fairly typical resolution used by cameras today (2022)</p> <p>The final printed size of an image depends on the DPI.  If an image has a resolution of \\(4500 \\times 3000\\) pixels the image will print at \\(15 \\times 10\\) inches at 300 DPI.  If the DPI was changed to 72 it will use \\(62.5 \\times 41.6\\) inches due to the lower DPI. </p> <p>Most operating systems can display the resolution of an image, as in the example below (Windows), here by right-clicking on the image and selecting the option 'Properties' from the menu.  This is a small image \\(311 \\times 162\\) pixels or \\(50,382\\) pixels.</p> <p></p> <p>In the properties window above is also shown the pixel density, the dots per inch.<sup>1</sup></p> <p>Simplistically one might think of the pixel resolution of the image as an input measurement, and DPI as an output measurement. So, 300 dpi means e.g. the printer will output 300 tiny dots for every inch of the print.  Any image can be displayed at any dot density.</p> <p>Note</p> <p>The print size has changed but the image itself has not been resized, it's merely reorganised the pixels.  The same thing happens when you change the resolution of your monitor, a higher resolution is making each pixel smaller and the smaller the icons, text etc will appear.</p>"},{"location":"topics/data/07_images.html#colour-depth","title":"Colour Depth","text":"<p>Each pixel represents a colour, each colour will be represented internally by a binary value.  The number of bits being allocated to each pixel will determine the colour depth, also known as the bit depth as it tells us how many bits have been used for that colour.</p> <p>For a monochrome (2-colour) image we only need 1 bit per pixel with \\(1\\) for black and \\(0\\) for white:</p> <p></p> <p>If we want more colours then we have to increase the number of bits being used to store the value representing the colour.  By using 2 bits we know have 4 possible colours:</p> <p></p> <p>Note</p> <p>Remember: \\(2^2 = 4\\)</p> <p>Thus, \\(8\\) bits will provide \\(256\\) possible colours.</p> <p>As for all types of binary data, the general formula is that for \\(n\\) bits you can store \\(2^n\\) colour codes, so more bits being allocated to each pixel will yield more colours being available and the more photo-realistic will be the final image:</p> <p></p> <p>Modern displays will use a combination of red, green and blue to form the colours.  Each of these colours can be allocated 8-bits giving 24-bits in total.  This amounts to \\(2^{24}\\) colours (16.7 million possible colours).  It is believed the human eye can only distinguish about 10 million colours so this is sufficient and is often known as true colour.</p> <p>You will also encounter 32-bit colour depth, an extra byte being added.  This extra 8 bits is usually used as an alpha or transparency byte, frequently termed as the alpha channel, which adjusts the level of opacity for a pixel when being blended with other colours.  This makes the pixel translucent, or \"see-through\".</p> <p>Do not get confused between the number of colours and the colour depth.  Colour depth is the number of bits allocated to the values representing the colours.</p> <p>Increasing the colour depth will inevitably lead to a larger file size.</p>"},{"location":"topics/data/07_images.html#print-quality-vs-web-page-quality","title":"Print quality vs web page quality","text":"<p>Images that are created to be displayed on a web page are typically \\(72 dpi\\).  When printing the image the resolution needs to be higher, and is typically \\(300 dpi\\).</p>"},{"location":"topics/data/07_images.html#calculating-file-size-for-an-image","title":"Calculating file size for an image","text":"<p>There are two measurements to consider:</p> <ul> <li>resolution of the image, i.e. the number of pixels being used</li> <li>the colour depth for each pixel</li> </ul> <p>It's a relatively simple calculation:</p> <p>\\(filesize = (\\text{ number of pixels } \\times \\text{ bits per pixel })\\) </p> <p>Thus, is \\(12\\) bits are used per pixel in an image \\(800\\) bits wide and \\(600\\) bits tall:</p> <ul> <li>Number of pixels = \\(800 \\times 600\\) </li> <li>Colour depth = \\(12\\)</li> <li>Total number of bits = \\(800 \\times 600 \\times 12\\) = \\(5760000\\)</li> <li>Total number of bytes = \\(5760000 / 8\\) = \\(720000\\) bytes </li> </ul> <p>Note</p> <p>Many images will use compression to reduce the size of the file</p>"},{"location":"topics/data/07_images.html#image-metadata","title":"Image metadata","text":"<p>The actual size of the file saved to a disk will be higher than that calculated above. The reason being that along with the data about each individual pixel will be data about the image itself, known as the metadata, and usually stored in the header of a file.  The metadata includes image about the the image itself as well as information about how it was produced.  Typically this might include e.g.:</p> <ul> <li>the format of the file</li> <li>the dimensions, in pixels</li> <li>data information i.e. when created, when last modified etc</li> <li>the device used to take the image, and if camera any specific details about aperture size etc</li> <li>geographical location</li> <li>colour depth used</li> </ul> <p>The properties image above showed the metadata available for that image.</p>"},{"location":"topics/data/07_images.html#image-processing-with-python","title":"Image processing with Python","text":"<p>To extend some of this theory we can see how to work with images using Python.</p> <p>Exercise 1: Load and Display an Image</p> <p>Use a Python library like PIL (Pillow) to load and display an image. You can install Pillow using <code>pip install Pillow</code>. Here's a sample code:</p> <pre><code>from PIL import Image\nimport matplotlib.pyplot as plt\n\n# Load an image\nimage_path = \"dunwich.jpg\"\nimg = Image.open(image_path)\n\n# Display the image\nplt.imshow(img)\nplt.axis('off')\nplt.show()\n</code></pre> <p>Output from this code:</p> <p></p> <p>Exercise 2: Retrieve image resolution</p> <p>Using the same PIL (Pillow) package we can return the dimensions and resolution of a given image:</p> <pre><code>from PIL import Image\nimport matplotlib.pyplot as plt\n\nwith Image.open(\"dunwich.jpg\") as image:\n    width, height = image.size\n    xres, yres = image.info['dpi']\n\nprint(f\"Width: {width}\")\nprint(f\"Height: {height}\")\nprint(f\"Resolution: {xres} x {yres}\")\n</code></pre> <p>Exercise 3: Convert Image to Grayscale</p> <p>Explore how colors are represented in images by converting the image to grayscale. Grayscale images represent each pixel with a single intensity value (typically from 0 to 255).</p> <p></p><pre><code>image_path = \"dunwich.jpg\"\nimg = Image.open(image_path)\n# Convert image to grayscale\ngray_img = img.convert('L')\n\n# Display the grayscale image\nplt.imshow(gray_img, cmap='gray')\nplt.axis('off')\nplt.show()\n</code></pre> Output from this code: <p></p> <p>Exercise 4: Resize Image</p> <p>Understand the impact of image resolution by resizing the image. You can use the <code>resize()</code> method from Pillow.</p> <pre><code># Resize the image\nnew_size = (300, 200)\nresized_img = img.resize(new_size)\n\n# Display the resized image\nplt.imshow(resized_img)\nplt.axis('off')\nplt.show()\n</code></pre> <p>Exercise 5: Flip Image Horizontally or Vertically</p> <p>Explore how images can be manipulated by flipping them horizontally or vertically.</p> <pre><code># Flip the image horizontally\nflipped_horizontal_img = img.transpose(Image.FLIP_LEFT_RIGHT)\n\n# Flip the image vertically\nflipped_vertical_img = img.transpose(Image.FLIP_TOP_BOTTOM)\n\n# Display the flipped images\nplt.subplot(1, 2, 1)\nplt.imshow(flipped_horizontal_img)\nplt.axis('off')\nplt.title('Horizontal Flip')\n\nplt.subplot(1, 2, 2)\nplt.imshow(flipped_vertical_img)\nplt.axis('off')\nplt.title('Vertical Flip')\n\nplt.show()\n</code></pre> <p>Output from the previous code:</p> <p></p> <p>Exercise 6: Extract Image Channels (RGB)</p> <p>Explore how color images are represented using the RGB model. Extract and display individual color channels (Red, Green, Blue).</p> <pre><code># Split the image into RGB channels\nr, g, b = img.split()\n\n# Display individual color channels\nplt.subplot(1, 3, 1)\nplt.imshow(r, cmap='Reds')\nplt.axis('off')\nplt.title('Red Channel')\n\nplt.subplot(1, 3, 2)\nplt.imshow(g, cmap='Greens')\nplt.axis('off')\nplt.title('Green Channel')\n\nplt.subplot(1, 3, 3)\nplt.imshow(b, cmap='Blues')\nplt.axis('off')\nplt.title('Blue Channel')\n\nplt.show()\n</code></pre> <p>Output from previous code:</p> <p></p>"},{"location":"topics/data/07_images.html#questions","title":"Questions","text":"1. What is a pixel, and how does it relate to the display of images?A pixel is a unit of sound that creates audio output.A pixel is a small unit of an image that, when combined with others, forms a complete picture.A pixel is a type of file format used to store images.A pixel is a mathematical formula used to create colors in digital images.A pixel is the smallest unit of a digital image, and when many pixels are combined, they form a complete image.Submit 2. How does a bitmap represent an image using pixels and color depth?By storing only the outline of the image.By assigning a specific color to each pixel based on its color depth.By converting the image into a text format.By using mathematical equations to represent the image.A bitmap represents an image by assigning a specific color to each pixel based on the image's color depth, which defines how many colors can be displayed.Submit 3. What is meant by 'color depth' in the context of bitmap images?The number of colors that can be displayed by a pixel.The physical depth of the screen displaying the image.The amount of storage required to save an image.The resolution of the image.Color depth refers to the number of bits used to represent the color of a single pixel, affecting the range of colors that can be displayed.Submit 4. How does the number of pixels in an image affect its file size?The more pixels, the larger the file size, and the higher the level of detail.The fewer pixels, the larger the file size.File size is not related to the number of pixels.The number of pixels only affects the image quality, not the file size.An image with more pixels will have a larger file size and a higher level of detail, as each pixel requires storage space.Submit 5. If an image has a resolution of 800x600 pixels and a color depth of 24 bits, how many bits are used to represent the image?480,000 bits14,400,000 bits11,520,000 bits4,800,000 bitsThe total number of bits is calculated by multiplying the resolution (800x600 pixels = 480,000 pixels) by the color depth (24 bits per pixel), resulting in 11,520,000 bits.Submit 6. What is the significance of 'storage requirement' in relation to bitmapped images?It refers to the amount of space needed to store the image file.It defines the color of each pixel in the image.It describes the method used to compress the image.It determines the physical size of the display screen.The storage requirement is the amount of space needed to store a bitmap image file, which depends on the image's resolution and color depth.Submit 7. Why is it important to be aware that bitmap image files may contain metadata?Metadata can reveal the image's color depth.Metadata may include information such as the image's creation date, author, or location, which can be sensitive.Metadata determines the image's file format.Metadata can reduce the file size of the image.Metadata may contain additional information about the image, such as the creation date or location, which could be sensitive and should be handled carefully.Submit 8. Which of the following best explains how the color depth of a bitmap image influences its file size?Higher color depth decreases the file size.Higher color depth increases the file size, as more bits are needed per pixel.Color depth has no impact on file size.Lower color depth always results in better image quality.Higher color depth increases the file size because more bits are required to represent each pixel's color.Submit 9. What is the relationship between the resolution of a bitmap image and its level of detail?Higher resolution means fewer details can be captured.Lower resolution improves image quality.Higher resolution means more details can be captured, as there are more pixels per image.Resolution does not affect the level of detail.Higher resolution allows for more details to be captured in an image because there are more pixels available to represent the visual information.Submit 10. What is a simple example of how bitmap images are represented using pixels and color depth?A 1x1 pixel image with a color depth of 1 bit can be either black or white.A 10x10 pixel image with a color depth of 8 bits per pixel can only be monochrome.An image with no pixels cannot display any colors.Color depth only affects the number of pixels in an image.In a bitmap image, a simple example would be a 1x1 pixel image with a 1-bit color depth, meaning the image can only be black or white.Submit <ol> <li> <p>The density of pixels in a monitor is measured in dots per inch (DPI) but since it refers to the number of dots that are within a line of one inch of scan, they were discontinued in favor of PPI (pixels per inch). While PPI is the correct term to refer to monitors, the two are often used interchangeably.\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/data/08_sound.html","title":"Sound","text":""},{"location":"topics/data/08_sound.html#sound","title":"Sound","text":"<p>Objectives</p> <ul> <li>Understand that sound is analogue and that it must be converted to a digital form for storage and processing in a computer.</li> <li>Understand that analogue signals are sampled to create the digital version of sound.</li> <li>Describe the digital representation of sound in terms of:</li> <li>sampling rate</li> <li>sample resolution.</li> <li>Calculate sound file sizes based on the sampling rate and the sample resolution.</li> </ul> <p>The storing and processing of sound and audio is another important function of computer systems.  As for numeric data, characters and images the audio data has to be stored as binary patterns.</p>"},{"location":"topics/data/08_sound.html#what-is-sound","title":"What is sound?","text":"<p>We should know from our early science lessons that sound is a change in air pressure and moves as a wave from the object generating the sound to our ears - it's a vibration of the air particles.  Our ears act as a pressure sensor, able to detect these subtle changes of air pressure.  The waves vibrate at a particular frequency which is measured in Hertz (Hz).  The lower the pitch, the lower the frequency.  Sound is *analogue i.e. it is constantly changing.</p> <p>Note</p> <p>The human ear can pick up sounds between ~20Hz to ~20kHz.  Sound waves above 20kHz are known as ultrasound; those below 10Hz are infrasound.  </p> <p>For the computer to process the sound waves we need some additional equipment:</p> <ul> <li>microphone: to record the sound, the microphone is a pressure sensor converting that pressure into an electrical signal corresponding to the sound wave</li> <li>speaker: to emit the sound, the cones in the speaker generating the sound wave for the stored sound</li> <li>analogue to digital converter (ADC): to convert the audio voltage received by the microphone to a digital representation</li> <li>digital to analogue converter (DAC): to convert the digital representation of the sound to an audio voltage to be passed to the speaker cones</li> </ul> <p></p> <p>The process is summarised as:</p> <ol> <li>A microphone detects the sound wave, converts it into an electrical (analogue) signal</li> <li>The analogue signal is sampled at regular intervals. </li> <li>The samples are approximated to the nearest integer (quantised).</li> <li>Each integer is encoded as a binary number with a fixed number of bits.</li> </ol> <p>There are two processes involved here:</p> <ul> <li>Sampling: the analog signal is measured at specific points in time, and these measurements are then used to represent the waveform.  The rate at which these samples are taken is called the sampling rate, usually measured in Hertz (Hz). Common sampling rates include 44.1 kHz or 48 kHz.</li> <li>Quantisation: Quantization is the process of assigning digital values to each sample obtained through sampling.  The number of bits used for quantization determines the resolution of the digital representation.</li> </ul>"},{"location":"topics/data/08_sound.html#sampling","title":"Sampling","text":"<p>Sampling is the process of periodically measuring the analogue signal such as those coming from a microphone and converting them into discrete values.  The number of samples taken per second is known as the sampling rate which determines the range of frequencies that can be represented. A higher sampling rate provides a better quality reproduction of the sound wave than a lower sampling rate.  It is analogous to the frame rate in video.  Once these values have been captured these digital audio files can be processed in many different ways (Digital Signal Processing (DSP)).</p> <p>To listen back to the sound is a reverse of this process, digital to analogue conversion, to reconstruct the original signal as best it can using the captured digital data.</p> <p></p> <p>The graph maps a very simple sound wave and the measurements, samples, being taken.  Converting those samples into a digital representation (the red line) shows the results are not very close to the original sound wave.  Converting that digital representation back to a sound wave would produce a wave as in the following diagram:</p> <p></p> <p>Compare the second sound wave to the first.  It is some way off from being an accurate reproduction, and would be very noticeable on playback.</p> <p>Increasing the number of samples recorded, known as a higher sampling rate, will increase the quality of the digital representation meaning we are better able to map the original sound wave to the final digital representation.  For a typical audio CD the sampling rate is 44.1kHz, sample rates for phone are nearer to 8kHz.  The higher the sample rate the more values being recorded and so the size of the audio file will increase.</p> <p>Note</p> <p>The reason for this value (44.1kHz) is thanks to the Nyquist Theorem which states: \"If a system uniformly samples an analog signal at a rate that exceeds the signal\u2019s highest frequency by at least a factor of two, the original analog signal can be perfectly recovered from the discrete values produced by sampling.\"  In practical terms, the theorem means that at least two samples must be taken per period of the original waveform, fewer than two will me an the frequency of the original signal will be lost.</p> <p>The highest frequency the human ear can perceive is approx. 20kHz, with a theoretical maximum of 22kHz, and it declines with age so the sample rate of 44.1kHz provides enough headroom to capture frequencies within the threshold of hearing.  (If anything exceeds this frequency it will not be sampled properly and will produce unwelcome audio content and distortion known as aliasing).</p>"},{"location":"topics/data/08_sound.html#quantisation","title":"Quantisation","text":"<p>When sampling we're focusing on the 'x' axis to determine the number of samples being taken in a given time period, for quantisation we're making adjustments to the 'y' axis i.e. the value at any given point in time.  You can think of this as the equivalent to bit depth with graphics i.e. the number of bits available to store the value being sampled, known as the sampling resolution.</p> <p></p> <p>In the diagram above the second sample has increased the range of values available, with an increased number of bits, and thus able to more closely reproduce the sound wave.  For almost every sample the actual value will lie between two possible values depending on the bit depth being used.</p> <p>Consider an overly simplified system that is using a bit depth of 3 bits, we know that \\(2^3\\) is \\(8\\), so our values will range between \\(0\\) and \\(7\\).  If the value sampled falls on any of these then we'll be fine but that's unlikely so the value recorded will have to be rounded or truncated to the nearest value available and thus introducing an error into the reproduction of that sound wave, as can be seen in the first of the patterns above.  Increasing the bit depth by \\(1\\) to \\(4\\) bits gives us \\(16\\) different levels and the simple wave form above can be more accurately reproduced.</p> <p>The bit depth used for CD recordings is \\(16\\) bits giving \\(65,5536\\) different levels; DVD uses \\(24\\) bits giving \\(16,777,216\\) different levels.  </p> <p>Recording sound with a higher bit depth also increases the dynamic range of sound that can be captured, this is the difference between the loudest and softest sound and measured in decibels (dB).  For example, recording at \\(8\\) bits per sample gives \\(49dB\\) range (not very good); \\(16\\) bits per sample gives \\(96dB\\) dynamic range (much better).</p> <p>Note</p> <p>It's doubtful the human ear can distinguish between 16-bit and 24-bit recordings but having the extra bits makes life much easier for the sound engineers.  It's often better to record at the highest bit depth possible and if necessary reduce for the final mix.</p> <p>Similar to the sampling rate, an increase in the bit depth will increase the size of the audio file.  Plus the number of channels (stereo or mono) needs to be factored in.  One minute of CD audio data requires in excess of 5 million 16-bit numbers, of these half will be for the left channel and the other half for the right channel.  That's approximately \\(10 Mb\\) for a minute of sound.</p>"},{"location":"topics/data/08_sound.html#audio-file-formats","title":"Audio file formats","text":"<p>Whatever bit rate or sample rate is used, the final realised version will be saved to an audio file and there are various formats used, many involving compression:</p> <ul> <li>.WAV: the uncompressed audio file, with a header and the individual samples, used by Windows operating systems</li> <li>.AIFF: the MAC os equivalent of .WAV files </li> <li>.MP3: compressed using a lossy compression format</li> <li>.WMA: similar to MP3 developed by Microsoft</li> <li>.OGG: open source format, loss less compression, better than MP3 but not as widely available</li> <li>.MID: not an audio file, reserved for MIDI files (see below)</li> </ul>"},{"location":"topics/data/08_sound.html#calculating-the-file-size","title":"Calculating the file size","text":"<p>The size of sound files can be calculated using the following formula:  </p> <p>\\(fileSize = length \\times sampleRate \\times bitDepth\\) </p> <p>Thus a 30 second sound file, sampled at 8kHz, with a bit depth of 16 would be:</p> <p>\\(30 \\times 8000 \\times 16 = 3840000 \\text{ bits} = 480,000 \\text{ bytes}\\) (\\(480 Kb\\))  </p>"},{"location":"topics/data/08_sound.html#midi","title":"MIDI","text":"<p>An alternative to recording the audio (the actual sound coming from an instrument) is to record the data about that sound using MIDI (Musical Instrument Digital Interface).  As the name suggests it is designed to be used by digital musical instruments (keyboards, drum machines etc).</p> <p>Remember, in digital sound recording audio is sound whereas MIDI contains no sound at all.  Once the audio has been captured it's not possible to remove individual notes, or change the duration of particular sounds (the can be put through various filters which can change the sound quite dramatically but all the recorded elements will be there to some degree).  With MIDI we capture information about the notes themselves e.g. the note number, its length, its velocity and it can be sent to another MIDI equipped instrument (or Digital Audio Workstation) via a specific channel.</p> <p>The sound is then produced using a sound generator (or virtual instrument), perhaps a software source in the computer or passed to another instrument with in-built speakers. The sound you get back will only be as good as the sound generator being used!</p> <p>Note</p> <p>Vocal sounds cannot be recorded via MIDI</p> <p>MIDI files act as a set of instructions that explain how the sound should be produced once attached to a playback device.  Thus, with the right software you can edit any of the information about any of the notes (the pitch, duration, velocity etc..)</p> <p>The size of MIDI files is significantly less than an equivalent audio file.</p>"},{"location":"topics/data/08_sound.html#playing-with-audio-and-python","title":"Playing with audio and Python","text":"<p>There are several libraries that can be installed to support audio playback and recording for use with Python including <code>playsound</code>, <code>simpleaudio</code>, <code>pyaudio</code> and <code>pydub</code>.  Just to illustrate what can be done we'll have a look at <code>pydub</code>.</p> <p><code>pydub</code> is an external library and not installed by default so it needs to be installed using the command <code>pip install pydub</code>.  Also, you will probably need to additionally install the <code>ffmpeg</code> library for your operating system.  <code>ffmpeg</code> is a powerful library of commands for manipulating audio files, it is very powerful and <code>pydub</code> relies on this library for handling different audio formats.  It can be simply installed using the command <code>pip install ffmpeg-python</code>.  For playback we'll use <code>pyaudio</code>, so again this needs to be installed: <code>pip install pyaudio</code>.</p> <p>Note</p> <p>That's three new libraries that will need to be installed using <code>pip</code>:   - <code>pip install pydub</code>   - <code>pip install ffmpeg-python</code>   - <code>pip install pyaudio</code></p> <p>You will also need a sample audio file.  You can download one here, a short piano track: piano.mp3. Download this file and save to a new directory.  You can source your own audio files, or record your own or course.  This sample was recorded using a sample rate of 24kHz and a bit-depth of 16 bits, so it's not great but serves as an example.  In the same directory create a new Python file for the following program code examples:</p> <p>Retrieve details about the audio</p> <pre><code>from pydub import AudioSegment\nfrom pydub.playback import play\n\naudio = AudioSegment.from_file(\"piano.mp3\", format=\"mp3\")   # load the audio file\n\nprint({\n    'duration' : audio.duration_seconds,\n    'sample_rate' : audio.frame_rate,\n    'channels' : audio.channels,\n    'sample_width' : audio.sample_width,\n    'frame_count' : audio.frame_count(),\n})\n</code></pre> <p>Play audio</p> <pre><code>from pydub import AudioSegment\nfrom pydub.playback import play\n\naudio = AudioSegment.from_file(\"piano.mp3\", format=\"mp3\")   # load the audio file\nplay(audio)\n</code></pre> <p>Change the sample rate</p> <p>In this snippet we loop through a number of different sample rates getting lower and lower.  With each the sound quality degrades.</p> <pre><code>from pydub import AudioSegment\nfrom pydub.playback import play\n\naudio = AudioSegment.from_file(\"piano.mp3\", format=\"mp3\")   # load the audio file\nframe_rates = [24000, 11000, 6000, 3000, 1000]              # Orig is 24kHz\nfor frame_rate in frame_rates:\n    audio = audio.set_frame_rate(frame_rate)\n    print(f\"Playing audio file with sample rate: {frame_rate} kHz\")\n    play(audio)\n</code></pre> <p>Change the bit depth</p> <pre><code>from pydub import AudioSegment\nfrom pydub.playback import play\n\naudio = AudioSegment.from_file(\"piano.mp3\", format=\"mp3\")   # load the audio file\n# Set the bit depth to 8 bits\naudio = audio.set_sample_width(1)                           # Orig is 16 bits\nplay(audio)\n</code></pre> <p>The function <code>set_sample_width()</code> takes a byte argument so the \\(1\\) used here sets the bit depth to 8 bits.</p> <p>Note</p> <p>There's no point entering a value higher than the original sample-rate!</p> <p>There are many additional functions available in the <code>pydub</code> library.  You can fade-in, fade-out, split tracks, reverse them, save the result to a fle and much more.</p>"},{"location":"topics/data/08_sound.html#questions","title":"Questions","text":"1. Why must sound be converted from analog to digital for storage and processing in a computer?Analog sound is too loud for computers to process.Digital sound is easier to compress and manipulate by computers.Computers can only process sound in analog form.Analog sound does not require conversion for storage.Computers process data in digital form, so analog sound must be converted to digital to allow for storage, manipulation, and playback.Submit 2. What does 'sampling' refer to in the context of converting analog sound to digital?It is the process of adding sound effects to digital audio.Sampling refers to the measurement of sound amplitude at regular intervals to create a digital representation.Sampling is the method of compressing digital sound files.Sampling is only necessary when recording video.Sampling involves measuring the amplitude of the analog sound wave at regular intervals (samples) to convert it into a digital form.Submit 3. How does the sampling rate impact the quality of digital audio?A higher sampling rate reduces audio quality.The sampling rate does not affect audio quality.A higher sampling rate increases audio quality by capturing more details of the sound wave.The sampling rate only affects the file size, not the quality.A higher sampling rate captures more data points per second, providing a more accurate and detailed representation of the original analog sound, which improves audio quality.Submit 4. If a sound file has a sampling rate of 44.1 kHz, what does this mean?The sound is sampled 44,100 times per second.The sound has a frequency of 44,100 Hz.The sound file can be played at a maximum of 44,100 Hz.The sound file's resolution is 44.1 kHz.A sampling rate of 44.1 kHz means that the sound wave is sampled 44,100 times per second, capturing the amplitude at those intervals.Submit 5. What does a sample resolution of 16 bits mean in digital sound?The sound can represent 65,536 different amplitude levels.The sound has a frequency of 16 Hz.The sound is sampled 16 times per second.The sound file has a maximum length of 16 minutes.A sample resolution of 16 bits means that each sample can represent one of 65,536 (2^16) different amplitude levels, affecting the dynamic range and accuracy of the digital sound.Submit 6. How does increasing the sampling rate affect the file size of a digital sound file?Increasing the sampling rate decreases the file size.Increasing the sampling rate increases the file size because more samples are taken per second.The sampling rate has no effect on file size.The file size remains constant regardless of the sampling rate.Higher sampling rates increase the file size because more data points (samples) are recorded per second, requiring more storage space.Submit 7. What does bit depth refer to in the context of sample resolution?The number of channels in an audio file.The number of bits used to represent each sample's amplitude.The duration of the audio file.The frequency range of the audio.Bit depth refers to the number of bits used to represent the amplitude of each sample in a digital audio file, affecting the audio's dynamic range.Submit 8. If a sound file has a sampling rate of 22 kHz and a sample resolution of 8 bits, calculate the file size for a 1-minute audio clip.1.32 MB1.056 MB660 KB528 KBFile size = Sampling Rate x Sample Resolution x Number of Channels x Duration. For a 1-minute audio clip, the calculation is 22,000 samples/sec x 8 bits/sample x 60 sec = 10,560,000 bits or 1,320,000 bytes (1.32 MB). Since the answer depends on the channel (assume mono), correct size here is 660 KB.Submit 9. How does a higher bit depth impact the quality of digital audio?It reduces the quality by introducing more noise.It allows for a greater range of sound levels, improving the audio's dynamic range.It decreases the file size.It has no effect on the quality of the audio.Higher bit depth provides more precision in representing the amplitude of each sample, resulting in a greater dynamic range and improved audio quality.Submit 10. If you have two sound files with the same duration but different sampling rates, how would their file sizes compare?The file with the lower sampling rate would be larger.The file with the higher sampling rate would be larger because more data is captured per second.Both files would be the same size.Sampling rate does not affect the file size.The file with the higher sampling rate would be larger because it captures more samples per second, increasing the amount of data and therefore the file size.Submit"},{"location":"topics/data/09_compression.html","title":"Compression","text":""},{"location":"topics/data/09_compression.html#compression","title":"Compression","text":"<p>Objectives</p> <ul> <li>Explain what data compression is. </li> <li>Understand why data may be compressed and that there are different ways to compress data.</li> <li>Explain how data can be compressed using Huffman coding.</li> <li>Be able to interpret Huffman trees.</li> <li>Be able to calculate the number of bits required to store a piece of data compressed using Huffman coding.</li> <li>Be able to calculate the number of bits required to store a piece of uncompressed data in ASCII.</li> <li>Explain how data can be compressed using Run length Encoding (RLE).</li> <li>Represent data in RLE frequency/data pairs.</li> </ul> <p>Both image files and sound files can get large very quickly.  To reduce the size of these files they have to be compressed i.e. made smaller to use less bits and take up less space on a storage device or reduce network transmission times.  Text files can also, and will be, compressed.  There are two main approaches:</p> <ul> <li>lossy compression</li> <li>lossless compression</li> </ul> <p>Within each method there are a host of different algorithms that can be employed.  Some of these can get very complicated and are out of scope but we can look at the principles behind these approaches to explore the differences and determine their key characteristics.  Fundamentally the main question to ask is: \"Does the compression technique applied preserve the data in the image file or the sound file, or is some of the data lost?\".</p>"},{"location":"topics/data/09_compression.html#lossy-compression","title":"Lossy Compression","text":"<p>Unlike lossless compression, lossy compression will reduce the file size by removing data which means when reproduced it will not be (and can never be) the same as the original.</p> <p>Note</p> <p>Data compressed using a lossy algorithm can never be restored back to the original</p> <p>Again the algorithms used are complex and out of scope here.  We know, in theory, the size of an image file can be reduced by using less pixels or a smaller bit depth but this will impact significantly on the image.  The compression algorithms seek to use patterns in the image and reduce the space needed to represent that image, i.e. to lose detail, preferably detail our eyes are not aware of.</p> <p>This approach is most effective with image and audio files where our ears and eyes can tolerate some loss of perception.  The amount of compression applied can be adjusted where there is a trade off between higher accuracy for less effective compression.</p>"},{"location":"topics/data/09_compression.html#jpeg","title":"JPEG","text":"<p>For images the effects of the lossy compression algorithm may not be immediately noticeable, the detail may be subtle depending on the original image and the device being used to reproduce that image.</p> <p>JPEG images are a common form of lossy compressed images.  Compare the following two images, the one on the left is the original PNG (543Kb), the second a JPEG (108Kb).  It's difficult to tell the difference between the two but the second is significantly smaller than the first.</p> <p></p> <p>If we zoom in to the original (a portion of the man's white top), see how the adjacent pixels are very similar.  For the highlighted pixels an average value could be taken by noting the first and the last and then getting the computer to calculate the values in between rather than storing them explicitly.   Thus, in this run only 2 values need to be stored rather than 8 thus reducing the colour depth:</p> <p></p> <p>This process is known as linear interpolation.</p>"},{"location":"topics/data/09_compression.html#mp3","title":"MP3","text":"<p>The MP3 format for audio has had a huge impact on how we collect, listen and distribute sound files.  MP3 is a lossy compression algorithm applied to audio files, it is not the same quality as the original as data has been lost but depending on our ears and the quality of the devices we're using to play the sound files it is a very good compromise.</p> <p>MP3 aims to compress the original audio by a factor of between 10 and 14 without noticeably affecting the overall quality (i.e. it remains recognisable).  The MP3 algorithm relies on a number of factors:</p> <ul> <li>there are certain sounds the ear cannot pick up i.e. very high frequencies</li> <li>there are certain sounds we hear better than others and - when two sounds are played at the same time, the quieter one may be not heard, this is known as psycho-acoustics</li> <li>plus ... some complicated mathematical algorithms[^1]</li> </ul> <p>This way some sounds can be removed without significantly altering the sound for the listener.  This will be subjective of course, and dependent on the equipment being used to reproduce the sound.</p> <p>When converting an audio file to an MP3 the user can change the bit rate being used which is the number of bits per second encoded in the file.  The higher the bit rate, the less data will be removed and the higher the quality of the result, though the file size will also be larger.</p> <p>As with other forms of loss compression, once the file has been compressed it cannot be reversed.  You can convert a .WAV file to .MP3 but you cannot go from .MP3 back to .WAV.</p> <p>Note</p> <p>To get more detail on audio compression (beyond what is required for either GCSE or A Level Computer Science) read the brilliant article here</p>"},{"location":"topics/data/09_compression.html#lossless-compression","title":"Lossless compression","text":"<p>Lossless compression preserves the original data and rearranges them, packing them into a smaller amount of space.  As the name suggest, no data is lost in this process so the original file (the image, audio or text file) can be reproduced exactly.  That is, lossless compression is reversible.  This is clearly important when compressing database records, spreadsheets or word processing files where exact replication of the original is a must.</p> <p>Two methods illustrate this process:</p> <ul> <li>Run Length encoding</li> <li>Huffman Encoding</li> </ul>"},{"location":"topics/data/09_compression.html#run-length-encoding","title":"Run Length Encoding","text":"<p>Run Length Encoding (RLE) takes the original file and analyses it for repeated patterns or 'runs' and encodes them into smaller bytes.  To illustrate, lets take, perhaps artificially, a sequence of characters:</p> <ul> <li>\"AAAAAAAAA\":  This string would require 9 bytes, but it could be encoded as <code>9A</code> which only requires 2 bytes</li> <li>\"AAAAAbbb44444444z00000000\":  This string would require 25 bytes but the patterns could be extracted and encoded as <code>5A3b841z80</code></li> </ul> <p>Note the <code>z</code> in the string above, this has now doubled the amount of storage required.  It's not impacted on the overall saving achieved but data where there is little or no repetition will not gain using RLE.</p> <p>The same approach can be taken with binary data where repetitions of <code>0</code>s and <code>1</code>s is more common, e.g. take the following string of bits:</p> <ul> <li><code>0000000111111111111000011111</code></li> <li>that is, 7:0 12:1 4:0 5:1 </li> <li>thus: <code>0111 1100 0100 0101</code> (with spaces inserted for readability)</li> <li>this has saved 12 bits</li> </ul> <p>Before adopting this approach we'd need to consider how many bits to use for the stock numbers (here 4 is used) and what if the run found exceeds that.</p> <p>The same method can be applied to images where runs of the same colour can be encoded, for example this following simple monochrome image:</p> <p></p> <p>This can be represented as a series of 0s and 1s:</p> <p></p> <p>or:</p> <ul> <li><code>23W4B6W1B2W1B6W4B9W1B9W1B6W4B23W</code></li> </ul> <p>Here, the original 100 bytes are reduced to 32</p> <p>Of course, this is an abstraction and the data will be stored as binary.  For this monochrome image the bit depth is 1 and thus row 3 of the image consists of 3 0s, 4 1s, 3 0s so we only need to store 343 or in binary <code>0 0011 1 0100 0 0011</code> which is only 15 bits (spaces inserted for readability)!  Again consideration needs to be given for the number of bits used for the colour code and the number of repetitions.</p> <p>Note</p> <p>In a digital photograph it is unlikely to find such runs of repeated colour information so this approach is better suited to cartoons or icons.  Typical lossless compression files for images include: .BMP and .PNG</p>"},{"location":"topics/data/09_compression.html#lossless-audio-compression","title":"Lossless audio compression","text":"<p>Music files rarely carry a lot of repetitive information so a different approach has to be taken.  Instead of using repetition these algorithms attempt to predict the value of the succeeding sample based on what has preceded it.  Two examples are FLAC and ALAC.  The algorithms used here are complex and out of scope but FLAC claims to reduce the original audio by some 40% and is able to reproduce the original audio with no perceivable loss of quality.</p> <p>Note</p> <p>If the original file has little repetitive binary data then compression can actually make the file larger.</p>"},{"location":"topics/data/09_compression.html#huffman-encoding","title":"Huffman Encoding","text":"<p>Huffman encoding is a lossless data compression technique. In lossless compression, the original data can be perfectly reconstructed from the compressed data without any loss of information. Huffman coding achieves this by assigning variable-length codes to symbols based on their frequencies in the input data.</p> <p>The key idea behind Huffman coding is to use shorter codes for more frequently occurring symbols and longer codes for less frequently occurring symbols. This way, common patterns in the data are represented with fewer bits, leading to overall compression without losing any information during the encoding and decoding processes.</p> <p>An example will help.  Let's see how to encode the word \"BEETROOT\" using this technique.</p> <p>1. Create the frequency table</p> Character Frequency B 1 E 2 T 2 R 1 O 2 <p>The next step is to assign a binary code to each letter.  Naively we might try the following:</p> Character Code B 1 E 01 T 11 R 100 O 101 <p>The problem with this occurs when these are put together to form a longer bit pattern as it creates ambiguity, for example:</p> <ul> <li><code>101</code> could be 'O', but it could also be 'BE'</li> </ul> <p>Therefore we need to get clever, and this is where the Huffman algorithm comes into play.</p> <p>2. Order the frequency table</p> <p>Reorder the frequency table with the least occurring characters at the top, we need to start with these.</p> Character Frequency B 1 R 1 E 2 T 2 O 2 <p>3. Build a binary tree</p> <p>A binary tree is a data structure that consists of nodes that are connected by edges,  each node has at most two child nodes connected to it, known as the left child and the right child.  We call the node that has connections a parent node.  The node at the top of the tree is known as the root node.</p> <p>For the tree create a node for each element in the frequency table: </p> <p></p> <ul> <li>Take the two nodes with the lowest frequencies out of the tree, join them together to make a new node. The label for this new node is the combined frequency of these.</li> <li>Place this new node back, ensuring the list of nodes is still in ascending order of frequency (lowest to highest).</li> <li>Repeat until there is only one node left.</li> </ul> <p>So, start with the two least occurring elements, 'B' and 'R'. Create a new node that sums their frequency and place this back into the tree:</p> <p></p> <p>Take the next two nodes in the new list, 'BR' and 'E. Create a new parent node with the sum of their frequencies and add this new node to the original list, preserving the order:</p> <p></p> <p>Repeat this process until there are no more nodes to process:</p> <p></p> <p>Once the final tree has been created we assign either a '0' or a '1' to each of the edges, the upper edges are labelled with a '1', the lower edges withe '0':</p> <p></p> <p>Note</p> <p>The root node should have a value equal to the total number of characters in the original text.</p> <p>4. Encode the characters</p> <p>To read the encoding for each of the characters start with the root node and follow the path to the target picking up either a '0' or a '1' as indicated by the label on those paths.  Thus:</p> <ul> <li>'B' -&gt; 0011</li> <li>'R' -&gt; 0010</li> <li>'E' -&gt; 000</li> <li>'T' -&gt; 1</li> <li>'O' -&gt; 01</li> </ul> <p>The final encoding for 'BEETROOT' would therefore be: 0011 000 000 1 0010 01 01 1 (spaces inserted to aid readability).  The original 8-character string would take 8 bytes (64 bits), our new encoded version takes 20 bits.</p> <p>The table of encodings would also be required so space is needed for this.  For this single word we'd not save a great deal but for larger text, whole books, the saving would be beneficial using this technique.</p>"},{"location":"topics/data/09_compression.html#lossless-compression-with-python","title":"Lossless Compression with Python","text":"<p>Here we'll look at how we can implement a simple Run Length Encoding (RLE) algorithm using Python and a full program for implementing Huffman encoding.</p>"},{"location":"topics/data/09_compression.html#run-length-encoding_1","title":"Run Length Encoding","text":"<p>Consider first the steps needed for a function that will take as an argument the string to be compressed::</p> <pre><code>Initialise an empty string to store the compressed result\nIterate through the input string\n    Initialize a count for consecutive characters\n    Get the current character\n    While there are consecutive characters:\n        Increase count\n        Move to the next character\n    Append the character and the count to the output string\n    Move to the next character\nreturn the compressed string\n</code></pre> <p>This can be implemented as:</p> <pre><code>def Compress(str):\n    result = \"\"\n    i = 0\n\n    while i &lt; len(str):\n        count = 1\n        ch = str[i]\n        while i + 1 &lt; len(str) and str[i] == str[i + 1]:\n            count += 1\n            i += 1\n        result += f\"{ch}{count} \"\n        i += 1\n    return result\n</code></pre> <p>Use this function in a program that asks for a phrase from the user and then returns the compressed form.</p> <p>See: rle.py</p>"},{"location":"topics/data/09_compression.html#huffman-encoding_1","title":"Huffman encoding","text":"<p>To implement the Huffman encoding algorithm requires structures and concepts for Python that are outside the scope of the GCSE so a full program is provided for download to try:  Huffman Encoding.</p>"},{"location":"topics/data/09_compression.html#questions","title":"Questions","text":"1. What is data compression, and why is it important in computer science?Data compression increases the size of files for easier storage.Data compression reduces the size of files to save storage space and improve transmission speed.Data compression removes unnecessary data permanently.Data compression duplicates files to ensure data integrity.Data compression reduces the size of files, which saves storage space and improves the efficiency of data transmission over networks.Submit 2. Which of the following is NOT a reason why data compression is used in computing?To save storage space on devices.To increase the speed of data transmission.To improve the accuracy of data processing.To reduce the cost of data storage and transmission.Data compression does not improve the accuracy of data processing; it primarily reduces file size for storage and transmission efficiency.Submit 3. How does Huffman coding compress data?By assigning fixed-length codes to symbols based on their frequency.By assigning variable-length codes to symbols, with shorter codes for more frequent symbols.By replacing repeated sequences with shorter codes.By adding redundant data to increase compression.Huffman coding assigns variable-length codes to symbols, with more frequent symbols receiving shorter codes, which reduces the overall size of the data.Submit 4. Given a simple Huffman tree, how can you interpret it to obtain the binary codes for each symbol?By counting the number of leaves in the tree.By tracing the path from the root to each symbol, assigning '0' for left branches and '1' for right branches.By summing the frequencies of all symbols.By finding the height of the tree.To obtain the binary codes, trace the path from the root to each symbol in the Huffman tree, assigning '0' for left branches and '1' for right branches.Submit 5. If the symbol 'A' has a frequency of 5 and its Huffman code has a length of 3 bits, how many total bits are required to store 'A' in compressed form?3 bits5 bits8 bits15 bitsIf 'A' appears 5 times and each occurrence requires 3 bits, the total number of bits needed is 5 * 3 = 15 bits.Submit 6. How does Huffman coding compare to ASCII encoding in terms of the number of bits required to store a character like 'X'?Huffman coding always requires more bits than ASCII.ASCII encoding requires fewer bits because it uses a fixed 7 or 8-bit length.Huffman coding typically requires fewer bits because it uses variable-length codes based on frequency.Both Huffman coding and ASCII encoding require the same number of bits.Huffman coding is generally more efficient than ASCII because it uses shorter codes for more frequent characters, unlike ASCII's fixed-length codes.Submit 7. Which statement best describes how Run Length Encoding (RLE) works?RLE compresses data by removing all vowels.RLE compresses data by representing repeated sequences of the same value with a count and a single instance of the value.RLE adds extra data to increase redundancy.RLE assigns variable-length codes based on symbol frequency.RLE compresses data by representing sequences of repeated values with a single value followed by the count of repetitions.Submit 8. How would the input data 'AAABBBCCCDDDD' be represented using Run Length Encoding (RLE)?A1B1C1D13A3B3C4DABCDAABBCCDD12ABCDIn RLE, the data 'AAABBBCCCDDDD' would be compressed as '3A3B3C4D', where the number represents the count of each character.Submit 9. Which of the following is a key difference between Huffman coding and Run Length Encoding (RLE)?Huffman coding uses fixed-length codes, while RLE uses variable-length codes.Huffman coding is typically used for text compression, while RLE is often used for compressing data with lots of repeated sequences.RLE requires more computational power than Huffman coding.Huffman coding increases file size, while RLE decreases it.Huffman coding is often used for text and binary data compression, while RLE is more effective for data with many repeated sequences, like images.Submit 10. In which scenario would Huffman coding be preferred over Run Length Encoding (RLE)?Compressing an image with large areas of solid color.Compressing text data where some characters occur much more frequently than others.Compressing a video file.Compressing a sound file with lots of silence.Huffman coding is more efficient for text data with varying character frequencies, as it assigns shorter codes to more frequent characters, unlike RLE, which is better for compressing repetitive data.Submit"},{"location":"topics/databases/index.html","title":"Databases","text":""},{"location":"topics/databases/index.html#databases","title":"Databases","text":"<p>Slide deck</p>"},{"location":"topics/databases/index.html#overview","title":"Overview","text":"<p>In this topic, we will explore the foundational concepts of relational databases and learn how to manage them using SQL (Structured Query Language). Relational databases are powerful systems used to store, organize, and retrieve large amounts of structured data. In particular, we will focus on how data is stored in tables, with each table consisting of rows (records) and columns (fields). Key concepts such as primary keys and foreign keys will be introduced to explain how tables are related to one another, allowing for more efficient and organized data management. This understanding is essential for working with real-world data in a structured, meaningful way.</p> <p>A major focus of the topic will be learning how to use SQL commands to interact with a relational database. We will practice </p> <ul> <li>retrieving data using commands like <code>SELECT</code>, <code>FROM</code>, and <code>WHERE</code>, which allow users to extract specific information from one or more tables. </li> <li>how to sort data using <code>ORDER BY</code>, </li> <li>insert new records with <code>INSERT INTO</code>, and </li> <li>modify or delete existing records using <code>UPDATE</code> and <code>DELETE</code>. </li> </ul> <p>By mastering these commands, we will gain the ability to manipulate data stored in relational databases, which is a critical skill in many areas of computer science and data management.</p> <p>The final section will look at how to use Python with the sqlite3 database.</p> <p>This knowledge is important because relational databases and SQL are used in countless industries, from finance to healthcare to social media platforms. As data plays an increasingly important role in decision-making and technology development, having a strong foundation in database management will give us the tools to handle and analyze data efficiently. </p> <p>Whether working on a small project or managing large datasets in a professional environment, understanding how to use relational databases and SQL is a valuable, practical skill.</p>"},{"location":"topics/databases/01_relational_databases.html","title":"Relational Databases","text":""},{"location":"topics/databases/01_relational_databases.html#relational-databases","title":"Relational Databases","text":"<p>Objectives</p> <ul> <li>Explain the concept of a database.</li> <li>Explain the concept of a relational database.</li> <li>Understand key database concepts: tables, records, fields, data types, primary keys, and foreign keys.</li> <li>Understand how relational databases help eliminate data inconsistency and data redundancy.</li> </ul>"},{"location":"topics/databases/01_relational_databases.html#what-is-a-database","title":"What is a Database?","text":"<p>A database is an organized collection of data that allows for easy access, management, and updating of information. It can be thought of as a digital filing system where data is stored and can be retrieved when needed.</p> <p>For example: </p> <ul> <li>A school system might use a database to store student information (names, grades, contact details, etc.).</li> <li>Online stores like Amazon use databases to track product information, customer orders, and inventory.</li> </ul> <p>The key idea behind a database is they allow data to be stored systematically, making it easier to find specific information and perform tasks like searching, sorting, and filtering data.</p>"},{"location":"topics/databases/01_relational_databases.html#what-is-a-relational-database","title":"What is a Relational Database?","text":"<p>A relational database is a type of database that stores data in tables, where the data can be linked or related across different tables through common fields.</p> <p>Key Features:</p> <ul> <li>Tables: The main structure that holds data in rows (records) and columns (fields).</li> <li>Relationships: Tables are connected (related) using keys (Primary Key and Foreign Key).</li> </ul> <p>By analogy, imagine different folders (tables) in a filing cabinet, where each folder contains related information. A relational database lets you link these folders through a common identifier (like a student ID number). This way, you don\u2019t have to store duplicate information in each folder.</p> <p>For example:</p> <ul> <li>A school database could have one table for <code>Students</code> and another for <code>Classes</code>. The <code>Students</code> table would contain student details, and the <code>Classes</code> table would hold information about the subjects each student is enrolled in. The student ID could be used to link the two tables, creating a relationship between students and their classes.</li> </ul>"},{"location":"topics/databases/01_relational_databases.html#key-database-concepts","title":"Key Database Concepts","text":"<p>a) Table</p> <ul> <li> <p>Definition:   A table is a collection of data organized in rows and columns within a relational database.</p> </li> <li> <p>Example:   A table named <code>Students</code> might have columns like StudentID, Name, Age, and Address. Each row in the table represents one student.</p> </li> </ul> <p>b) Record (Row)</p> <ul> <li> <p>Definition:   A record is a single, complete set of information in a table. Each row in the table is a record.</p> </li> <li> <p>Example:   In the <code>Students</code> table, a record would contain the details of one student, such as \"John Doe, Age 16, Address: 123 Street.\"</p> </li> </ul> <p>c) Field (Column)</p> <ul> <li> <p>Definition:   A field is a single piece of data, represented by a column in a table. It describes a specific attribute or characteristic of the data.</p> </li> <li> <p>Example:   In the <code>Students</code> table, fields might include Name, Age, and Address. Each of these is a field that holds specific data about the student.</p> </li> </ul> <p>d) Data Type</p> <ul> <li> <p>Definition:   Data types specify the kind of data that can be stored in a field. Different fields might store text, numbers, dates, etc.</p> </li> <li> <p>Common Data Types:</p> </li> <li>Text: Used for names, addresses, etc.</li> <li>Integer: Whole numbers, like age.</li> <li>Float/Decimal: Numbers with decimal points, such as a price or percentage.</li> <li> <p>Date/Time: Used for storing dates and times.</p> </li> <li> <p>Example:   The <code>Age</code> field would likely use the Integer data type, while the <code>Name</code> field would use the Text data type.</p> </li> </ul> <p>e) Primary Key</p> <ul> <li> <p>Definition:   A primary key is a unique identifier for each record in a table. It ensures that no two records are the same.</p> </li> <li> <p>Key Feature:   Every table must have one primary key to uniquely identify each record.</p> </li> <li> <p>Example:   In a <code>Students</code> table, the <code>StudentID</code> might be the primary key. Each student would have a unique StudentID.</p> </li> </ul> <p>f) Foreign Key</p> <ul> <li> <p>Definition:   A foreign key is a field in one table that links to the primary key in another table, creating a relationship between the two tables.</p> </li> <li> <p>Example:   In the <code>Classes</code> table, the <code>StudentID</code> could be a foreign key, linking it to the <code>Students</code> table so that we know which students are enrolled in each class.</p> </li> </ul>"},{"location":"topics/databases/01_relational_databases.html#eliminating-data-inconsistency-and-data-redundancy-in-relational-databases","title":"Eliminating Data Inconsistency and Data Redundancy in Relational Databases","text":"<p>a) Data Redundancy</p> <ul> <li> <p>Definition:   Data redundancy occurs when the same piece of data is stored in multiple places. This can lead to wasted storage space and make data harder to manage.</p> </li> <li> <p>Example of Redundancy:   Imagine storing a student\u2019s contact information in both the <code>Students</code> and <code>Classes</code> tables. If the contact details change, you\u2019d have to update them in multiple places, which could cause errors.</p> </li> </ul> <p>b) Data Inconsistency - Definition:   Data inconsistency arises when different copies of the same data do not match. This often happens as a result of data redundancy.</p> <ul> <li>Example of Inconsistency:   If a student\u2019s address changes but is updated in only one of the tables, the database will have conflicting information.</li> </ul> <p>c) How Relational Databases Eliminate Redundancy and Inconsistency</p> <ul> <li>By storing data in related tables, each piece of information is only stored once, reducing redundancy.</li> <li> <p>Example:   Instead of storing a student\u2019s address in both the <code>Students</code> table and the <code>Classes</code> table, it\u2019s stored only in the <code>Students</code> table. The <code>Classes</code> table only needs to store a foreign key (<code>StudentID</code>) to link the data.</p> </li> <li> <p>This makes updates easier and helps prevent inconsistencies.   If the student\u2019s address changes, you only need to update it in one place (the <code>Students</code> table), and the change is reflected wherever that student\u2019s data is used.</p> </li> </ul>"},{"location":"topics/databases/01_relational_databases.html#summary","title":"Summary","text":"<ul> <li>Databases store data in an organized way to make it easy to manage.</li> <li>Relational databases store data in tables that can be linked through relationships.</li> <li>Important concepts like tables, records, fields, primary keys, and foreign keys form the building blocks of relational databases.</li> <li>Relational databases eliminate redundancy (duplicate data) and prevent inconsistency (conflicting data).</li> </ul>"},{"location":"topics/databases/01_relational_databases.html#questions","title":"Questions","text":"<p>Problem showing the questions for topic: Relational Databases</p>"},{"location":"topics/databases/02_worked_example.html","title":"Worked Example","text":""},{"location":"topics/databases/02_worked_example.html#worked-example","title":"Worked Example","text":"<p>Objectives</p> <ul> <li>To develop understanding of a relational database</li> <li>Work through an example of creating a database from a flat-file representation</li> </ul> <p>In this worked example, we will take data currently stored in a flat-file system i.e. a spreadsheet and convert it into a relational database. The example will involve two tables: <code>Students</code> and <code>Classes</code>.</p>"},{"location":"topics/databases/02_worked_example.html#understanding-flat-file-systems-spreadsheet-example","title":"Understanding Flat-File Systems (Spreadsheet Example)","text":"<p>A flat-file system stores all data in a single table, such as a spreadsheet. All information is kept in rows and columns without relationships between separate pieces of data. Flat-file systems can lead to redundancy (duplicate data) and inconsistency (conflicting data).</p> <p>Example Scenario: </p> <p>Consider a simple school system stored in a spreadsheet where data about students and their enrolled classes are stored in one large table.</p> <p>Flat-file Spreadsheet Example:</p> StudentID Student Name Age ClassID Class Name Teacher Room Number 1 John Doe 16 C001 Maths Mr. Smith 101 1 John Doe 16 C002 Science Mrs. Johnson 102 2 Jane Roe 15 C001 Maths Mr. Smith 101 2 Jane Roe 15 C003 History Mr. Brown 201 3 Sam White 16 C002 Science Mrs. Johnson 102"},{"location":"topics/databases/02_worked_example.html#problems-with-flat-file-systems","title":"Problems with Flat-File Systems","text":"<p>In the above example, student details like <code>Student Name</code> and <code>Age</code> are repeated for every class a student is enrolled in.</p> <p>Information about the class, such as <code>Teacher</code> and <code>Room Number</code>, is also repeated for each student in the class.</p> <p>Thus, there is redundant data:</p> <ul> <li>John Doe's information (Name: \"John Doe\", Age: 16) is duplicated in both the Maths and Science classes.</li> <li>The details about the Maths class (<code>Class Name: Maths, Teacher: Mr. Smith, Room: 101</code>) are repeated for each student taking that class.</li> </ul> <p>This redundancy can lead to problems:</p> <ul> <li> <p>If John Doe\u2019s age changes or if a teacher is reassigned, it must be updated in every occurrence in the spreadsheet. Missing updates may lead to conflicting or incorrect data.</p> </li> <li> <p>If John Doe\u2019s age is updated in one row but not in the others, the system will have conflicting records of his age.</p> </li> </ul> <p>When you have this problem is is known as data inconsistency, you don;t know which version of the data is actually correct and can be relied upon.</p> <p>Limited Scalability and Poor Data Management: </p> <p>Also, as the number of students and classes grows, managing the spreadsheet becomes more difficult and error-prone.  The errors can become compounded until it is just to difficult to work with.</p>"},{"location":"topics/databases/02_worked_example.html#converting-the-flat-file-into-a-relational-database","title":"Converting the Flat-File into a Relational Database","text":"<p>To solve these problems, we can split the single flat-file into two related tables:  </p> <ol> <li>Students: Contains information about the students.</li> <li>Classes: Contains information about the classes.</li> </ol> <p>We extract just the Student data first and create a students table pulling across the columns for:</p> <ul> <li>StudentID</li> <li>Student Name</li> <li>Age</li> </ul> <p>** <code>Student</code> table</p> StudentID (Primary Key) Student Name Age 1 John Doe 16 2 Jane Roe 15 3 Sam White 16 <p>We only need one record, or row, for each student in the system.  There are three columns, we call the columns attributes or fields.</p> <p>The StudentId field uniquely identifies each student.  Wwe may have another student also called \"Sam White\".  If so, that student would need their own own in our table and be given a different student id to distinguish them from the other Sam White. No two students can have the same primary key.</p> <p>This attribute is really important in relational databases, and is known as the primary key.</p> <p>We do the same thing for the teachers and classes data as well pulling across the columns for:</p> <ul> <li>ClassID</li> <li>Class Name</li> <li>Teacher</li> <li>Room Number</li> </ul> <p><code>Class</code> Table:</p> ClassID (Primary Key) Class Name Teacher Room Number C001 Maths Mr. Smith 101 C002 Science Mrs. Johnson 102 C003 History Mr. Brown 201 <p>Again, each class is given a unique identifier for each row in the table, the primary key which is the ClassId in this example.</p> <p>Note</p> <p>The tables are named in their singular form i.e. <code>Student</code> and <code>Class</code> rather than <code>Students</code> and <code>Classes</code>.  This is good practice.</p>"},{"location":"topics/databases/02_worked_example.html#creating-the-relationship","title":"Creating the relationship","text":"<p>However, we have now lost the connection between these two items of data.  We no longer know which student is in which class!  This needs to be corrected and is one of the most challenging aspects of designing the relational database structure.</p>"},{"location":"topics/databases/02_worked_example.html#degrees-of-relationship","title":"Degrees of relationship","text":"<p>Firstly, there are three degrees of relationship:</p> <ul> <li>One-to-One</li> <li>One-to-Many</li> <li>Many-to-Many</li> </ul> <p>To work out the degree of relationship between these two tables we need to ask ourselves two questions, each from the perspective of each table.  Each question begins with the word \"One\".  The answer to the question will either be \"One\" or \"Many\".</p> <p>Thus:</p> <ul> <li>One student is enrolled in how many classes?</li> <li>One class has how many students enrolled?</li> </ul> <p>From our flat file system we can see the answer in both cases will be \"Many\".  Therefore, we have a Many-to-Many relationship.</p> <p>To represent the Many-to-Many relationship between students and the classes they are enrolled in, we need an additional table called a linking table (or junction table). This will record which students are enrolled in which classes.</p> <p><code>Enrollment</code> Table (Linking Table):</p> StudentID (Foreign Key) ClassID (Foreign Key) 1 C001 1 C002 2 C001 2 C003 3 C002 <p>Thus, from our initial flat file system we have ended up with 3 tables:</p> <ul> <li>Student</li> <li>Class</li> <li>Enrollment</li> </ul> <p>Foreign Keys: </p> <p>The <code>StudentID</code> and <code>ClassID</code> fields in the enrollment table are known as foreign keys. They refer to the primary keys in the <code>Students</code> and <code>Classes</code> tables, respectively, establishing a relationship between the tables.</p>"},{"location":"topics/databases/02_worked_example.html#other-relationships","title":"Other relationships","text":"<p>We could develop our system further and look at the relationship between a teacher and a subject.  It may be a requirement of the system that one teacher only teachers one subject.  The questions we would ask, therefore, would be:</p> <ul> <li>One teacher teaches how many subjects?</li> <li>One subject is taught by how many teachers?</li> </ul> <p>Here are answers would be \"One\" and \"Many\".  Therefore, we would establish a One-to-Many relationship between the teacher and the subject.</p> <p>Thus, we would create a table for Subject</p> SubjectId Subject 1 Maths 2 Science 3 History <p>To maintain the relationship between the teacher and the subject, e would import the primary key from the Subject table as a foreign key in the teacher table:</p> TeacherID Name SubjectID 1 Mr Smith 1 2 Mrs Johnson 2 3 Mr Brown 3 <p>Note</p> <p>One-to-one relationships do occur, though they are rare, and when they happen they are usually included as an attribute in the main table</p>"},{"location":"topics/databases/02_worked_example.html#data-types","title":"Data types","text":"<p>Each item of data will be a given data type.  This should be familiar room the programming topic though unlike Python the database management system being used to hold the database will require the data type to be defined.</p> <p>In our example:</p> <ul> <li>The StudentId will be a positive whole number, i.e. an integer</li> <li>The Teacher Name will be characters, i.e. a string</li> <li>etc..</li> </ul>"},{"location":"topics/databases/02_worked_example.html#how-the-relational-database-solves-problems","title":"How the Relational Database Solves Problems","text":"<p>a) Elimination of Data Redundancy</p> <ul> <li>By separating the student and class data into two tables, information about students and classes is stored only once.</li> <li>Example: John Doe\u2019s details are only stored once in the <code>Student</code> table, and the <code>Maths</code> class details are only stored once in the <code>Class</code> table. There is no need for repetition.</li> </ul> <p>b) Prevention of Data Inconsistency</p> <ul> <li>Updating data is easier and more reliable. If John Doe\u2019s age changes, you only need to update his record in the <code>Student</code> table. This change will automatically apply to every class he is enrolled in through the <code>Enrollment</code> table.</li> <li>Similarly, if a teacher is reassigned or a class room number changes, the update only needs to be made in the <code>Class</code> table.</li> </ul> <p>c) Scalability and Efficient Data Management</p> <ul> <li>Adding new students or classes is straightforward. You can simply add new records to the <code>Student</code> or <code>Class</code> tables and link them in the <code>Enrollment</code> table.</li> <li>Searching, filtering, and updating data across a relational database is much easier compared to a flat-file system, especially when handling large amounts of data.</li> </ul>"},{"location":"topics/databases/02_worked_example.html#database-terminology","title":"Database Terminology","text":"<p>A summary table of some of these key terms:</p> Term Definition Table A collection of records, each with the same structure (a collection of columns) Record A group of related fields, representing one data entry (a row) Field A single item of data in a record, also known as an attribute (a column) Data type The type of data being held ina field e.g. string, integer etc Primary Key A unique identifier for each record/row in the table Foreign Key A field in a table that references a primary key in another table.  Used to link tables together and create a relationship between those tables"},{"location":"topics/databases/02_worked_example.html#summary","title":"Summary","text":"<ol> <li> <p>Data Redundancy is Reduced:    Information is only stored once in its appropriate table. Relationships between the tables link data together.</p> </li> <li> <p>Data Inconsistency is Prevented:    Data updates are made in one place, ensuring there are no conflicting versions of the same data.</p> </li> <li> <p>Efficient Data Management and Scalability:    Relational databases are easy to scale. Adding, removing, or updating data does not create excessive duplication or management issues.</p> </li> </ol>"},{"location":"topics/databases/02_worked_example.html#questions","title":"Questions","text":"1. What is a flat-file system?A system that stores data in multiple tables with relationships between them.A system that stores data in a single table without relationships between the data.A system that allows only flat, non-structured data to be stored.A database where all data must be text or string-based.A flat-file system stores data in a single table, such as a spreadsheet, with no relationships between the data.Submit 2. What is a key issue with flat-file systems?They are too complex for small datasets.They enforce data relationships too rigidly.They can cause data redundancy and inconsistency.They are difficult to search and sort.Flat-file systems can lead to data redundancy and inconsistency due to duplicated data across entries.Submit 3. In a relational database, what term is used for the unique identifier in a table?Primary KeyForeign KeyFieldData TypeA Primary Key uniquely identifies each record in a table.Submit 4. What is the purpose of a Foreign Key in a relational database?It is a backup copy of the Primary Key.It allows a relationship to be created between two tables.It stores redundant data for security purposes.It marks a row that should not be duplicated.A Foreign Key is used to link one table to another by referencing the Primary Key of another table.Submit 5. What problem is solved by splitting data into related tables in a relational database?It simplifies the structure of the database.It eliminates the need for data validation.It reduces redundancy and inconsistency.It allows data to be duplicated for easier access.By splitting data into related tables, redundancy is reduced and consistency is maintained by having data only in one place.Submit 6. In a Many-to-Many relationship, which additional table is needed to link two tables together?Student tablePrimary Key tableLinking table (or Junction table)Teacher tableA Linking or Junction table is needed to represent a Many-to-Many relationship between two tables.Submit 7. How does a relational database help prevent data inconsistency?It requires redundant data to be updated manually.It allows for the same data to be stored in multiple places for convenience.It stores each piece of data only once, so updates are reflected consistently across the system.It uses flat-file systems to prevent inconsistency.Data is stored only once in a relational database, and relationships ensure updates are consistent.Submit 8. Which of the following is an example of a One-to-Many relationship?One teacher teaches many students.One student takes one class.One teacher teaches one class.One student takes many subjects.A One-to-Many relationship means one entity is related to multiple instances of another, like one teacher teaching many students.Submit 9. In a relational database, what does the term 'scalability' refer to?The ability to increase the size and complexity of the database without affecting performance.The speed at which the database can be backed up.The ease of retrieving data from a flat-file system.The duplication of data for easier access.Scalability refers to the ability to grow the database in size and complexity while maintaining performance and manageability.Submit 10. What type of data type would most likely be used for the 'Age' field in the Student table?StringDate/TimeIntegerFloatThe 'Age' field would use an Integer data type as it holds whole numbers.Submit"},{"location":"topics/databases/03_sql.html","title":"SQL","text":""},{"location":"topics/databases/03_sql.html#sql","title":"SQL","text":"<p>Objectives</p> <ul> <li>learn how to use <code>SELECT</code>, <code>FROM</code>, and <code>WHERE</code> to retrieve and filter data from a relational database.</li> <li>apply the <code>ORDER BY</code> clause to sort results in ascending (<code>ASC</code>) or descending (<code>DESC</code>) order based on specified columns.</li> <li>gain an understanding of how to use SQL to query data from more than one table using joins or table references.</li> <li>use the <code>INSERT INTO</code> command to add new data into specific tables of a relational database.</li> <li>use the <code>UPDATE</code> and <code>DELETE</code> commands to modify or remove records based on specified conditions within the database.</li> </ul> <p>SQL (Structured Query Language) is a programming language used to manage and interact with relational databases. You will primarily use it to retrieve, insert, update, and delete data. Here\u2019s a breakdown of key SQL commands that you need to know:</p>"},{"location":"topics/databases/03_sql.html#the-select-statement","title":"The SELECT Statement","text":"<p>The <code>SELECT</code> statement is used to retrieve data from a database.</p> <p>Basic Syntax: </p><pre><code>SELECT column1, column2, ... \nFROM table_name;\n</code></pre> <ul> <li>SELECT: Specifies the columns you want to retrieve.</li> <li>FROM: Indicates the table from which to fetch the data.</li> </ul> <p>Example: </p><pre><code>SELECT StudentName, Age \nFROM Students;\n</code></pre> This retrieves the <code>StudentName</code> and <code>Age</code> columns from the <code>Students</code> table."},{"location":"topics/databases/03_sql.html#using-where-to-filter-data","title":"Using WHERE to Filter Data","text":"<p>The <code>WHERE</code> clause is used to filter records based on a condition.</p> <p>Basic Syntax: </p><pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n</code></pre> <ul> <li>WHERE: Specifies the condition that must be met for a record to be included in the results.</li> </ul> <p>Example: </p><pre><code>SELECT StudentName, Age \nFROM Students\nWHERE Age &gt; 15;\n</code></pre> This retrieves the <code>StudentName</code> and <code>Age</code> of students who are older than 15."},{"location":"topics/databases/03_sql.html#sorting-results-with-order-by","title":"Sorting Results with ORDER BY","text":"<p>The <code>ORDER BY</code> clause is used to sort the result set in ascending or descending order.</p> <p>Basic Syntax: </p><pre><code>SELECT column1, column2, ...\nFROM table_name\nORDER BY column1 [ASC | DESC];\n</code></pre> <ul> <li>ASC: Sorts the data in ascending order (default).</li> <li>DESC: Sorts the data in descending order.</li> </ul> <p>Example: </p><pre><code>SELECT StudentName, Age \nFROM Students\nORDER BY Age DESC;\n</code></pre> This retrieves the <code>StudentName</code> and <code>Age</code>, and sorts the result by <code>Age</code> in descending order (from oldest to youngest)."},{"location":"topics/databases/03_sql.html#using-sql-with-two-tables","title":"Using SQL with Two Tables","text":"<p>You can extract data from more than one table by using <code>JOIN</code> or simply referencing multiple tables.</p> <p>Example with Two Tables: </p><pre><code>SELECT Students.StudentName, Classes.ClassName \nFROM Students, Enrollment, Classes\nWHERE Students.StudentID = Enrollment.StudentID \nAND Classes.ClassID = Enrollment.ClassID;\n</code></pre> This retrieves the <code>StudentName</code> and <code>ClassName</code> by combining the <code>Students</code>, <code>Enrollment</code>, and <code>Classes</code> tables using relationships between the tables."},{"location":"topics/databases/03_sql.html#inserting-data-into-a-relational-database","title":"Inserting Data into a Relational Database","text":"<p>You can add new records to a table using the <code>INSERT INTO</code> statement.</p> <p>Basic Syntax: </p><pre><code>INSERT INTO table_name (column1, column2, ...)\nVALUES (value1, value2, ...);\n</code></pre> <ul> <li>INSERT INTO: Specifies the table into which the data will be inserted.</li> <li>VALUES: Provides the actual data for the columns.</li> </ul> <p>Example: </p><pre><code>INSERT INTO Students (StudentID, StudentName, Age)\nVALUES (4, 'Emily Green', 17);\n</code></pre> This inserts a new student record with ID <code>4</code>, name <code>Emily Green</code>, and age <code>17</code> into the <code>Students</code> table."},{"location":"topics/databases/03_sql.html#editing-and-deleting-data-in-a-database","title":"Editing and Deleting Data in a Database","text":"<p>You can modify or delete existing records in a database using the <code>UPDATE</code> and <code>DELETE</code> commands.</p>"},{"location":"topics/databases/03_sql.html#updating-data-with-the-update-statement","title":"Updating Data with the UPDATE Statement","text":"<p>The <code>UPDATE</code> statement is used to change existing data in a table.</p> <p>Basic Syntax: </p><pre><code>UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n</code></pre> <ul> <li>SET: Specifies the columns and their new values.</li> <li>WHERE: Defines the condition to specify which rows should be updated.</li> </ul> <p>Example: </p><pre><code>UPDATE Students\nSET Age = 18\nWHERE StudentName = 'John Doe';\n</code></pre> This updates the <code>Age</code> of the student named 'John Doe' to <code>18</code>."},{"location":"topics/databases/03_sql.html#deleting-data-with-the-delete-statement","title":"Deleting Data with the DELETE Statement","text":"<p>The <code>DELETE</code> statement is used to remove records from a table.</p> <p>Basic Syntax: </p><pre><code>DELETE FROM table_name\nWHERE condition;\n</code></pre> <ul> <li>DELETE FROM: Specifies the table from which to delete records.</li> <li>WHERE: Sets the condition that defines which rows to delete.</li> </ul> <p>Example: </p><pre><code>DELETE FROM Students\nWHERE StudentID = 4;\n</code></pre> This deletes the student with <code>StudentID</code> of <code>4</code> from the <code>Students</code> table."},{"location":"topics/databases/03_sql.html#summary-of-sql-commands","title":"Summary of SQL Commands","text":"Command Purpose Example <code>SELECT</code> Retrieve data from a table. <code>SELECT StudentName FROM Students;</code> <code>FROM</code> Specifies the table from which data is retrieved. <code>SELECT * FROM Students;</code> <code>WHERE</code> Filters records based on a condition. <code>SELECT * FROM Students WHERE Age = 16;</code> <code>ORDER BY</code> Sorts data in ascending or descending order. <code>SELECT * FROM Students ORDER BY Age DESC;</code> <code>INSERT INTO</code> Inserts new data into a table. <code>INSERT INTO Students (StudentID, StudentName, Age) VALUES (1, 'John Doe', 16);</code> <code>UPDATE</code> Updates existing data in a table. <code>UPDATE Students SET Age = 17 WHERE StudentID = 1;</code> <code>DELETE</code> Deletes data from a table. <code>DELETE FROM Students WHERE StudentID = 1;</code> <p>These commands allow you to manage and interact with a relational database effectively, handling everything from simple data retrieval to complex data manipulation.</p> <p>SQL Crib Sheet</p>"},{"location":"topics/databases/03_sql.html#questions","title":"Questions","text":"1. What is the purpose of the SQL <code>SELECT</code> statement?To insert new data into a table.To retrieve data from a table.To delete data from a table.To update data in a table.The <code>SELECT</code> statement is used to retrieve data from a table in a relational database.Submit 2. Which SQL clause is used to filter records based on a condition?ORDER BYFROMWHERESELECTThe <code>WHERE</code> clause is used to filter data based on a specified condition.Submit 3. How would you sort results in descending order by a column called 'Age'?ORDER BY Age ASC;ORDER BY Age;ORDER BY Age DESC;ORDER BY Age LIMIT 1;The <code>ORDER BY Age DESC</code> sorts the results in descending order by the 'Age' column.Submit 4. In the SQL statement <code>SELECT StudentName, Age FROM Students;</code>, what does the <code>FROM</code> clause do?It retrieves data from the database.It specifies the table from which to retrieve data.It filters the data.It updates the table with new data.The <code>FROM</code> clause specifies the table, in this case 'Students', from which to retrieve data.Submit 5. Which SQL command is used to insert new data into a table?SELECTINSERT INTOUPDATEDELETEThe <code>INSERT INTO</code> statement is used to add new records to a table.Submit 6. Which of the following statements will delete a record from the 'Students' table with StudentID = 4?DELETE FROM Students WHERE StudentID = 4;DROP Students WHERE StudentID = 4;REMOVE FROM Students WHERE StudentID = 4;TRUNCATE Students WHERE StudentID = 4;The <code>DELETE FROM</code> statement is used to remove records, and the condition filters the deletion to StudentID 4.Submit 7. What is the purpose of the <code>UPDATE</code> SQL statement?To retrieve data from the database.To delete records from a table.To update existing data in a table.To insert new data into a table.The <code>UPDATE</code> statement modifies existing records in a table based on a condition.Submit 8. Which SQL statement retrieves the names of students older than 15?SELECT StudentName FROM Students WHERE Age = 15;SELECT StudentName FROM Students WHERE Age &gt; 15;SELECT StudentName FROM Students WHERE Age &lt; 15;SELECT StudentName FROM Students ORDER BY Age DESC;The <code>WHERE</code> clause with <code>Age &gt; 15</code> filters the data to return only students older than 15.Submit 9. What is the purpose of a <code>JOIN</code> in SQL?To combine records from two or more tables.To insert data into multiple tables at once.To delete data from multiple tables.To update records across tables.A <code>JOIN</code> is used to combine rows from two or more tables based on a related column.Submit 10. Which SQL statement adds a new student with ID 4, name 'Emily Green', and age 17?INSERT INTO Students (StudentID, StudentName, Age) VALUES (4, 'Emily Green', 17);INSERT Student INTO Students (4, 'Emily Green', 17);ADD TO Students VALUES (4, 'Emily Green', 17);INSERT (4, 'Emily Green', 17) INTO Students;The correct syntax for inserting a new record uses <code>INSERT INTO</code> followed by the column names and <code>VALUES</code> for the data.Submit"},{"location":"topics/databases/04_python_sql.html","title":"Python and SQL","text":""},{"location":"topics/databases/04_python_sql.html#python-and-sql","title":"Python and SQL","text":"<p>Objectives</p> <ul> <li>Set up and interact with an SQLite3 database using Python</li> <li>Create tables (<code>Students</code> and <code>Classes</code>), insert data, and establish relationships.</li> <li>Query the database to retrieve, update, and manage data.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#sqlite3-and-python-tutorial-managing-students-and-classes","title":"SQLite3 and Python Tutorial: Managing Students and Classes","text":""},{"location":"topics/databases/04_python_sql.html#prerequisites","title":"Prerequisites:","text":"<p>To follow along with this tutorial the following software and knowledge will be needed:</p> <ul> <li>Install Python (version 3 or higher) on your system.</li> <li>Ensure you have the <code>sqlite3</code> library (it comes pre-installed with Python).</li> <li>Basic knowledge of Python syntax.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#part-1-setting-up-the-database","title":"Part 1: Setting Up the Database","text":""},{"location":"topics/databases/04_python_sql.html#step-1-importing-sqlite3-in-python","title":"Step 1: Importing SQLite3 in Python","text":"<pre><code>import sqlite3\n</code></pre> <ul> <li><code>import sqlite3</code> allows you to use the SQLite3 database engine in Python. SQLite3 is a lightweight, file-based database system, ideal for small projects.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#step-2-creating-a-connection-to-sqlite-database","title":"Step 2: Creating a Connection to SQLite Database","text":"<pre><code># Connect to (or create) a new database\nconn = sqlite3.connect('school.db')\n\n# Create a cursor object to interact with the database\ncursor = conn.cursor()\n</code></pre> <ul> <li><code>sqlite3.connect('school.db')</code> creates or connects to a database file called school.db. If the file doesn't exist, it will be created in the current directory.</li> <li><code>cursor = conn.cursor()</code> creates a cursor object, which is used to execute SQL commands and interact with the database.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#part-2-creating-tables-for-students-and-classes","title":"Part 2: Creating Tables for <code>Students</code> and <code>Classes</code>","text":""},{"location":"topics/databases/04_python_sql.html#step-3-creating-the-students-table","title":"Step 3: Creating the <code>Students</code> Table","text":"<pre><code># SQL command to create the Students table\ncreate_students_table = '''\nCREATE TABLE IF NOT EXISTS Student (\n    StudentID INTEGER PRIMARY KEY,\n    StudentName TEXT NOT NULL,\n    Age INTEGER\n);\n'''\n\n# Execute the SQL command\ncursor.execute(create_students_table)\n\n# Commit the changes\nconn.commit()\n</code></pre> <ul> <li><code>CREATE TABLE IF NOT EXISTS Student</code> creates a table called <code>Student</code> if it doesn't already exist. The table contains three columns or fields: <code>StudentID</code> (unique identifier), <code>StudentName</code>, and <code>Age</code>.</li> <li><code>PRIMARY KEY</code> defines <code>StudentID</code> as a unique identifier for each student.</li> <li>"},{"location":"topics/databases/04_python_sql.html#step-4-creating-the-class-table","title":"Step 4: Creating the <code>Class</code> Table","text":"<pre><code># SQL command to create the Classes table\ncreate_class_table = '''\nCREATE TABLE IF NOT EXISTS Class (\n    ClassID TEXT PRIMARY KEY,\n    ClassName TEXT NOT NULL,\n    Teacher TEXT,\n    RoomNumber TEXT\n);\n'''\n\n# Execute the SQL command\ncursor.execute(create_classes_table)\n\n# Commit the changes\nconn.commit()\n</code></pre> <ul> <li>This step creates a <code>Class</code> table with four columns: <code>ClassID</code> (unique identifier for the class), <code>ClassName</code>, <code>Teacher</code>, and <code>RoomNumber</code>.</li> </ul> <p>Warning</p> <p>The identifier for each field must be a whole word, no spaces.  Think of it like an identifier for a variable and follow the same rules.</p>"},{"location":"topics/databases/04_python_sql.html#step-5-creating-the-enrollment-table-linking-table","title":"Step 5: Creating the <code>Enrollment</code> Table (Linking Table)","text":"<pre><code># SQL command to create the Enrollment table (links Students and Classes)\ncreate_enrollment_table = '''\nCREATE TABLE IF NOT EXISTS Enrollment (\n    StudentID INTEGER,\n    ClassID TEXT,\n    FOREIGN KEY (StudentID) REFERENCES Student(StudentID),\n    FOREIGN KEY (ClassID) REFERENCES Class(ClassID)\n);\n'''\n\n# Execute the SQL command\ncursor.execute(create_enrollment_table)\n\n# Commit the changes\nconn.commit()\n</code></pre> <ul> <li>This table links the Student and Class tables. </li> <li><code>FOREIGN KEY</code> is used to establish relationships between <code>StudentID</code> in the <code>Enrollment</code> table and <code>StudentID</code> in the <code>Student</code> table, and between <code>ClassID</code> in <code>Enrollment</code> and <code>ClassID</code> in the <code>Class</code> table. This allows us to relate students to their classes.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#part-3-inserting-data-into-the-tables","title":"Part 3: Inserting Data into the Tables","text":""},{"location":"topics/databases/04_python_sql.html#step-6-inserting-data-into-the-students-table","title":"Step 6: Inserting Data into the <code>Students</code> Table","text":"<pre><code># Insert sample students into the Students table\nstudents = [\n    (1, 'John Doe', 16),\n    (2, 'Jane Roe', 15),\n    (3, 'Sam White', 16)\n]\n\ncursor.executemany('INSERT INTO Students (StudentID, StudentName, Age) VALUES (?, ?, ?)', students)\nconn.commit()\n</code></pre> <ul> <li><code>cursor.executemany()</code> is used to insert multiple rows into the Student table. Each tuple in the students list contains values for <code>StudentID</code>, <code>StudentName</code>, and <code>Age</code>.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#step-7-inserting-data-into-the-classes-table","title":"Step 7: Inserting Data into the <code>Classes</code> Table","text":"<pre><code># Insert sample classes into the Classes table\nclasses = [\n    ('C001', 'Maths', 'Mr. Smith', '101'),\n    ('C002', 'Science', 'Mrs. Johnson', '102'),\n    ('C003', 'History', 'Mr. Brown', '201')\n]\n\ncursor.executemany('INSERT INTO Classes (ClassID, ClassName, Teacher, RoomNumber) VALUES (?, ?, ?, ?)', classes)\nconn.commit()\n</code></pre> <ul> <li>Similar to the previous step, <code>executemany()</code> inserts multiple rows into the <code>Class</code> table. Each tuple contains the class details (<code>ClassID</code>, <code>ClassName</code>, <code>Teacher</code>, and <code>RoomNumber</code>).</li> </ul>"},{"location":"topics/databases/04_python_sql.html#step-8-inserting-data-into-the-enrollment-table-linking-table","title":"Step 8: Inserting Data into the <code>Enrollment</code> Table (Linking Table)","text":"<pre><code># Link students to their enrolled classes using the Enrollment table\nenrollments = [\n    (1, 'C001'),\n    (1, 'C002'),\n    (2, 'C001'),\n    (2, 'C003'),\n    (3, 'C002')\n]\n\ncursor.executemany('INSERT INTO Enrollment (StudentID, ClassID) VALUES (?, ?)', enrollments)\nconn.commit()\n</code></pre> <ul> <li>This step links students to the classes they are enrolled in. Each tuple contains a StudentID and a ClassID, establishing relationships between students and their classes.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#part-4-querying-the-database","title":"Part 4: Querying the Database","text":""},{"location":"topics/databases/04_python_sql.html#step-9-retrieving-students-and-their-enrolled-classes","title":"Step 9: Retrieving Students and Their Enrolled Classes","text":"<p>To fetch data, we can use a <code>JOIN</code> query that links the <code>Students</code> and <code>Classes</code> tables via the <code>Enrollment</code> table.</p> <pre><code># SQL query to retrieve students and their classes\nquery = '''\nSELECT Student.StudentName, Student.Age, Class.ClassName, Class.Teacher\nFROM Enrollment\nJOIN Student ON Enrollment.StudentID = Student.StudentID\nJOIN Class ON Enrollment.ClassID = Class.ClassID;\n'''\n\n# Execute the query and fetch the results\ncursor.execute(query)\nresults = cursor.fetchall()\n\n# Display the results\nfor row in results:\n    print(f\"Student: {row[0]}, Age: {row[1]}, Class: {row[2]}, Teacher: {row[3]}\")\n</code></pre> <ul> <li>The <code>JOIN</code> query connects the <code>Enrollment</code>, <code>Student</code>, and <code>Class</code> tables to retrieve information about which students are enrolled in which classes.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#expected-output","title":"Expected Output:","text":"<pre><code>Student: John Doe, Age: 16, Class: Maths, Teacher: Mr. Smith\nStudent: John Doe, Age: 16, Class: Science, Teacher: Mrs. Johnson\nStudent: Jane Roe, Age: 15, Class: Maths, Teacher: Mr. Smith\nStudent: Jane Roe, Age: 15, Class: History, Teacher: Mr. Brown\nStudent: Sam White, Age: 16, Class: Science, Teacher: Mrs. Johnson\n</code></pre>"},{"location":"topics/databases/04_python_sql.html#step-10-retrieving-students-in-a-specific-class","title":"Step 10: Retrieving Students in a Specific Class","text":"<p>Let's fetch the list of students enrolled in a specific class (e.g., <code>Maths</code>).</p> <pre><code># SQL query to retrieve students enrolled in Maths\nquery = '''\nSELECT Student.StudentName, Student.Age\nFROM Enrollment\nJOIN Student ON Enrollment.StudentID = Student.StudentID\nWHERE Enrollment.ClassID = 'C001';\n'''\n\n# Execute the query and fetch the results\ncursor.execute(query)\nresults = cursor.fetchall()\n\n# Display the results\nprint(\"Students enrolled in Maths:\")\nfor row in results:\n    print(f\"Student: {row[0]}, Age: {row[1]}\")\n</code></pre> <ul> <li>This query uses a <code>WHERE</code> clause to filter students who are enrolled in a particular class (e.g., C001 for Maths).</li> </ul>"},{"location":"topics/databases/04_python_sql.html#expected-output_1","title":"Expected Output:","text":"<pre><code>Students enrolled in Maths:\nStudent: John Doe, Age: 16\nStudent: Jane Roe, Age: 15\n</code></pre>"},{"location":"topics/databases/04_python_sql.html#part-5-updating-and-deleting-data","title":"Part 5: Updating and Deleting Data","text":""},{"location":"topics/databases/04_python_sql.html#step-11-updating-student-information","title":"Step 11: Updating Student Information","text":"<pre><code># Update the age of 'Jane Roe' to 16\ncursor.execute('UPDATE Student SET Age = 16 WHERE StudentName = \"Jane Roe\"')\nconn.commit()\n\n# Verify the change\ncursor.execute('SELECT * FROM Student WHERE StudentName = \"Jane Roe\"')\nprint(cursor.fetchone())\n</code></pre> <ul> <li><code>UPDATE</code> is used to change data in the <code>Student</code> table. Here, we update the age of a student named \"Jane Roe.\"</li> <li>After executing the update query, we use <code>SELECT</code> to verify that the change has been applied.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#step-12-deleting-a-student-record","title":"Step 12: Deleting a Student Record","text":"<pre><code># Delete 'Sam White' from the Students table\ncursor.execute('DELETE FROM Students WHERE StudentName = \"Sam White\"')\nconn.commit()\n\n# Verify the deletion\ncursor.execute('SELECT * FROM Students')\nprint(cursor.fetchall())\n</code></pre> <ul> <li><code>DELETE</code> removes a record from the <code>Student</code> table. In this case, we delete \"Sam White\" by specifying their name in the <code>WHERE</code> clause.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#part-6-closing-the-database-connection","title":"Part 6: Closing the Database Connection","text":"<pre><code># Close the connection when you're done\nconn.close()\n</code></pre> <ul> <li><code>conn.close()</code> closes the connection to the database. This is important to free up resources and ensure that no uncommitted changes are lost.</li> </ul>"},{"location":"topics/databases/04_python_sql.html#summary","title":"Summary:","text":"<p>In this tutorial, you\u2019ve learned to:</p> <ul> <li>Set up a relational database with SQLite3 using Python.</li> <li>Create and populate tables (<code>Students</code>, <code>Classes</code>, <code>Enrollment</code>).</li> <li>Use SQL queries to retrieve, update, and delete data.</li> <li>Understand how tables relate to each other using primary and foreign keys.</li> </ul>"},{"location":"topics/impact/index.html","title":"Impact of Technology","text":""},{"location":"topics/impact/index.html#impact-of-technology","title":"Impact of Technology","text":""},{"location":"topics/impact/index.html#overview","title":"Overview","text":"<p>Digital Technology, as with any new invention or development, has brought fundamental changes to our society across the planet.  The rate of change has been phenomenal and it is a constantly changing landscape.  It has impacted every area of today's society giving rise to new legislation, discussions about the ethics of some of the new developments and how they might be impacting on our environment.  In this section we will consider of these wider issues from that perspective.</p> <p>For the GCSE this topic is usually addressed using \"long form questions\".  Questions where you are expected to answer using a number of paragraphs - a mini-essay - discussing the impact of these technological developments on society at large.  You'll be expected to touch on legislation, ethics and environment.  We will consider some of the techniques you might use to maximise your opportunities with these questions.  It's a hard one to revise directly for.  Some exam boards (AQA) specifically mention the areas they will focus on.  These include:</p> <ul> <li>cyber security</li> <li>mobile technologies</li> <li>wireless networking</li> <li>cloud storage</li> <li>hacking (unauthorised access to a computer system)</li> <li>wearable technologies</li> <li>computer based implants</li> <li>autonomous vehicles.</li> </ul> <p>In these contexts you will not be expected to have detailed knowledge, it's the general principles that count and in it's more about how the technology use in these areas is impacting on our wider society.  Privacy is always a hot topic, and one can expect to see the rise of AI and Machine Learning being referenced too.</p> <p>The best way to keep up to date here is to read the news, try to see behind the headlines and consider how technology is affecting the news item.</p>"},{"location":"topics/impact/01_legislation.html","title":"Legislation","text":""},{"location":"topics/impact/01_legislation.html#legislation","title":"Legislation","text":"<p>Objectives</p> <ul> <li>First</li> </ul> <p>Legislation refers to the process of making or enacting laws.   The government has the responsibility of making the laws and seeing they are upheld through various authorities.  Our legal system and the laws it upholds serve as a framework for regulating various aspects of public and private life.</p> <p>Computer use has brought new concerns and new crimes. With the rise of the internet, computers are increasingly being used for illegal activities.  There are a number of laws that directly impact how we use our own personal computers as well as how organisations handle our data and their network infrastructure.</p> <p>The main areas being considered here are:</p> <ul> <li>Data Protection: e.g. GDPR and Similar Regulations for the handling of personal data, impacting how companies collect and process user information.</li> <li>Data and Network Breaches: e.g. Computer Misuse Act covering unauthorised access to data and computer systems</li> <li>Intellectual Property Issues: e.g. Copyright and digital piracy</li> <li>Artificial Intelligence (AI) and Autonomous Systems: The legal framework around emerging technologies like AI and autonomous systems is still evolving, with questions about liability and accountability.</li> </ul> <p>The \"big ones\" are:</p> <ul> <li>Computer Misuse Act 1990</li> <li>UK-GDPR (UK General Data Protection Regulation)</li> <li>DPA (Data Protection Act 2018)</li> </ul> <p>Note</p> <p>The links above are for reference only, there is no need to dig into the detail of these laws, the key points will be covered here.</p>"},{"location":"topics/impact/01_legislation.html#computer-misuse-act-1990","title":"Computer Misuse Act 1990","text":"<p>The Computer Misuse Act 1990 is a legal framework in the United Kingdom designed to address and prevent unauthorized access to computer systems and data.  The act identifies three primary offenses: </p> <ul> <li>unauthorized access to computer material, </li> <li>unauthorized access with intent to commit or facilitate the commission of further offenses, and </li> <li>unauthorized modification of computer material.</li> </ul> <p>By \"unauthorized\" it simply means the person gaining access to the data, programs or other information is doing so without permission.  This is unlikely to happen accidentally and the notion of intent is important especially the intent to use this data for other offences such as blackmail, industrial espionage or theft of funds.</p> <p>Modifying computer material without permission is also a criminal offense. This includes altering, deleting, or adding data to a computer system without authorization.  Under tis heading would also come the triggering of Denial of Service attacks and distribution of viruses into a network.  This latter category would carry the most serious penalty.</p> <p>Individuals found guilty of offenses under the Computer Misuse Act can face legal consequences, including fines and imprisonment. The severity of the penalties depends on the nature and impact of the offense.  This can also apply if the offense is committed outside of the UK, by UK nationals.</p> <p>There are exemptions such as network testing for security purposes but this only applies if being carried out with the express consent of the system owner.</p> <p>Understanding the Computer Misuse Act is essential for individuals working in the field of cybersecurity. It highlights the legal and ethical considerations surrounding computer systems' security and data protection.</p> <p>Some recent cases involving CMA-1990:</p> <ul> <li>Unauthorised searches on a police computer system (2024)</li> <li>Unauthorised searches on a police computer system (2023)</li> <li>Personal Data breached at the RAC (2020)</li> <li>Microsoft hacked (2017)</li> </ul>"},{"location":"topics/impact/01_legislation.html#gdpr","title":"GDPR","text":"<p>GDPR (General Data Protection Regulation) is a comprehensive data protection regulation that aims to give individuals (you and me) increased privacy rights and control over their (our) personal data. It was introduced to address the challenges posed by evolving digital technologies and ensure the responsible handling of personal information.</p> <p>GDPR applies to the processing of personal data within the European Union (EU) and the European Economic Area (EEA). It also affects organizations outside the EU/EEA if they process the personal data of EU/EEA residents.</p> <p>Personal data includes any information related to an identified or identifiable person. This can include names, addresses, identification numbers, online identifiers, and other factors that contribute to an individual's identity.  That is, from the data held can that person be identified.</p> <p>The individual, that is the data subject (you and me) can exercise certain rights under the conditions of this legislation over their (our) personal data.  This includes the right to access, correct, remove and restrict the processing of this information. </p> <p>For the organisation holding our data it means they have to obtain explicit consent from the data subject for their data to be used.</p> <p>There are six principles:</p> <p>Personal information must:   1. be used fairly and lawfully   2. be used only for specific purposes for which it was collected   3. be adequate, relevant and not excessive    4. be accurate and kept up to date   5. not be kept for longer than is necessary and deleted when it is no longer needed   6. be kept secure against unauthorised access</p> <p>GDPR distinguishes between data controllers (entities determining the purpose and means of processing) and data processors (entities processing data on behalf of controllers). Both have specific responsibilities and obligations under the regulation.</p> <p>GDPR mandates organizations to report data breaches to the relevant supervisory authority without undue delay and, where feasible, within 72 hours of becoming aware of the breach. Data subjects must also be informed if the breach poses a high risk to their rights and freedoms.</p> <p>GDPR places restrictions on the transfer of personal data outside the EU/EEA to ensure that such transfers meet the necessary data protection standards.</p> <p>Firms found to be in breach of GDPR face fines of up to 4% of their annual global turnover - it's a big deal - as illustrated in the following examples of huge fines being levied against companies under the GDPR legislation:</p> <ul> <li>Google hit with \u00a344m GDPR fine over ads (2019)</li> <li>British Airways fined \u00a320m over data breach (2020)</li> <li>Marriott Hotels fined \u00a318.4m for data breach that hit millions (2020)</li> <li>Solar Winds Data Breach (2020)</li> </ul>"},{"location":"topics/impact/02_ethical_issues.html","title":"Ethical Issues","text":""},{"location":"topics/impact/02_ethical_issues.html#ethical-issues","title":"Ethical Issues","text":"<p>Objectives</p> <ul> <li>Define the concept of ethics in the context of philosophy.</li> <li>Identify the key components of ethics, including moral principles, values, and the concept of right and wrong conduct.</li> <li>Examine the ethical principles underpinning concerns related to technology.</li> <li>Understand the ethical implications of technological advancements in areas such as cybersecurity, mobile technologies, wireless networking, cloud storage, hacking, wearable technologies, computer-based implants, and autonomous vehicles.</li> <li>Explore the ethical issues surrounding data privacy.</li> <li>Examine the ethical issues related to public safety in the context of technology.</li> </ul> <p>Broadly speaking, ethics refers to the branch of philosophy that deals with moral principles, values, and the concept of right and wrong conduct. Ethics provides a framework for evaluating and determining what is considered morally acceptable or unacceptable behaviour in various situations. Ethics guides individuals, professionals, and societies in making decisions that align with moral principles and contribute to the well-being of individuals and society.</p> <p></p> <p>Key components of ethics include:</p> <ul> <li>The principles of honesty, integrity, fairness, and respect for others.</li> <li>Ethics are influenced by both personal and cultural beliefs. These values can vary among individuals and societies and play a crucial role in shaping moral judgments.</li> </ul> <p>It is a dynamic and evolving field that adapts to societal changes, cultural shifts, and advancements in technology. Ethical considerations are prevalent in various aspects of life, including personal relationships, business practices, medical decisions, scientific research, and more. The goal of ethical principles is to promote values that contribute to the welfare and harmony of individuals and society as a whole.</p> <p>In that context we need to evaluate some of the technological changes and how they may be giving rise to these questions of what is right and what is wrong according to an ethical framework.  This is different to what is legal or illegal.</p> <ul> <li>Data Privacy e.g. people try to hack systems to get hold of other people's data. Social media accounts, phone mailboxes and networks that computers connect to are all prone to hacking.</li> <li>Public safety: e.g. driverless cars may soon be on the roads in the UK. The designers of driverless cars have not only had to ensure the safety of passengers, but also of other drivers and pedestrians.</li> </ul>"},{"location":"topics/impact/02_ethical_issues.html#data-privacy","title":"Data Privacy","text":"<p>Connected here are also the collection of data, the security of that collected data and an individual's consent to the gathering of that data and what it might be being used for. </p> <p>Consider some of the following situations:</p> <ul> <li>Cybersecurity: A hacker gaining unauthorized access to a healthcare database containing patients' medical records could lead to privacy breaches, potential identity theft, and misuse of sensitive health information.</li> <li>Mobile Technologies: A social media app accessing users' contact lists without clear permission or knowledge, leading to the unauthorized sharing of personal contacts.</li> <li>Wireless Networking: Setting up a fake public Wi-Fi hotspot to capture data transmitted by unsuspecting users, potentially exposing sensitive information.  Known as an \"Evi Twin\" attack.</li> <li>Cloud Storage: A cloud storage provider experiencing a data breach, resulting in the exposure of users' confidential files or sensitive business information.</li> <li>Hacking (Unauthorized Access to Computer Systems): Hacking into a government database to access classified information, risking national security and individual privacy.</li> <li>Wearable Technologies: A fitness tracker sharing users' health data with third-party advertisers without clear consent, leading to privacy concerns and potential misuse of health information.</li> <li>Autonomous Vehicles: An autonomous car's navigation system storing detailed travel history, potentially leading to unauthorized tracking or profiling of users.</li> </ul> <p>Some of these issues have had some high profile news items that are worth following up:</p> <ul> <li>In 2018, Facebook faced controversy for the Cambridge Analytica scandal. The social media giant was accused of improperly sharing the personal data of millions of users with the political consulting firm Cambridge Analytica without clear user consent, highlighting issues of data privacy in mobile app usage.</li> <li>In 2017, the data breach of Equifax, one of the major US credit reporting agencies, exposed sensitive personal information of millions of individuals. This breach underscored the risks associated with the compromise of data stored in centralized repositories.</li> <li>The 2013 Edward Snowden revelations highlighted unauthorized access to classified government information. Snowden, a former NSA contractor, leaked classified documents revealing global surveillance programs, sparking debates on privacy, security, and government overreach.</li> <li>Is my home spying on me? How the rise of the Internet of Things is providing additional information about our habits and homes.</li> <li>In 2018, reports suggested that some fitness apps were sharing users' health data with third-party companies without clear consent. This raised concerns about the privacy implications of wearable technologies and the potential misuse of health-related information.  More here</li> </ul>"},{"location":"topics/impact/02_ethical_issues.html#public-safety","title":"Public Safety","text":"<ul> <li>Cybersecurity: A cyberattack on a power grid or water treatment facility could disrupt essential services, posing a threat to public safety by potentially causing widespread power outages or contaminating water supplies.</li> <li>Mobile Technologies: A malicious mobile app with access to location data could be used to track individuals, raising concerns about stalking or potential harm to users' physical safety.</li> <li>Wireless Networking: An attacker exploiting vulnerabilities in a city's public Wi-Fi network could potentially intercept sensitive communications, compromising public safety information.</li> <li>Cloud Storage: A cloud storage service containing emergency response plans for natural disasters experiencing a data breach could compromise the effectiveness of disaster response efforts.</li> <li>Hacking (Unauthorized Access to Computer Systems): Unauthorized access to a transportation system's control center could disrupt traffic management, leading to potential accidents and endangering public safety.</li> <li>Wearable Technologies: Employers using wearables to monitor employees' locations and activities without clear policies or consent may raise concerns about privacy and workplace safety.</li> <li>Computer-Based Implants: A medical implant controlling a person's insulin levels being vulnerable to hacking could lead to life-threatening consequences for the individual.</li> <li>Autonomous Vehicles: A cyberattack on the systems controlling autonomous vehicles could lead to accidents, posing risks to passengers and pedestrians on the road.</li> </ul> <p>Some of these issues have had some high profile news items that are worth following up:</p> <ul> <li>The SolarWinds cyberattack in 2020 highlighted the vulnerability of software supply chains. It impacted various U.S. government agencies and private organizations, underscoring the potential risks to national security and public safety.</li> <li>In the past, various incidents have involved mobile apps with privacy and security issues. For instance, apps have been found to collect excessive data without user consent, leading to concerns about the safety and privacy of user information. Read More</li> <li>Various incidents involving accidents and safety concerns with autonomous vehicles, such as the Uber self-driving car crash in 2018, have sparked discussions about the safety of autonomous technologies and their potential impact on public safety.  Also see this TED Talk on The ethical dilemma of self-driving cars.</li> </ul>"},{"location":"topics/impact/02_ethical_issues.html#other-issues","title":"Other issues","text":"<ul> <li>Algorithmic Bias: Algorithms used in decision-making processes may perpetuate or even exacerbate existing biases, leading to unfair treatment of certain individuals or groups.</li> <li>Digital Divide: Not everyone has equal access to digital technologies, leading to a digital divide that can exacerbate existing social and economic disparities.</li> <li>Fake News and Disinformation: Digital platforms can be used to spread false information, influencing public opinion and creating challenges for democracy.</li> <li>Addiction and Mental Health: Excessive use of social media and digital devices has been linked to mental health issues, including anxiety and depression.</li> </ul>"},{"location":"topics/impact/03_environmental_issues.html","title":"Environmental Issues","text":""},{"location":"topics/impact/03_environmental_issues.html#environmental-issues","title":"Environmental Issues","text":"<p>Objectives</p> <ul> <li>Define and explain the interconnected relationship between human activities, technological advancements, and the natural components of the environment.</li> <li>Identify and describe positive environmental impacts of technology, such as advancements in renewable energy technologies, reduced travel-related pollution, and insights into climate change through modeling and simulations.</li> <li>Identify and describe negative environmental impacts of technology, including the generation of electronic waste (e-waste), resource depletion due to rare earth element extraction, and the carbon footprint associated with production and transportation.</li> <li>Explain how technology contributes to deforestation, habitat destruction, water pollution, and energy consumption in data centers.</li> <li>Explore and evaluate mitigation strategies employed by companies, corporations, and governments to address the negative environmental impacts of technology.</li> <li>Encourage critical thinking about the ethical implications of technology and its environmental consequences.</li> <li>Discuss the importance of balancing technological progress with environmental sustainability.</li> </ul> <p>In the context of technology and its impact on the environment, the focus is on the manufacturing and use of computers and computer systems and how these interact with and influence our natural world. This includes considerations of pollution, resource depletion, habitat destruction, and broader ecological changes resulting from technological processes.</p> <p>Resources are needed to in order for computers to be produced, distributed and used. Metals and plastics are used to manufacture components, while energy is expended in distributing equipment and in using it.</p> <p>Understanding the environment in this context involves recognizing the delicate balance required to sustain our ecosystems and our own well-being as well as of other animals on the planet. Discussions about environmental impact typically address how human actions, including technological innovations, can either contribute to environmental decay or support conservation and sustainable practices.</p> <p>There are several, easy to use examples e.g.</p> <ul> <li>It requires a vast amount of energy to keep data centres, web servers online</li> <li>Many computer components are hard to recycle as they contain toxic materials, such as lead. </li> <li>users are quick to throw away IT equipment e.g. replacing a smartphone every couple of years</li> </ul> <p>All of this means that computers have a heavy impact on the environment, which is unlikely to decrease in the near future. However, many devices are now more power efficient than their predecessors and some companies have come up with innovative ways to save power.</p> <p></p> <p>The impacts of technology on the environment are multifaceted and can be both positive and negative. Let's start with the positive.</p>"},{"location":"topics/impact/03_environmental_issues.html#positive-impacts","title":"Positive Impacts:","text":"<p>Renewable Energy Technologies:</p> <p>Advancements in solar and wind technologies have enabled the generation of clean, renewable energy, reducing reliance on fossil fuels and decreasing greenhouse gas emissions.</p> <p>Reduced Travel</p> <p>More opportunity for online global communication and collaboration thereby saving on travel and associated pollution plus potential for home working and saving on commuting time</p> <p>Insight into climate change</p> <p>Greater insight into the environment and climate through use of modelling and simulations by powerful computers</p> <p>Energy Efficiency:</p> <p>The integration of smart technologies in buildings, industries, and transportation enhances energy efficiency, reducing overall energy consumption and environmental impact.</p> <p>Environmental Monitoring:</p> <p>Technology allows for better monitoring of environmental conditions, including air and water quality, deforestation, and wildlife tracking, aiding conservation efforts.</p> <p>Precision Agriculture:</p> <p>Precision agriculture technologies, driven by the Internet of Things (IoT) and data analytics, optimize resource use, reduce waste, and minimize environmental impact in farming practices.</p>"},{"location":"topics/impact/03_environmental_issues.html#negative-impacts","title":"Negative Impacts:","text":"<p>Electronic Waste (E-Waste):</p> <p>The fast pace of technological advancements contributes to the generation of electronic waste, as outdated devices are frequently replaced, leading to environmental pollution and resource depletion.</p> <p>The Global E-waste Monitor 2020 report found that the world dumped a record 53.6 million tonnes of e-waste last year \u2014 equivalent to the weight of 350 cruise ships the size of the Queen Mary 2, or enough to form a line 125 kilometres long. That's an increase of 21 per cent in five years, the report said<sup>1</sup>.</p> <p>Read more here</p> <p>Resource Depletion: </p> <p>The production of electronic devices requires the extraction of rare earth elements, contributing to habitat destruction, soil degradation, and water pollution.</p> <p>Carbon Footprint:</p> <p>The production and transportation of technology products contribute to carbon emissions, especially when manufacturing processes rely heavily on fossil fuels.</p> <p>In a 2023 report of the 100 of the biggest technology companies in the world, ranking them from highest to lowest found that:</p> <p>Samsung produces more carbon dioxide than any other tech company, and of the \u201cBig Five\u201d tech companies (Apple, Amazon, Alphabet, Meta and Microsoft), Amazon is the largest polluter. Amazon produced over 16 million metric tons of CO2 in 2021\u2013nearly 20 times the carbon footprint of Microsoft, which polluted least out of the 5. That said, Microsoft\u2019s carbon footprint is still pretty big\u2013at nearly 870,000 metric tons, it\u2019s about as big a polluter as the population of Rhode Island<sup>2</sup>.</p> <p>Deforestation and Habitat Destruction:</p> <p>Mining for new materials, especially rare earth elements and other metals used in the production of computers and electronic devices, can contribute to deforestation and other environmental impacts. The global impact of mining on deforestation is influenced by several factors including land clearance, disruption to natural habitats, soil erosion, contamination of water supplies.</p> <p>Water Pollution:</p> <p>The manufacturing of electronic components often involves the use of toxic chemicals, which can lead to water pollution if not properly managed.  These include:</p> <ul> <li>Lead: used for solder</li> <li>Mercury: used in some batteries and switches</li> <li>Cadmium: used in rechargeable batteries and transistors</li> <li>Polybrominated Biphenyls (PBBs) and Polybrominated Diphenyl Ethers (PBDEs): used as flame retardants in plastics</li> <li>Arsenic: used in some semconductor processing</li> </ul> <p>Energy Consumption:</p> <p>The increasing demand for data storage and computing power in data centres requires significant energy consumption, contributing to carbon emissions if the energy is derived from non-renewable sources.  Globally, data centers were estimated to use between 196 terawatt hours (TWh) (Masanet et al, 2020) and 400 TWh (Hintemann, 2020) in 2020. This would mean data centres consume between 1-2% of global electricity demand. This figure will have increased significantly in the past four years.</p> <p>Employment</p> <p>Technology has created a vast number of different jobs and positions for those working in these industries but it has also posed challenges as some traditional roles have been displaced.  This particularly obvious in manufacturing industries but we now see additional risks posed by AI and Machine Learning to many professional roles.</p>"},{"location":"topics/impact/03_environmental_issues.html#mitigation-strategies","title":"Mitigation Strategies:","text":"<p>As attention has been drawn on many of these environmental issues companies, corporations and governments are working to mitigate the negative impacts by e.g.</p> <ul> <li>Implementing strategies for product design, reuse, recycling, and responsible disposal to minimize the environmental impact of electronic waste.</li> <li>Increasing the use of renewable energy sources to power technology infrastructure, reducing reliance on fossil fuels.</li> <li>Developing and promoting energy-efficient computing practices and hardware, as well as optimizing software to reduce energy consumption.</li> <li>Adopting sustainable sourcing practices for raw materials, ensuring responsible mining and manufacturing processes.</li> <li>Enforcing and adhering to environmental regulations and standards to minimize the negative impact of technology on the environment.</li> <li>Raising awareness among consumers, businesses, and policymakers about the environmental implications of technology and promoting responsible usage and disposal.</li> </ul> <p>Balancing technological advancements with environmental sustainability is crucial for creating a more harmonious relationship between technology and the natural world. This involves ongoing efforts to minimize negative impacts, promote eco-friendly innovations, and prioritize sustainable practices across the entire lifecycle of technology products.</p> <ol> <li> <p>https://www.cbc.ca/news/science/global-ewaste-monitor-2020-1.5634759\u00a0\u21a9</p> </li> <li> <p>https://www.forbes.com/sites/alanohnsman/2023/03/04/current-climate-big-techs-massive-carbon-footprint/?sh=6f2d624e1de8\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/impact/04_rise_of_ai.html","title":"The Rise of AI and Machine Learning","text":""},{"location":"topics/impact/04_rise_of_ai.html#the-rise-of-ai-and-machine-learning","title":"The Rise of AI and Machine Learning","text":"<p>Objectives</p> <ul> <li>First</li> </ul> <p>-- TODO --</p>"},{"location":"topics/impact/05_tackling_long_form_questions.html","title":"Tackling Long Form Questions","text":""},{"location":"topics/impact/05_tackling_long_form_questions.html#tackling-long-form-questions","title":"Tackling Long Form Questions","text":"<p>Objectives</p> <ul> <li>First</li> </ul> <p>-- TODO --</p> <p>Think of extended response questions as mini essays Must be in prose form Need to make use of appropriate keywords Points need to be relevant Sentences follow on from one to another to produce coherent and clear prose No SPAG mistakes Answer the question fully</p> <p>Think about how you can structure your answer Ethical impacts (3 marks) Legal impacts (3 marks) Environmental impacts (3 marks)</p> <p>There is usually a question on the first paper of the OCR GCSE in Computer Science that requires a longer answer and is worth up to 8 marks.</p> <p>The marks for these questions are awarded in three bands - to get into the top band you need to include both sides of the argument and/or include both positive and negative aspects of the application of technology in that particular field.</p> <p>Try to include examples related to the points you are trying to make. Even if you are short of specific examples, there are some generic points that you can make for most contexts:</p> <p>Don't forget record keeping - as well as the main activity (treating patients, education, running a business, etc.) you can also keep records about the activity in a file or database and process (e.g. search and sort) them quickly. Will the use of computers to work with people or store their data lead to security or privacy concerns? De-skilling of the workforce - lots of new technologies replace skills, e.g. Google Maps removes the need to be able to read maps. Could the introduction of the new technology lead to job losses or new jobs? Usually this would be the replacement of mundane jobs with more skilled IT jobs. De-personalisation - would you like to be taught, treated or entertained by a computer or robot? Did people derive pleasure from the technology? E-mail might be quicker and cheaper, but people like to write a letter with a fountain pen, or to receive things through the post. Environmental impact - will the new technology require building work, the use of toxic materials, water or electricity, will it cause waste, change traffic flow or create/lesson traffic and emissions? There could be a cultural impact if new technology replaces traditions, causes people to see how things are done elsewhere, or causes people to start using other languages (in the same way that lots of people in other countries experience English through music on the radio, or in television programmes and films). How would the implementation of the technology be affected by legislation such as the Data Protection Act, Copyrights Designs and Patents Act or Computer Misuse Act - e.g. would they need to get clearance for images, sounds, etc. Some fields, e.g. financial services, even have their own rules that could override these - e.g. banks are required to keep records for longer than the Data Protection Act suggests. Could the technology used disadvantage or discrimate against a particular group? This can be anything from devices being inaccessible to people with disabilities (e.g. visual impairment, colourblindness), creating a \"digital divide\" by being unaffordable for people on lower incomes, or requiring expensive accessories or services. Some technologies aren't intentionally discrimatory, but might cause problems because of an oversight or lack of training with appropriate examples, e.g. facial recognition software that doesn't work properly with some ethnic groups. Are there democratic implications? For example, social media allows people to publish their opinions, which was previously only possible if you were in a position of power or worked at a newspaper. Authoritarian regimes might struggle to suppress \"the truth\" if people start tweeting about it, but on the other hand some governments (e.g. ours) believe that encrypted communication can be a threat to democracy due to its use by criminals and terrorists.</p>"},{"location":"topics/logic/index.html","title":"Logic","text":""},{"location":"topics/logic/index.html#logic","title":"Logic","text":""},{"location":"topics/logic/index.html#overview","title":"Overview","text":""},{"location":"topics/logic/01_introduction_to_logic_gates.html","title":"Introduction to Logic Gates","text":""},{"location":"topics/logic/01_introduction_to_logic_gates.html#introduction-to-logic-gates","title":"Introduction to Logic Gates","text":"<p>In computer science and mathematics, logic is a way of making decisions based on certain conditions being either true or false. In digital circuits, logic helps us control how electronic devices work by making decisions based on whether inputs (conditions) are on or off, which can also be thought of as true or false.</p> <p>In simple terms:</p> <ul> <li>True is represented as 1</li> <li>False is represented as 0</li> </ul> <p>You will already use logic in everyday life, without even realizing it. </p> <p>For example:</p> <p>\"If it's sunny AND I have time, I'll go for a walk.\"</p> <p>In this case, going for a walk depends on two things being true: the weather is sunny, and you have time.</p> <p>Similarly, computers and digital circuits make decisions based on inputs that are either true (1) or false (0). These decisions are controlled by logic gates, which perform logical operations.</p>"},{"location":"topics/logic/01_introduction_to_logic_gates.html#inputs-and-outputs-true-or-false","title":"Inputs and Outputs: True or False","text":"<p>A logic gate takes inputs (true or false values, 0 or 1) and produces an output that depends on the type of gate. Each gate follows a set of rules about how to combine its inputs to determine the output.</p> <p>For example, let\u2019s consider two conditions:</p> <ul> <li>A: \"It is raining.\"</li> <li>B: \"I have an umbrella.\"</li> </ul> <p>We can use logic gates to make decisions based on these inputs.</p>"},{"location":"topics/logic/01_introduction_to_logic_gates.html#key-logic-gates-and-or-not-and-xor","title":"Key Logic Gates: AND, OR, NOT and XOR","text":"<p>We have three ways of representing these logic gates and the circuits that can be designed using these gates:</p> <ul> <li>Truth table</li> <li>Boolean expression</li> <li>Logic Diagram</li> </ul> <p>Each depicts the same process and well consider each n the following sections.</p>"},{"location":"topics/logic/01_introduction_to_logic_gates.html#and-gate","title":"AND Gate","text":"<p>The AND gate checks if all the inputs are true. It outputs true (1) if, and only if, both inputs are true. Otherwise, it outputs false (0).</p> <p>Imagine the following scenario:</p> <p>You will go to the cinema if:</p> <ul> <li>A: You have enough money for a ticket</li> <li>B: There's something you want to see at the cinema</li> </ul> <p>You need both the money for the ticket, and something that interests you at the cinema.  If either is missing then you will not go.</p> <p>We have already encountered something similar when programming:</p> <pre><code>if (A == 1 and B == 1) then\n    print(\"You can go the cinema\")\nelse\n    print(\"You can  not go to the cinema\")\n</code></pre> <p>We can represent all of the possible conditions for this statement by using  truth table:</p> <p>Truth Table for AND:</p> A (Money) B (Interesting Movie) A AND B (Go to the cinema) 0 0 0 0 1 0 1 0 0 1 1 1 <p>The AND gate only outputs 1 (True) when both inputs A and B are 1 (True). When either of these conditions is <code>False</code> you will not be going to the cinema.</p> <p>Boolean expression for AND</p> <p>This scenario can also be represented using a boolean expression: \\(A \\bullet B\\)</p> <p>Note</p> <p>A boolean expression is an expression using special algebraic notation.  Inputs are denoted by capital letters e.g. A, B etc.  The operators used are:</p> <ul> <li>AND: \\(A \\bullet B\\)</li> <li>OR: \\(A + B\\) </li> <li>NOT: \\(\\overline A\\)</li> </ul> <p>Logic diagram</p> <p>The symbol for an AND gate:</p> <p></p>"},{"location":"topics/logic/01_introduction_to_logic_gates.html#or-gate","title":"OR Gate","text":"<p>The OR gate outputs true (1) if at least one of its inputs is true. The only time it outputs false is if both inputs are false.</p> <p>You may not have the money for a ticket, but perhaps a friend is willing to pay for you?  (We'll ignore what might be on at the cinema!)</p> <p>Now we have the following inputs:</p> <ul> <li>A: You have money for a ticket</li> <li>B: Your friend is will to pay for your ticket</li> </ul> <pre><code>if (A == 1 or B == 1) then\n    print(\"You can go to the cinema\")\nelse\n    print(\"You can not go to the cinema\")\n</code></pre> <p>Again, we can describe these conditions using a truth table:</p> <p>Truth Table for OR:</p> A (Money) B (Friend pays) A OR B (Go to the cinema) 0 0 0 0 1 1 1 0 1 1 1 1 <p>Logic Diagram</p> <p></p> <p>Explanation:  </p> <p>The OR gate outputs 1 (True) if either input A or input B (or both) is 1 (True). This means you\u2019ll go to the cinema if you have the money (A = 1), if your friend will pay for your ticket (B = 1), or both.</p> <p>In these OR gate scenarios, the outcome is true (you go to the cinema) if either one of the conditions is met. This contrasts with the AND gate logic, where both conditions must be true. With OR, just having one true  input is enough for the output to be true.</p> <p>This scenario can also be represented using a boolean expression: \\(A + B\\)</p>"},{"location":"topics/logic/01_introduction_to_logic_gates.html#not-gate","title":"NOT Gate","text":"<p>The NOT gate does something simple: it inverts the input. If the input is true (1), the output will be false (0), and if the input is false (0), the output will be true (1).</p> <p>The NOT gate takes only one input, either <code>True</code> (1) or <code>False</code> (0).</p> <p>Our cinema analogy might might break down a little, but we can consider the scenario that says we will go to the cinema when the sun is not out!</p> <p>We have the following conditions:</p> <ul> <li>A: It is sunny (the input)</li> <li>NOT A: It is not sunny (the output, and we go to the cinema)</li> </ul> <p>In this case, you are more likely to go to the cinema if it's not sunny (i.e., a rainy or cloudy day). So the condition A checks whether it\u2019s sunny, and the NOT gate inverts that. If it\u2019s sunny (A = 1), you won\u2019t go to the cinema (output = 0). If it\u2019s not sunny (A = 0), the NOT gate outputs true, meaning you\u2019ll go to the cinema.</p> <pre><code>if not(A) then\n    print(\"You can go to the cinema\")\nelse\n    print(\"You can not go to the cinema\")\n</code></pre> <p>Truth Table for NOT:</p> A (Sunny) NOT A (Not sunny, go to the cinema) 0 1 1 0 <p>Logic Diagram</p> <p></p> <p>Explanation of the NOT Logic:</p> <ul> <li>If A (it\u2019s sunny) is false (0), then the NOT gate outputs true (1), meaning you\u2019ll go to the cinema.</li> <li>If A (it\u2019s sunny) is true (1), the NOT gate outputs false (0), meaning you won\u2019t go to the cinema because it's sunny and you're more likely to do something outdoors.</li> </ul> <p>This scenario can also be represented using a boolean expression: \\(\\overline A\\)</p>"},{"location":"topics/logic/01_introduction_to_logic_gates.html#xor-gate","title":"XOR Gate","text":"<p>The XOR gate (exclusive OR) behaves differently from the OR gate because it only outputs true (1) when exactly one of the inputs is true\u2014not both. In a real-life scenario, this would mean you make a decision when one condition is met, but not if both conditions are true or both are false.</p> <p>Scenario: Cinema or Streaming at Home</p> <p>You will either:</p> <ul> <li>Go to the cinema or</li> <li>Stream a movie at home, but not both at the same time.</li> </ul> <p>Conditions</p> <ul> <li>A: You have enough money to go to the cinema.</li> <li>B: A good movie is available to stream at home.</li> </ul> <p>Thus:</p> <ul> <li>You\u2019ll go to the cinema if you have the money but not a good movie to stream.</li> <li>You\u2019ll stream at home if a good movie is available but you don\u2019t have the money to go out.</li> <li>If both conditions are true (you have money and a good movie to stream), you can\u2019t do both at the same time, so you\u2019ll choose neither.</li> <li>If neither is true, you can\u2019t go to the cinema or stream, so you\u2019ll do something else.</li> </ul> <p>Boolean expression</p> <p>\\(A \\text{ XOR } B\\)</p> <p>or</p> <p>\\(A \\oplus B\\)</p> <p>Truth Table for Cinema vs. Streaming XOR Decision:</p> A (Have Money for Cinema) B (Good Movie to Stream) Output (Cinema or Stream) 0 0 0 0 1 1 1 0 1 1 1 0 <p>Logic Diagram</p> <p>The symbol used for the XOR gate:</p> <p></p> <p>Explanation of the XOR Logic:</p> <ul> <li>When both A and B are false (0, 0): You don\u2019t have money for the cinema, and there\u2019s no good movie to stream, so you won\u2019t do either (output = 0).</li> <li>When A is false and B is true (0, 1): You don\u2019t have money to go to the cinema, but there\u2019s a good movie to stream at home, so you stream (output = 1).</li> <li>When A is true and B is false (1, 0): You have money to go to the cinema, but there\u2019s nothing good to stream, so you go to the cinema (output = 1).</li> <li>When both A and B are true (1, 1): You have money to go to the cinema, and there\u2019s a good movie to stream, but you can\u2019t do both, so you do neither (output = 0).</li> </ul> <p>The XOR gate works well here because it captures the decision-making process where you only do one of the two activities, not both. If one condition is true, you take action (go to the cinema or stream). If both conditions are true, you can\u2019t choose both, so you end up doing neither.</p>"},{"location":"topics/logic/02_combining_logic_gates.html","title":"Combining Logic Gates","text":""},{"location":"topics/logic/02_combining_logic_gates.html#combining-logic-gates","title":"Combining Logic Gates","text":"<p>Having looked at the basic gates (AND, OR, NOT and XOR) we now move to looking how these can be combined to make more complex decisions.</p> <p>Scenario: Going to the Cinema</p> <p></p> <p>You will go to the cinema if:</p> <ul> <li>A: You have money for a ticket.</li> <li>B: A friend is available who can pay for your ticket.</li> <li>C: It is not sunny.</li> </ul> <p>We have three inputs for our decision.</p> <p>You will go to the cinema if:</p> <ol> <li>You have money (A) OR your friend is willing to pay (B).</li> <li>It is not sunny (NOT C) (because you prefer to go indoors when it's not sunny).</li> </ol> <p>So, the logic combines:</p> <ul> <li>A OR B: You need either money or a friend who will pay for the ticket.</li> <li>NOT C: You will only go if it's not sunny.</li> </ul> <p>The full boolean expression becomes:</p> <p>\\((A \\text{ OR } B) \\text{ AND } \\text{NOT } C\\)</p> <p>Or in formal notation:</p> <p>\\(( A + B) \\bullet \\overline C\\)</p> <p>Logic Diagram</p> <p></p> <p>Explanation of the Logic</p> <ul> <li>A OR B: You either have money (A) or a friend to pay (B) for your ticket.</li> <li>NOT C: It needs to be not sunny (C) to prefer going to the cinema.</li> <li>The combination: You\u2019ll go to the cinema if either you or your friend has money and it\u2019s not sunny.</li> </ul> <p>Truth Table for the Full Scenario:</p> A (Money) B (Friend) C (Sunny) NOT C (Not Sunny) Output (Go to Cinema) 0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 0 1 1 0 0 1 0 0 1 1 1 0 1 0 0 1 1 0 1 1 1 1 1 0 0 <p>Explanation:</p> <p>You will go to the cinema if:</p> <ul> <li>You have money (A = 1) or your friend can pay (B = 1).</li> <li>It is not sunny (NOT C = 1).</li> </ul> <p>The only time you won\u2019t go is if you:</p> <ul> <li>Have no money (A = 0) and no friend to pay (B = 0).</li> <li>It is sunny (C = 1).</li> </ul>"},{"location":"topics/logic/03_example_1.html","title":"Example","text":""},{"location":"topics/logic/03_example_1.html#example","title":"Example","text":"<p>Here, we'll take a scenario and create the:</p> <ul> <li>truth table</li> <li>boolean expression, and</li> <li>logic diagram</li> </ul> <p>It is a popular examination question and you will be required to any, or all, of these from a given scenario.</p>"},{"location":"topics/logic/03_example_1.html#scenario","title":"Scenario","text":"<p>A coffee machine can be turned on if:</p> <ul> <li>The coffee beans container is not empty AND the water reservoir is not empty OR the machine is in \"cleaning mode\"</li> </ul> <p>Analyse the scenario carefully.  Look for the keywords of AND and OR , also where there may be a negative meaning indicating a NOT.</p> <p>To model the logic of this system we need an AND gate, also an OR gate:</p> <ul> <li>AND gate: Coffee beans container is not empty AND Water reservoir is not empty</li> <li>OR gate: ((Coffee beans container is not empty AND Water reservoir is not empty) OR Machine is in cleaning mode)</li> </ul> <p>There is also a NOT gate here too:</p> <ul> <li>NOT gate: Coffee beans container is NOT empty</li> </ul>"},{"location":"topics/logic/03_example_1.html#creating-the-truth-table","title":"Creating the Truth Table","text":"<p>To build the truth table, we have three inputs and we need to note all the possible permutations of when these inputs are either true or false.</p> <p>Our inputs are:</p> <ul> <li>Coffee beans</li> <li>Water reservoir, and</li> <li>Machine in cleaning mode</li> </ul> <p>You can use A, B or C for each of these if you wish.  They are just labels of course.</p> <p>Note</p> <p>With 3 inputs there will be 8 possible permutations because \\(2^3 = 8\\)</p> <p>When writing the permutations keep to the sequence that moves from where each is 0, or False through to each one being 1, or True.</p> Coffee Beans (A) Water Reservoir (B) Machine in Cleaning Mode (C) 0 0 0 0 0 1 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 1 1 1 <p>The complete the output column by evaluating the expression carefully.  The first row is easy, when any of our inputs are false then the coffee machine will not work:</p> Coffee Beans Water Reservoir Machine in Cleaning Mode Coffee Machine 0 0 0 0 <p>The second row puts in the coffee machine in cleaning mode, and so it can be turned on.  it does not matter about either the coffee beans container nor the water reservoir:</p> Coffee Beans Water Reservoir Machine in Cleaning Mode Coffee Machine 0 0 0 0 0 0 1 1 <p>The third row says there is water in the reservoir but no coffee beans have not been added, and the machine if not in cleaning mode.  Therefore, the coffee machine will not work as we have to have both coffee beans and water.  </p> Coffee Beans Water Reservoir Machine in Cleaning Mode Coffee Machine 0 0 0 0 0 0 1 1 0 1 0 0 <p>Continue through with each row until you arrive at the following truth table for all the possible permutations:</p> Coffee Beans Water Reservoir Machine in Cleaning Mode Coffee Machine 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 1 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1"},{"location":"topics/logic/03_example_1.html#creating-the-boolean-expression","title":"Creating the Boolean Expression","text":"<p>The Boolean expression for this circuit is:</p> <p>Coffee Machine = (Coffee Beans AND Water Reservoir) OR Machine in Cleaning Mode</p> <p>or</p> <p>\\(Q = (A \\bullet B) + C\\)</p> <p>This expression evaluates to TRUE if the coffee machine can be turned on, and FALSE otherwise.</p>"},{"location":"topics/logic/03_example_1.html#creating-the-logic-diagram","title":"Creating the Logic Diagram","text":"<p>Creating the logic diagram can be a challenging task, but with a clear approach, you can master it. </p> <p>You can either:</p> <ul> <li>Start with the output and work backwards, or</li> <li>start with the inputs and move forward</li> </ul>"},{"location":"topics/logic/03_example_1.html#start-with-the-output-and-work-backwards","title":"Start with the output and work backwards","text":"<p>This approach is often recommended because it helps you focus on the desired outcome and then break it down into smaller, manageable components. </p> <ol> <li>Identify the output: The output is \"Machine can be turned on\".  Conventionally, we label this as Q</li> <li> <p>Determine the conditions: For the machine to be turned on, one of the following conditions must be true:</p> <ul> <li>The coffee beans container is not empty (A) AND the water reservoir is not empty (B)</li> <li>OR the machine is in \"cleaning mode\" (C)</li> </ul> </li> <li> <p>Connect the conditions to the output The final condition is the OR gate, so draw that symbol and connect its output to Q</p> </li> <li>Connect the inputs to most recently added gate: The inputs to the OR gate will be:<ul> <li>the output from an AND gate</li> <li>C, the cleaning mode</li> </ul> </li> <li>Label the inputs We will have added an AND gate in the previous step, so all that remains is to label the inputs to that gate with A and B</li> </ol>"},{"location":"topics/logic/03_example_1.html#start-with-the-input-and-move-forwards","title":"Start with the input and move forwards","text":"<p>This approach can also be effective, especially if you're more comfortable thinking about the inputs and how they interact with each other. Here's how:</p> <ol> <li>Identify the inputs<ul> <li>A Coffee beans container</li> <li>B Water reservoir</li> <li>C Cleaning mode</li> </ul> </li> <li> <p>Determine the relationships</p> <ul> <li>A and B are connected by an AND gate, so add this to the diagram</li> <li>the output of the AND gate is connected to one of the inputs to the OR gate</li> <li>C is connected to the other input of the OR gate  </li> <li>The output of the OR gate is connected to Q</li> </ul> </li> </ol> <p>Once you've created the logic diagram, test it with different input combinations to ensure it produces the correct output.</p> <p>This can be challenging but the more you practice creating logic diagrams, the more comfortable you'll become with the process.</p>"},{"location":"topics/logic/04_example_2.html","title":"Example 2","text":""},{"location":"topics/logic/04_example_2.html#example-2","title":"Example 2","text":"<p>This worked example has been taken from a past paper (OCR 2023, question 4).</p> <p></p> <p>The question provides the following scenario:</p> <p>A garden floodlight system uses inputs from sensors and switches to decide whether it should be turned on.</p> <p>The floodlight is fitted with:</p> <ul> <li>a motion sensor</li> <li>a light sensor</li> <li>an on/off switch</li> </ul> <p>For obvious reasons, the floodlight should only be turned on when it is dark!</p> <p>The table shows the inputs into the system and the meaning of each input value:</p> Letter Input device Input of 1 Input of 0 A Motion sensor Motion is detected Motion is not detected B Light sensor Light levels indicate it is daytime Light levels indicate it is nighttime C Light switch The switch is turned on The switch is turned off <p>The floodlight (Q) is designed to be on (Q = 1) when the switch is turned on and the motion sensor detects motion at nighttime.</p> <p>The question asks for a logic diagram but similar questions might also ask for a boolean expression and/or a truth table for a given scenario so we'll work on each of these in turn.</p>"},{"location":"topics/logic/04_example_2.html#truth-table","title":"Truth Table","text":"<p>To create a truth table, we need to list all possible combinations of input values for A, B, and C. Since each input can have two values (0 or 1), we have a total of \\(2^3 = 8\\) possible combinations.</p> <p>Here is the truth table:</p> A B C Q 0 0 0 ? 0 0 1 ? 0 1 0 ? 0 1 1 ? 1 0 0 ? 1 0 1 ? 1 1 0 ? 1 1 1 ? <p>Analyse the scenario carefully:</p> <ul> <li>Light Switch (C): the motion sensor will only be operational if it is turned on (C=1).  Therefore, wherever C=0 then Q=0</li> <li>Motion Sensor (A): for the light to come on it must detect a movement (A=1)</li> <li>Light sensor (B): it has to be night time, (B=0)</li> </ul> <p>Thus: The output Q is 1 only when the switch is turned on (C = 1) AND the motion sensor detects motion (A = 1), AND it is nighttime (B = 0).</p> <p>We can go ahead and complete the column Q:</p> A B C Q 0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 1 1 0 0 1 1 1 0 <p>(b) Boolean Expression:</p> <p>From the truth table, we can derive the boolean expression for Q.  From that row in the truth table we see that Q is true when A is true, B is not true and C is true.</p> <ul> <li>Q = A AND NOT(B) AND C</li> </ul> <p>or using algebraic notation:</p> <ul> <li>\\(Q = A \\bullet \\overline B \\bullet C\\)</li> </ul> <p>This expression reads: \"Q is true if A is true, B is false, and C is true\".</p> <p>(c) Logic Diagram:</p> <ul> <li>Start by drawing the inputs on the left hand side of the diagram (A, B, C), and the output (Q) on the right hand side.  </li> </ul> <p>Note</p> <p>You could use descriptive labels such as \"Motion Sensor\", \"Light Sensor\" and \"Switch\" if you prefer.</p> <p></p> <ul> <li> <p>We know that input B has to pass through a not gate, we'll add that first:</p> <p></p> </li> <li> <p>A AND NOT(B) can be added next, an AND gate is needed, the first input is A, the second input is the output from the NOT(B)</p> <p></p> </li> <li> <p>The output from this AND gate needs to be connected to the input of a second AND gate, the other input for this new gate is taken from C</p> </li> <li> <p>The output from the second AND gate is then connected to output Q</p> <p></p> </li> </ul>"},{"location":"topics/logic/05_extension.html","title":"Extension","text":""},{"location":"topics/logic/05_extension.html#extension","title":"Extension","text":"<p>Warning</p> <p>This material is not required by the GCSE.</p> <p>It can sometimes be hard to see the point of logic gates at this level.  It is true, though, that ALL operations carried out by the computer must be done by using logic gate circuits.  Even something as simple as adding two numbers together!  </p> <pre><code>x = 3 + 2\n</code></pre> <p>Such an addition looks simple enough, but under the hood this operation has to be carried out using logic gates and associated Boolean operations - known as bit-wise operations.</p> <p>This section looks at how this is done.  </p>"},{"location":"topics/logic/05_extension.html#binary-addition","title":"Binary addition","text":"<p>We'll start with two numbers we want to add, <code>A</code> and <code>B</code> in binary:</p> <ul> <li><code>A</code> (3) = <code>0011</code></li> <li><code>B</code> (2) = <code>0010</code></li> </ul>"},{"location":"topics/logic/05_extension.html#bit-wise-operations","title":"Bit-wise operations","text":"<p>We'll use the following Boolean operations:</p> <ul> <li><code>AND</code> (logical AND, denoted by <code>&amp;</code>)</li> <li><code>XOR</code> (exclusive OR, denoted by <code>^</code>)</li> <li><code>NOT</code> (logical NOT, denoted by <code>~</code>)</li> </ul>"},{"location":"topics/logic/05_extension.html#half-adder","title":"Half Adder","text":"<p>A half adder is a simple circuit that adds two single-bit numbers. When we add two binary digits together we get the following:</p> <ul> <li>0 + 0 = 0</li> <li>0 + 1 = 1</li> <li>1 + 0 = 1</li> <li>1 + 1 = 0 Carry 1</li> </ul> <p>So we need two outputs, a sum and a carry.</p> <p>We can implement a half adder using Boolean operations as follows:</p> <ul> <li><code>S</code> (sum) = <code>A</code> XOR <code>B</code> </li> <li><code>C</code> (carry) = <code>A</code> AND <code>B</code></li> </ul> <p>As a truth table this is:</p> A B S (Sum) C (Carry) 0 0 0 0 0 1 1 0 1 0 1 0 1 1 0 1 <p>In this table:</p> <ul> <li>A and B are the input bits</li> <li>S (Sum) is the output sum bit</li> <li>C (Carry) is the output carry bit</li> </ul> <p>The truth table shows that:</p> <ul> <li>When both A and B are 0, the sum is 0 and there's no carry</li> <li>When A is 0 and B is 1, the sum is 1 and there's no carry</li> <li>When A is 1 and B is 0, the sum is 1 and there's no carry</li> <li>When both A and B are 1, the sum is 0 and there's a carry of 1</li> </ul>"},{"location":"topics/logic/05_extension.html#full-adder","title":"Full Adder","text":"<p>To add together more than one binary digit we need to combine two half adders and a third input for the carry from the previous bit position.</p> <p>The step by step process is:</p> <ul> <li> <p>Add the least significant bits (LSBs) of <code>A</code> and <code>B</code> using a half adder:</p> <ul> <li><code>S0</code> = <code>A0</code> XOR <code>B0</code></li> <li><code>C0</code> = <code>A0</code> AND <code>B0</code></li> </ul> </li> <li> <p>Add the next bit positions of A and B using another half adder, considering the carry from the previous step:</p> <ul> <li><code>S1</code> = <code>A1</code> XOR <code>B1</code> XOR <code>C0</code></li> <li><code>C1</code> = (<code>A1</code> AND <code>B1</code>) OR (<code>A1</code> AND <code>C0</code>) OR (<code>B1</code> AND <code>C0</code>)</li> </ul> </li> <li> <p>Repeat step 2 for each subsequent bit position until we reach the most significant bits (MSBs).</p> </li> </ul> <p>Example: Adding 3 and 2 using Boolean Operations</p> <p>Let's add 3 and 2 using the full adder implementation:</p> <ul> <li><code>A</code> (3) = <code>0011</code> (binary) </li> <li><code>B</code> (2) = <code>0010</code> (binary)</li> </ul> <p>Add LSBs:</p> <ul> <li><code>S0</code> = <code>A0</code> XOR <code>B0</code> = <code>1</code> XOR <code>0</code> = <code>1</code></li> <li><code>C0</code> = <code>A0</code> AND <code>B0</code> = <code>1</code> AND <code>0</code> = <code>0</code></li> </ul> <p>Add next bit positions:</p> <ul> <li><code>S1</code> = <code>A1</code> XOR <code>B1</code> XOR <code>C0</code> = <code>0</code> XOR <code>1</code> XOR <code>0</code> = <code>1</code></li> <li><code>C1</code> = (<code>A1</code> AND <code>B1</code>) OR (<code>A1</code> AND <code>C0</code>) OR (<code>B1</code> AND <code>C0</code>) = (<code>0</code> AND <code>1</code>) OR (<code>0</code> AND <code>0</code>) OR (<code>1</code> AND <code>0</code>) = <code>0</code></li> <li> <p>Add next bit positions:</p> </li> <li> <p><code>S2</code> = <code>A2</code> XOR <code>B2</code> XOR <code>C1</code> = <code>0</code> XOR <code>0</code> XOR <code>0</code> = <code>0</code></p> </li> <li><code>C2</code> = (<code>A2</code> AND <code>B2</code>) OR (<code>A2</code> AND <code>C1</code>) OR (<code>B2</code> AND <code>C1</code>) = (<code>0</code> AND <code>0</code>) OR (<code>0</code> AND <code>0</code>) OR (<code>0</code> AND <code>0</code>) = <code>0</code></li> <li>The result is <code>S2 S1 S0</code> = <code>0101</code>, which represents the sum 5 in binary.</li> </ul> <p>While this process may seem cumbersome, it demonstrates how Boolean operations can be used to perform arithmetic operations like addition. In reality, digital circuits use more efficient implementations, such as carry-lookahead adders or parallel adders, to perform arithmetic operations.</p>"},{"location":"topics/logic/05_extension.html#implementation-using-python","title":"Implementation using Python","text":"<p>Implementing binary addition using Boolean operations in Python can be an interesting exercise. Here's a possible implementation:</p> <pre><code>def binary_add(A, B):\n    # Convert integers to binary strings\n    A_bin = bin(A)[2:]  # Remove '0b' prefix\n    B_bin = bin(B)[2:]  # Remove '0b' prefix\n\n    # Ensure both binary strings have the same length\n    max_len = max(len(A_bin), len(B_bin))\n    A_bin = A_bin.zfill(max_len)\n    B_bin = B_bin.zfill(max_len)\n\n    # Initialize result and carry\n    result = ''\n    carry = 0\n\n    # Iterate through each bit position\n    for i in range(max_len - 1, -1, -1):\n        # Extract current bits\n        A_bit = int(A_bin[i])\n        B_bit = int(B_bin[i])\n\n        # Calculate sum and carry using Boolean operations\n        sum_bit = (A_bit ^ B_bit) ^ carry\n        carry = (A_bit &amp; B_bit) | (A_bit &amp; carry) | (B_bit &amp; carry)\n\n        # Append sum bit to result\n        result = str(sum_bit) + result\n\n    # If there's a remaining carry, add it to the result\n    if carry:\n        result = str(carry) + result\n\n    # Convert binary result back to an integer\n    return int(result, 2)\n\n# Example usage:\nA = 3\nB = 2\nresult = binary_add(A, B)\nprint(f\"The sum of {A} and {B} is {result}\")  # Output: 5\n</code></pre> <p>This implementation uses the same principles as the step-by-step process described earlier. </p> <p>It converts the input integers to binary strings, iterates through each bit position, and uses Boolean operations to calculate the sum and carry. Finally, it converts the binary result back to an integer.</p> <p>Keep in mind that this implementation is not optimized for performance and is intended for educational purposes only. In practice, you would use Python's built-in arithmetic operators for addition, which are much faster and more efficient.</p>"},{"location":"topics/networking/index.html","title":"Computer Networks","text":""},{"location":"topics/networking/index.html#computer-networks","title":"Computer Networks","text":"<p>Slidedeck</p>"},{"location":"topics/networking/index.html#overview","title":"Overview","text":"<p>It's hard to imagine our world without networked devices today, so much of our business, social and leisure activity takes place on the network via the Internet.  We access websites for information, social media applications to keep up with friends and other news and even control devices such as the heating and lighting in our own homes.  The past 30-40 years has been the network revolution.  In this section we take the lid off networking and examine how it works.</p> <p>Topics will include:</p> <ul> <li>Definition of a computer network and their advantages and disadvantages</li> <li>Describe the three main types of network:</li> <li>Personal Area Network (PAN)</li> <li>Local Area Network (LAN)</li> <li>Wide Area Network (WAN).</li> <li>How we connect to a network using wires or via wireless technology and the advantages and disadvantages of each</li> <li>The types of cable used e.g. copper and fibre</li> <li>Describe the components used to build a network according to its layout (topology)</li> <li>The definition of a network protocol and its role in making the network happen</li> <li>Explain the purpose and use of common network protocols including:</li> <li>Describe the 4 layer TCP/IP model</li> <li>How different protocols work and operate at the different layers of the TCP/IP model</li> </ul>"},{"location":"topics/networking/01_networking.html","title":"Introduction to Networking","text":""},{"location":"topics/networking/01_networking.html#introduction-to-networking","title":"Introduction to Networking","text":"<p>Objectives</p> <ul> <li>Define a computer network</li> <li>Discuss the advantages and disadvantages of computer networks.</li> <li>Describe the main types of computer network including:</li> <li>Personal Area Network (PAN)</li> <li>Local Area Network (LAN)</li> <li>Wide Area Network (WAN)</li> <li>Define the Internet</li> <li>Describe the difference between the Internet and the World Wide Web</li> </ul> <p>The primary motivation to connecting computers together in a network is to communicate share resources.  The resources can include applications, files and hardware such as printers.  The devices on the network need to be connected using either cables or wireless technology thus enabling data to be passed from one device to another.</p> <p>Some computer networks will incorporate a server.  The server is a powerful computer that acts as a central hub for a variety of services in a network e.g. there may be an email server, a web server, a file server etc..  These may be separate devices or housed in one device depending on the network needs.  In such a set up each computer connected to a server is known as a client.</p> <p>A computer that is not connected to a network is called a standalone computer.</p> <p>Networks come in different shapes and sizes.  On a personal level we may connect bluetooth speakers or ear buds to our laptop along with our mobile phone; or we'll have a local network in our home to stream films to different devices, there'll be similar local networks operating in schools and businesses.  Finally, there is the network that covers a wide geographical area.  The largest of these we call the Internet and probably access most days but larger global organisations may run their own wide area network to enable employees in the Europe share data with other employees based, say, in the USA.</p> <p>Networking computers together comes with many advantages, but also some disadvantages.</p>"},{"location":"topics/networking/01_networking.html#advantages-of-networks","title":"Advantages of networks","text":"<p>Resource Sharing: </p> <p>It's the primary motivation behind networking devices together.  The types of resources we may want to share might include:</p> <ul> <li>Files: For example an employee, Alice, creates a document containing important project information and another employee, Bob, needs access to this document to review and make edits.  Alice saves this document in a shared folder on the Local Area Network (LAN) so that Bob can access it and make any changes.  Both Alice and bob can collaborate on the same document without physically transferring the file and changes made by one are immediately visible to the other.  </li> <li>Printers: high quality printers are an expensive item for companies/individuals to purchase.  The office has a high-quality colour printer that is shared among all employees as it can be connected to the LAN, making it accessible to all computers, any employee can send a print job the shared printer.  This is cost-effective and a good use of resources as one printer serves the entire office.</li> <li>Shared Database:  A company has a centralized database to store customer information.  The database is hosted on a server connected to the LAN.  All employees, authorized with proper permissions, can access and update customer data.  This minimises data duplication and ensures data consistency across the organization.</li> <li>Collaborative Software Tools: A company uses collaborative software for project management.  The project management tool is web-based and accessible through the LAN. Team members can simultaneously view and update project tasks, timelines, and documents thus enabling real-time collaboration and streamlining the  project management process.</li> <li>Shared Internet Connection: Often overlooked as a resource!  A home or an organisation will have a single Internet connection that needs to be distributed among multiple devices.  A router connected to the LAN distributes the Internet connection to all computers in the workplace/home.</li> </ul> <p>Communication: </p> <p>Facilitates efficient communication through email, chat, and video conferencing. Consider the scenario of an office with multiple departments, each having its own set of computers connected to a Local Area Network (LAN). Efficient communication within and between departments is crucial for the smooth operation of the organization.  Networking will enable the following functions between the various departments:</p> <ul> <li>Email Communication: Employees need to communicate with each other for project updates, announcements, and general correspondence.  the LAN is equipped with an email server enabling employees to send and receive emails their computers/smartphones connected to the LAN.</li> <li>Instant Messaging (Chat): Teams within the office need to have quick and real-time discussions.  The LAN needs to support an instant messaging application.</li> <li>Video Conferencing: Project teams, despite being in different parts of the office, need to have face-to-face meetings.  The LAN can support video conferencing tools enabling teams to meet using using webcams and microphones.</li> <li>Internal Intranet Portal: The organization needs a centralized platform for sharing important announcements, policies, and resources and the LAN can host an internal website to host these documents and other information.</li> </ul> <p>Centralized Data Management: </p> <p>Centralized control and management of data.  Consider an office where multiple teams collaborate on projects that involve sharing and managing various types of data. A centralized approach to data management ensures that information is organized, secure, and easily accessible.</p> <ul> <li>File Server for Document Storage: Various teams in the office need to store and access project documents. A dedicated file server is set up on the LAN and all project-related documents are stored in specific folders on this central file server.  This reduces unnecessary duplication and ensures uniform access to project files.  Also simplifies data backup and recovery procedures.</li> <li>Database Server for Information Storage: The organization maintains a customer database that multiple departments need to access.  As noted before, minimising data redundancy and enabling data backup and recovery procedures.</li> <li>Network-Attached Storage (NAS) for Shared Resources: Teams collaborate on projects that involve large multimedia files.  Large files, such as graphics, videos, and design files, are stored and accessed through the NAS.</li> <li>Access Control and Permissions: Different teams have varying levels of access to sensitive data.  The LAN employs access control and permissions settings so users are granted specific permissions based on their roles, ensuring data security and preventing unauthorized access to confidential information.</li> </ul>"},{"location":"topics/networking/01_networking.html#disadvantages-of-networks","title":"Disadvantages of networks:","text":"<p>Security Concerns: </p> <p>Risks of unauthorized access and data breaches.  Each of these will be covered in more detail in the section on Network Security</p> <ul> <li>Unauthorized Access to Shared Files: Unauthorized individuals can view, modify, or delete confidential files and compromise data integrity and confidentiality for an organisation.</li> <li>Malware Spread Through Network:  A virus can spread from computer to computer when connected together leading to data loss or system disruption.</li> <li>Man-in-the-Middle Attacks:  This is where an attacker intercepts communication between two users on the LAN, eavesdropping on sensitive information, compromising data privacy and potential identity theft.</li> <li>Password Sniffing:  This is where an attacker uses a network sniffer tool to capture plaintext passwords transmitted over the LAN and can then gain access to the network using that user's login information.</li> <li>Denial-of-Service (DoS) Attacks: An attacker floods the LAN with excessive traffic, overwhelming the network's capacity and causing downtime.</li> </ul> <p>Dependency: </p> <p>System failures or network issues can affect multiple users.</p> <ul> <li>Single Point of Failure:  Where a LAN relies on a single central server for critical services, should it fail all connected devices lose access to essential services with a significant interruption of business operations.</li> <li>Dependency on Internet Connectivity: The LAN relies heavily on a stable Internet connection for various tasks and can only function with a working Internet connection.</li> </ul> <p>Cost: </p> <p>Initial setup and maintenance can be expensive e.g.</p> <ul> <li>Initial Setup Costs: Implementing a LAN in an organization involves purchasing hardware, software, and hiring professionals for installation.</li> <li>Maintenance and Upkeep Expenses: Regular maintenance, updates, and troubleshooting are required to keep the LAN operational.</li> <li>Training Costs for Personnel: Employees need training to use and manage the LAN effectively.</li> <li>Cost of Security Measures: Implementing robust security measures, such as firewalls and intrusion detection systems, to protect the LAN bringing an additional financial burden to ensure the network's security.</li> <li>Scalability Costs: The organization experiences growth, and the LAN needs expansion to accommodate more users and devices.</li> <li>Unexpected Emergency Costs: Unforeseen events, such as natural disasters or cyber-attacks, result in the need for emergency responses.</li> </ul>"},{"location":"topics/networking/01_networking.html#types-of-network","title":"Types of Network","text":""},{"location":"topics/networking/01_networking.html#personal-area-network-pan","title":"Personal Area Network (PAN)","text":"<p>A Personal Area Network (PAN) is a small network for personal use connecting devices within an individual's workspace such as a smartphone, laptop, and tablet via Bluetooth.</p> <p>It is limited in both size and range and usually only used for personal devices.  A Bluetooth PAN uses radio waves  to communicate with devices and has a range of only a few metres.</p>"},{"location":"topics/networking/01_networking.html#local-area-network-lan","title":"Local Area Network (LAN)","text":"<p>A Local Area Network (LAN) connects computers and devices within a limited geographic area, like a single building, campus and domestic home.  The LAn is typically managed by a single organisation.</p>"},{"location":"topics/networking/01_networking.html#wide-area-network-wan","title":"Wide Area Network (WAN)","text":"<p>A Wide Area Network (WAN) spans a large geographic area and connects multiple LANs together, for examples, branch offices of a company.  The Internet is the ultimate Wide Area Network - a network of interconnected networks.</p>"},{"location":"topics/networking/01_networking.html#the-internet","title":"The Internet","text":"<p>The Internet is a global network of interconnected computers that communicate with each other using standardized protocols.  It enables the exchange of information, communication, and access to resources worldwide.</p> <p>The Internet is decentralized, meaning there is no single point of control that is no single entity or authority has absolute control over the entire network. Instead, the Internet consists of a vast interconnected web of networks and servers, each independently operated and managed. This decentralization contributes to the Internet's robustness. If one part of the network fails or is disrupted, data can find alternative paths to reach its destination.  Control over the Internet is distributed among various entities, including Internet service providers (ISPs), network administrators, content providers, and users. Each entity manages its own part of the network.</p> <p>Some countries seek to exert control and regulate the flow of information within their borders. This is often driven by political, cultural, or security considerations.  They may implement censorship and content filtering to control what citizens can access online. This may involve blocking specific websites, social media platforms, or content that is deemed inappropriate or politically sensitive.</p> <p>Governments can regulate ISPs to control the flow of information. This may involve requiring ISPs to comply with government directives, block specific content, or monitor user activities.  Some countries implement laws requiring Internet companies to store user data within the country's borders. This allows governments to exert more control over the data and access it when necessary. In extreme cases, governments may resort to shutting down or disrupting Internet services within their borders. This could be during times of political unrest, protests, or to control the spread of information during sensitive events.</p> <p>The difference between the world wide web and the Internet</p> <p>The Internet is the infrastructure or the physical network of computers connected globally that uses a standard protocols to facilitate communication and data transfer (TCP/IP).</p> <p>The World Wide Web (WWW) is a collection of interconnected documents and resources, accessed through the Internet, using web browsers.  Accessing these documents relies on protocols such as HTTP making it just one of many services running on the foundational network of the the Internet.</p>"},{"location":"topics/networking/01_networking.html#questions","title":"Questions","text":"1. What is the primary motivation for connecting computers in a network?To share resources such as files, printers, and databasesTo increase computer speedTo reduce electricity usageTo eliminate the need for serversThe main reason for networking computers is to share resources like files, printers, and databases.Submit 2. In a network, what is the role of a server?To connect to the InternetTo act as a powerful central hub for various servicesTo manage only security settingsTo replace all other computers in the networkA server is a powerful computer that provides various services such as email, file, and web hosting to client computers in a network.Submit 3. What is a 'standalone computer' in the context of networking?A computer that is not connected to any networkA computer that acts as a serverA computer that is part of a Local Area Network (LAN)A computer that only connects to Bluetooth devicesA standalone computer operates independently without being connected to a network.Submit 4. Which of the following is an example of resource sharing in a network?Connecting only one computer to the InternetPrinting documents from multiple devices to a shared printerUsing each computer's separate database for different tasksIsolating all computers for security reasonsResource sharing allows multiple devices to use a shared resource like a printer or file.Submit 5. What is the main difference between a Local Area Network (LAN) and a Wide Area Network (WAN)?A LAN connects personal devices within a room, while a WAN connects devices within a buildingA LAN spans a limited geographic area like a building, while a WAN covers large areas such as multiple cities or countriesA WAN only supports wireless connections, while a LAN supports wired connectionsA LAN is used exclusively at home, while a WAN is used in officesA LAN covers a small area like a building, while a WAN spans a large geographic region, such as cities or countries.Submit 6. Which of the following is a security concern in a network?Enhanced data recoveryMan-in-the-middle attacksIncreased hardware costsImproved email communicationMan-in-the-middle attacks are a type of security threat where an attacker intercepts communication between two users on a network.Submit 7. What is meant by 'dependency' in the context of networking?The reliance on a network server or Internet connection for servicesThe use of separate databases for different tasksThe redundancy of hardware in a networkThe elimination of downtime in the networkDependency refers to the reliance on network components, such as servers or Internet, which can affect users if they fail.Submit 8. Which of the following is a cost-related disadvantage of setting up a network?Increased employee productivityInitial setup costs and ongoing maintenanceUnlimited scalability at no additional costAccess to external databasesNetworks require initial investment in hardware, software, and maintenance, as well as ongoing costs for security and training.Submit 9. What is the main distinction between the Internet and the World Wide Web (WWW)?The WWW is a physical network, while the Internet is only a collection of web pagesThe Internet is the infrastructure, while the WWW is a service that uses it to access web pagesThe Internet is only accessible via a browser, while the WWW requires emailThe Internet is centralized, while the WWW is decentralizedThe Internet is the global infrastructure, and the WWW is a service that allows users to access websites using this infrastructure.Submit 10. What does it mean when we say 'The Internet is decentralized'?No single entity controls the entire InternetThe Internet is controlled by a global government bodyUsers can only access the Internet through one providerIt has limited scalability due to central controlDecentralization means the Internet is not controlled by a single entity, allowing for diverse management by ISPs and network administrators.Submit"},{"location":"topics/networking/02_wired_wireless.html","title":"Wired and Wireless Networks","text":""},{"location":"topics/networking/02_wired_wireless.html#wired-and-wireless-networks","title":"Wired and Wireless Networks","text":"<p>Objectives</p> <ul> <li>Compare technology for implementing wired and wireless networks</li> <li>Disadvantages and advantages of wired networking</li> <li>Disadvantages and advantages of wireless networking</li> <li>Cables used for wired networking including copper and fibre</li> <li>Bluetooth</li> </ul> <p>For homes and small businesses there is the choice between connecting to the local network using cables, or via radio waves wirelessly.  It was not so long ago that the only option was to use cable but that situation is rapidly changing and, certainly domestically, wireless is becoming more prevalent. Both technologies have their advantages and disadvantages and here the two are compared.</p>"},{"location":"topics/networking/02_wired_wireless.html#wired-lan","title":"Wired LAN","text":"<p>The wired LAN uses physical cables to connect devices within a network.  The predominant cable type today is Ethernet cable, typically having four pairs of twisted copper wires enclosed in a plastic sheath, known as a twisted-pair cable. The twisting of the pairs helps reduce electromagnetic interference.  The cable may be unshielded or shielded.  The shielded cable has additional protection against interference. </p> <p>The ends of Ethernet cables have connectors called RJ45 connectors, which resemble larger versions of telephone line connectors (RJ11). These connectors have eight pins that correspond to the eight wires inside the cable.</p> <p></p> <p>Ethernet cables come in different categories such as Cat5, Cat6, Cat7, and Cat8. Each category has specific specifications for data transfer speed, bandwidth, and potential interference reduction. For instance, Cat6 cables generally support higher data transfer rates compared to Cat5 cables.</p> <p>Connecting devices using Ethernet cable is well established and very reliable, unless the cable itself develops a fault.  However, you do need a lot of cable as each device needs to be connected, usually via a central hub or switch.  It can be time-consuming, and costly to run cables through walls.</p> <p>On average, a wired connection will be more reliable tha a wireless connection and offer higher bandwidth for devices on the network - it's faster with Cat6a cable delivering 10 Gbps throughput - though Wireless is improving all the time.</p>"},{"location":"topics/networking/02_wired_wireless.html#ethernet","title":"Ethernet","text":"<p>Ethernet is a widely used for connecting computers and other devices in a local area network (LAN). It is a family of networking technologies and standards defined by the IEEE (Institute of Electrical and Electronics Engineers). Ethernet uses a protocol that controls how data packets are placed on the network and how they are retrieved.</p> <p>The most common form of Ethernet is wired Ethernet, which involves the use of physical cables to connect devices. These cables typically use twisted pair wires and connectors, and the most common type of wired Ethernet is known as \"10/100/1000BASE-T,\" referring to the maximum data transfer rate in megabits per second (Mbps) supported by the network.</p> <p>Ethernet operates using a protocol called Carrier Sense Multiple Access with Collision Detection (CSMA/CD). In simpler terms, devices on an Ethernet network listen to the network to determine if it is clear before transmitting data. If multiple devices attempt to transmit data simultaneously, a collision may occur, and the devices involved use a process to resolve and retransmit the data.</p> <p>Ethernet systems split the data being transmitted into frames, similar to the packets transmitted on the Internet.  each data frame will contain the source and destination MAC addresses and other data to assist with error checking.  If an error arises a frame will be resent.</p> <p></p>"},{"location":"topics/networking/02_wired_wireless.html#wireless-lan","title":"Wireless LAN","text":"<p>A wireless network uses radio waves to transmit data between devices, intended to replace wired connections.  WiFi is a type of wireless networking that uses radio frequencies to send and receive data. WiFi allows users to connect to the Internet at high speeds without the necessity of cables. WiFi stands for \u201cwireless fidelity\u201d and is a phrase that is often used to refer to wireless networking technologies. A wireless router is used to connect to the internet. When you connect to Wi-Fi, you\u2019re connecting to a wireless router that connects your Wi-Fi-enabled devices to the Internet.</p> <p>Wireless can be used for a PAN using Bluetooth that communicates across short distances, usually no more than a few metres typically connecting desktops, laptops, smartphones, speakers etc..  Bluetooth was intended for portable devices and their applications.</p> <p>Wifi and Bluetooth are complementary, Wifi requires an access point which has responsibility for routing all traffic while Bluetooth connects two devices together with minimal configuration.</p> <p>To use a wireless network we need:</p> <ul> <li>Wireless Access Points (WAPs): A wireless transmitter that receives data from the network converting this data into radio waves which are then transmitted.  Devices on the network will then receive this signal via their Wireless Interface. Data is converted into radio frequency signals through a process called modulation. Modulation adjusts the properties of the radio waves to represent the digital information being transmitted.  A domestic router will also be functioning as a WAP.</li> <li>Wireless Network Interface Cards (NICs): These are components in devices (such as laptops, smartphones, or tablets) that enable them to communicate with the network.</li> </ul> <p>Wireless communication occurs within specific frequency bands allocated for this purpose. Wi-Fi commonly operates in the 2.4 GHz and 5 GHz bands. The choice of frequency can affect the data transfer speed and the ability to penetrate obstacles such as walls in a building Within the frequency bands will be several channels and devices communicate over these channels to avoid interference with other nearby wireless networks.</p> <p>How the communication is carried out is also governed by protocols such as the IEEE 802.11 family.  There have been several iterations of this standard and is being updated regularly.  The latest (2024) being 802.11be.</p> <p>Encryption and security protocols (e.g., WPA2, WPA3) are used to secure wireless transmissions. This helps prevent unauthorized access and protects the data being transmitted.</p>"},{"location":"topics/networking/02_wired_wireless.html#hybrid-networks","title":"Hybrid Networks","text":"<p>Most LANS today will incorporate both wired and wireless.  Where devices are rarely moved around, such as desktops, these will usually (and preferably) be wired while laptops and smartphones will use the wireless network.</p>"},{"location":"topics/networking/02_wired_wireless.html#comparing-wired-and-wireless-networks","title":"Comparing Wired and Wireless Networks","text":"Wired Wireless Speed Faster than wireless as less interference Slower than wired, susceptible to interference Cost Can be expensive as additional equipment is needed depending on local demands including switches, server cabinets, trunking for cables etc Relatively cheap but multiple WAPs may be needed depending on building size and configuration Security More secure than wireless as cables are harder to tamper with Less secure as packets can be intercepted wirelessly Range Copper cables can transmit data for up to 100m, fibre optic in excess of 100km Limited range Mobility Limited as devices are fixed to the cable connection point High mobility Reliability High availability Lower than wired Maintenance High cost to maintain (depending on size of LAN) Low cost Equipment needed Adding in Router(s), Switch(es), Hub(s) Wireless Access Point, Wireless router"},{"location":"topics/networking/02_wired_wireless.html#questions","title":"Questions","text":"1. Which of the following technologies is typically used for connecting devices in a wired local area network (LAN)?BluetoothEthernetWi-FiZigbeeEthernet is the most common technology for connecting devices in a wired LAN.Submit 2. What is the primary advantage of wired networking over wireless networking?Lower costHigher mobilityMore secure and reliableFaster installationWired networks are more secure and reliable compared to wireless due to physical connections and less interference.Submit 3. What is the purpose of twisting the copper wires in an Ethernet cable?To increase the data transfer speedTo protect the cable from physical damageTo reduce electromagnetic interferenceTo improve cable flexibilityTwisting the copper wires helps to reduce electromagnetic interference, ensuring clearer data transmission.Submit 4. In which situation would shielded Ethernet cables be preferred over unshielded cables?When connecting devices in a small home networkWhen running cables in environments with high electromagnetic interferenceWhen using Bluetooth devicesWhen setting up a wireless networkShielded Ethernet cables provide extra protection in environments with high electromagnetic interference.Submit 5. What is the function of RJ45 connectors on Ethernet cables?To secure the cable to a deviceTo convert signals between analog and digital formatsTo connect the cable to devices by using eight pins for data transmissionTo increase the bandwidth of the connectionRJ45 connectors have eight pins corresponding to the eight wires in the cable, enabling data transmission between devices.Submit 6. What distinguishes Cat6 Ethernet cables from Cat5 cables?Cat6 cables have more twisted pairsCat6 cables support higher data transfer speedsCat5 cables are shielded, while Cat6 cables are notCat5 cables are used for wireless connectionsCat6 cables are designed to support higher data transfer speeds compared to Cat5 cables.Submit 7. What is Ethernet's primary protocol for managing data transmission within a network?CSMA/CD (Carrier Sense Multiple Access with Collision Detection)TCP/IP (Transmission Control Protocol/Internet Protocol)WPA3 (Wi-Fi Protected Access 3)Bluetooth Low Energy (BLE)Ethernet uses CSMA/CD to manage data transmission, ensuring that devices avoid collisions when sending data.Submit 8. In wireless networking, what is the function of a Wireless Access Point (WAP)?To connect two Bluetooth-enabled devicesTo transmit data between wired Ethernet devicesTo convert data from the network into radio waves for wireless devicesTo provide a backup Internet connectionA WAP converts data into radio waves for wireless devices to receive, enabling wireless communication in a network.Submit 9. Which of the following is true about Bluetooth compared to Wi-Fi?Bluetooth is faster than Wi-FiBluetooth has a longer range than Wi-FiBluetooth is intended for short-range, low-power communication between devicesBluetooth requires an access point like Wi-FiBluetooth is designed for short-range communication between devices, typically within a few meters.Submit 10. What is the main reason that hybrid networks, combining both wired and wireless connections, are common in modern LANs?Wireless devices are faster than wired devicesDesktops can be wired for reliability, while mobile devices use wireless for flexibilityIt reduces the cost of setting up a networkWired networks are not secure enough for sensitive dataHybrid networks allow desktops to benefit from wired reliability, while mobile devices use wireless for flexibility and mobility.Submit"},{"location":"topics/networking/03_topologies.html","title":"Topologies","text":""},{"location":"topics/networking/03_topologies.html#topologies","title":"Topologies","text":"<p>Objectives</p> <ul> <li>Be able to define the term \"network topology\" and understand its significance in computer networks.</li> <li>Be able to describe the following common LAN topologies:<ul> <li>bus</li> <li>star</li> <li>ring</li> <li>mesh</li> </ul> </li> <li>Compare and contrast the characteristics, advantages, and disadvantages of different network topologies.</li> <li>Be able to identify and apply network topology concepts to real-world scenarios and understand the practical implications of choosing specific topologies based on requirements and constraints.</li> </ul> <p>Network topology refers to the arrangement or layout of different elements (nodes, links, etc.) in a computer network. </p> <p>The topology defines how these components are connected and how data is transmitted between them and can play a crucial role in determining the overall performance, efficiency, and reliability of a network. There are several common types of network topologies, including:</p> <ul> <li>Bus</li> <li>Star</li> <li>Ring</li> <li>Mesh</li> </ul> <p>Note</p> <p>Different GCSE exam boards require knowledge of different topologies but will be drawn from the list above</p>"},{"location":"topics/networking/03_topologies.html#bus-topology","title":"Bus Topology","text":"<p>In a bus topology, all devices share a common communication medium, typically a single communication channel or cable. Data is transmitted along the bus, and each device receives the data, but only the intended recipient processes it.</p> <p></p> <p>The bus serves as a single communication path for all devices on the network. Data transmitted by one device is accessible to all other devices connected to the bus. It as one of the implementations of an Ethernet network.  To prevent signal reflections and ensure proper functioning of the network, the bus topology requires terminators at both ends of the central bus. Terminators absorb the signal and prevent it from bouncing back and causing interference.</p> <p>Since all devices share the same communication medium, they contend for access to the bus when transmitting data.  This can lead to potential collisions if two or more devices attempt to send data simultaneously.  When a collision occurs the devices wait a random amount of time before retransmitting.  The more devices connected to the network will inevitably mean higher demand beings placed on the cable and this will impact the performance of the network.</p> <p>Each message (frame) will include the destination address for the intended recipient which picks up its message while being ignored by the other devices on the network.</p> <p>If the central bus fails or encounters a break in the cable, the entire network may be affected. Troubleshooting and locating faults in the bus can be challenging.</p> <p>The Bus topology is relatively simple to set up and is cost-effective for small to medium-sized networks. It requires less cabling compared to some other topologies, making it economical though, it is rarely used today.</p>"},{"location":"topics/networking/03_topologies.html#star-topology","title":"Star Topology","text":"<p>In a star topology, all devices are connected to a central hub or switch. The central hub manages the communication between devices, and if one device wants to communicate with another, the data passes through the hub or switch.</p> <p></p> <ul> <li> <p>In this arrangement, each device on the network has its own dedicated connection to the central point. The central hub or switch manages the communication between devices by acting as a repeater, regenerating and forwarding data to the appropriate destination.</p> </li> <li> <p>In a traditional star topology with a hub, the hub is a basic networking device that receives data from one device and broadcasts it to all other connected devices. The layout of devices may resemble a star shape but the operation of the network is more akin to a bus network, and so sometimes called a logical bus network.</p> </li> <li> <p>In modern star topologies, switches are often used instead of hubs. Switches provide more efficient and intelligent communication. Unlike hubs, switches forward data only to the specific device for which it is intended, reducing network congestion.</p> </li> <li> <p>Devices in a star topology are isolated from each other in terms of communication which enhances network security. If one device wants to communicate with another, the data travels through the central hub or switch, and there is no direct communication between devices without involving the central point.</p> </li> <li> <p>Star topologies are easily scalable. Adding or removing devices does not affect the overall network structure, as each device connects directly to the central hub or switch.</p> </li> <li> <p>The failure of one device or cable in a star topology does not necessarily affect the rest of the network. Other devices can continue to communicate without interruption thus making the star topology more reliable than a bus topology. However, if the central hub or switch fails, the entire network may be affected.</p> </li> </ul> <p>Star topologies are commonly used in local area networks (LANs) and are favored for their simplicity, ease of installation, and scalability. The shift from hubs to switches has improved the performance and efficiency of star topologies in modern networking environments.</p>"},{"location":"topics/networking/03_topologies.html#hubs-vs-switches","title":"Hubs vs Switches","text":"<p>Hubs and switches can resemble each other but internally their operation is quite different.  You can think of a switch as being an \"intelligent hub\".</p> <p>A hub relays messages received to all devices on the network; a switch will send a message to its intended recipient.</p> <p>The switch works by maintaining a table of known devices on its network i.e. those that are connected to its ports.  The table contains the MAC address of these devices so when an incoming message is received the MAC address in the message is used to identify the correct destination and it can then be transmitted through the correct port to be sent to the device with that MAC address.</p>"},{"location":"topics/networking/03_topologies.html#ring-topology","title":"Ring Topology","text":"<p>In a ring topology, each device is connected to exactly two other devices, forming a circular or ring-like structure. Data travels in one direction along the ring, passing through each device until it reaches its destination.</p> <p></p> <ul> <li> <p>Ring topologies are less common in modern networking due to the prevalence of other topologies, such as star and bus, but they still have some specific use cases.</p> </li> <li> <p>Ring topologies can be either unidirectional (clockwise or counterclockwise) or bidirectional, depending on the network design and the capabilities of the networking equipment.  Data travels along the ring from one device to the next until it reaches the intended destination. Each device in the ring regenerates and passes along the signal to the next device.</p> </li> <li> <p>Collisions are not an issue in ring topologies since data travels in a unidirectional or bidirectional manner. Unlike bus topologies, where collisions can occur when devices share a common communication medium, devices in a ring operate independently.</p> </li> <li> <p>Ring topologies can be more fault-tolerant than some other topologies. If a device or a section of the ring fails, the data can still travel in the opposite direction to reach its destination.</p> </li> <li> <p>The performance of a ring topology depends on factors such as the number of devices and the length of the ring. As the number of devices increases, the overall performance may degrade due to the increased propagation delay.</p> </li> </ul> <p>While ring topologies have advantages in terms of fault tolerance, they also have some drawbacks. For example, the failure of a single device or connection can disrupt the entire network, and the overall performance can be impacted as the network scales. Modern networking technologies often prefer other topologies like star or hybrid configurations due to their flexibility and scalability.</p> <p>In a token ring network, a special signal called the token, circulates the network. Devices can only communicate when they have the token.  Ring networks are used when guaranteed communication speeds are important. The time taken for a message to pass through the ring is consistent and reliable.</p>"},{"location":"topics/networking/03_topologies.html#mesh-topology","title":"Mesh Topology","text":"<p>In a mesh topology, every device is connected, with no hierarchy, to every other device in the network via a dedicated link. This provides multiple paths for data to travel, enhancing reliability and fault tolerance. Mesh topologies can be either full mesh (every device connected to every other) or partial mesh (only some devices are interconnected).</p> <p></p> <ul> <li> <p>In a full mesh topology, every device is directly connected to every other device in the network. This results in a high level of redundancy and multiple communication paths between any two devices.</p> </li> <li> <p>In a partial mesh topology, only some devices are directly connected to every other device. This topology provides a balance between connectivity and cost, allowing for redundancy and alternate paths without the full connectivity of a mesh.</p> </li> <li> <p>Mesh topologies offer a high degree of redundancy, meaning that if one link or device fails, alternative paths can be used for communication. This redundancy enhances network reliability and fault tolerance.</p> </li> <li> <p>Mesh topologies can be scalable, but the number of connections grows rapidly with the addition of each device. Managing a full mesh network with a large number of devices can become complex.</p> </li> <li> <p>Mesh topologies generally provide high performance due to the multiple communication paths available. However, the overhead associated with managing numerous connections may impact overall network performance.</p> </li> <li> <p>The cost of implementing a mesh topology can be significant, especially in a full mesh configuration. The number of required connections and cabling can make it more expensive compared to other topologies.</p> </li> </ul> <p>Mesh networks can be wired or wireless but the latter is becoming more common and devices are available for installation in domestic environments.</p>"},{"location":"topics/networking/03_topologies.html#selecting-the-right-topology","title":"Selecting the \"right\" topology","text":"<p>The choice of network topology will depend on multiple factors such as the size of the network, the communication requirements, cost considerations, fault tolerance, and scalability needs. Different network topologies offer different advantages and disadvantages, and understanding their practical implications is crucial for making informed decisions. When selecting a network topology for a real-world scenario, factors to consider include the number of devices, the distance between devices, the amount of data traffic, reliability requirements, ease of installation and maintenance, and scalability for future growth.</p>"},{"location":"topics/networking/03_topologies.html#examples","title":"Examples:","text":"<p>Small Office Network:</p> <p>A small office with a few computers, printers, and a central server would be advised to use a star topology due to its simplicity, ease of installation, and centralized management. A central switch can connect all devices, providing a dedicated connection for each and allowing for easy expansion.</p> <p>University Campus Network:</p> <p>A university campus with multiple buildings, departments, and thousands of users might use a combination of a backbone bus topology and a star topology. A backbone bus connects different buildings, while each building can have a star topology to connect individual departments. This setup provides scalability and fault tolerance.</p> <p>Residential Wi-Fi Network:</p> <p>A residential home with multiple floors and several family members would be best suited for a Wi-Fi mesh topology.  Mesh networks provide seamless coverage throughout the home, even in areas with weak signals. Nodes can communicate wirelessly, and self-healing capabilities ensure reliable connectivity.</p>"},{"location":"topics/networking/03_topologies.html#questions","title":"Questions","text":"1. Explain what a network topology is and provide three examples of common network topologies. Compare and contrast the characteristics of bus and star topologies.Network topology refers to how the network's physical layout looks and functions. Examples include mesh, grid, and wireless topologies.Network topology is the arrangement of computers, and examples include tree, cellular, and point-to-point.Network topology refers to the arrangement or layout of elements (nodes, links) in a computer network. Examples include bus, star, and ring topologies.Network topology is a type of routing protocol in a network, such as RIP, OSPF, or EIGRP.A network topology defines how devices are interconnected in a network. Bus topologies use a single cable shared by all devices, which can lead to collisions, while star topologies provide a dedicated connection between devices and the central hub, improving performance.Submit 2. Define a logical bus network and explain how it differs from the physical arrangement of devices in a network. Provide an example of when a logical bus might be preferred over a physical bus.A logical bus network refers to how data flows in the network, not the physical connections.A logical bus network is physically connected in a ring topology but behaves like a star topology.A logical bus is another name for a star network with switches.A logical bus network must have redundant cabling to prevent collisions.A logical bus network can occur in a star topology when a hub broadcasts data to all devices. This differs from a physical bus, where all devices share the same physical connection.Submit 3. Describe the characteristics of a star topology. Discuss the advantages and disadvantages of using a hub versus a switch in a star topology. How does a star topology differ from a logical bus?A star topology uses coaxial cables for central communication, similar to a bus network.In a star topology, all devices are connected to a central hub or switch, making it easier to add or remove devices.Star topologies only differ from logical bus networks in the way data is prioritized.In star topologies, each device is directly connected to two others in a circular manner, enhancing redundancy.A star topology offers centralized communication, but using a switch rather than a hub reduces network congestion. The logical bus describes data flow, not physical connections.Submit 4. Explain the concept of a mesh topology and its advantages. Differentiate between full mesh and partial mesh topologies. Provide examples of scenarios where a mesh topology would be beneficial.A mesh topology creates dedicated point-to-point links between only some of the devices.Full mesh connects every device to every other device, while partial mesh connects only some devices.Mesh topologies provide limited redundancy and are prone to failure.Mesh topologies are only used for small networks and are rarely scalable.Mesh topologies provide multiple communication paths, increasing reliability. Full mesh is costly but offers the highest redundancy, while partial mesh is more cost-effective for medium-scale networks.Submit 5. Describe the key features of Wi-Fi mesh networks. How does self-healing contribute to the reliability of a Wi-Fi mesh network? Provide real-world applications where Wi-Fi mesh networks are commonly used.Wi-Fi mesh networks only provide basic coverage and cannot scale to large areas.Self-healing allows the network to reroute data if a node fails, maintaining connectivity.Wi-Fi mesh networks are less reliable in large homes or office buildings.Self-healing features make Wi-Fi mesh networks slower compared to traditional networks.Self-healing ensures that if one node in a Wi-Fi mesh network fails, data can still travel through other nodes. This feature is crucial for maintaining reliable wireless coverage in large areas.Submit 6. Discuss the types of hardware used to establish connections in a mesh topology. Compare and contrast wired and wireless connections in a mesh network. Explain the role of routers and switches in a mesh topology.Routers and switches are used to manage data traffic and maintain multiple paths between devices.Wired mesh networks are cheaper than wireless mesh networks but offer more flexibility.Wireless mesh networks only work with hubs and cannot use switches.Mesh networks don't need routers or switches as data always flows directly between devices.Mesh networks rely on routers and switches for directing data. While wired mesh offers higher performance, wireless mesh is more flexible. Routers ensure data is forwarded through optimal paths for reliability.Submit 7. Explain how fault tolerance is achieved in mesh networks. Describe a situation where a mesh network's self-healing capability would be particularly advantageous.Mesh networks rely on a central hub to prevent data loss during a failure.Self-healing allows mesh networks to automatically reroute data if a node fails, ensuring reliable communication.Mesh networks don\u00e2\u20ac\u2122t provide fault tolerance unless combined with bus topology.Self-healing is only relevant to wired mesh networks, not wireless ones.Fault tolerance in mesh networks is achieved through redundancy, allowing communication to continue even if links fail. Self-healing is particularly useful in disaster recovery or emergency situations, where continuous connectivity is vital.Submit 8. Define the CSMA/CD protocol and explain its relevance in network communication. In which network topology is CSMA/CD commonly used, and why is it less relevant in other topologies?CSMA/CD is used in wireless networks to prevent interference between devices.CSMA/CD is commonly used in bus topologies, where devices share the same communication channel.CSMA/CD is primarily used in mesh networks to ensure data doesn't collide during transmission.CSMA/CD is only used in modern Ethernet networks and isn't applicable to older systems.CSMA/CD is used in Ethernet-based bus topologies to prevent data collisions when multiple devices transmit simultaneously. In topologies like star or mesh, collisions are minimized due to dedicated links.Submit 9. Discuss the scalability of a star topology. What challenges might arise as the number of devices in a star topology increases, and how can they be addressed?Star topologies can't handle more than a few devices due to the complexity of the hub.As the number of devices increases, network congestion and the load on the central hub may increase.Star topologies scale well but are prone to frequent data collisions.Star topologies are typically used for small networks and don\u00e2\u20ac\u2122t support additional devices.Star topologies are easily scalable, but as the number of devices grows, congestion may occur. Using switches instead of hubs or adding more switches can help manage increased network traffic.Submit 10. Identify specific applications or industries where mesh networks, particularly Wi-Fi mesh networks, are well-suited. Explain why these environments benefit from the characteristics of mesh topologies.Wi-Fi mesh networks are ideal for large office buildings, campuses, or public spaces like stadiums.Wi-Fi mesh networks work best in small homes and rarely support more than 10 devices.Mesh networks are only used for specialized industries and aren\u00e2\u20ac\u2122t common in public spaces.Mesh networks offer limited reliability and are prone to network outages.Mesh networks provide reliable and extensive coverage, making them suitable for large spaces like offices, campuses, and public venues. Their scalability and fault tolerance ensure uninterrupted connectivity.Submit"},{"location":"topics/networking/04_internet.html","title":"The Internet","text":""},{"location":"topics/networking/04_internet.html#the-internet","title":"The Internet","text":"<p>Objectives</p> <ul> <li>Understand the structure of the Internet</li> <li>Understand the role of packet switching and routers</li> <li>Know the main components of a packet</li> <li>Define router and gateway, where are they used</li> <li>How is routing achieved?</li> <li>Define the term URL, FQDN, domain name and IP address</li> <li>Explain services provided by an Internet service registry</li> </ul> <p>In 1961 Leonard Kleinrock wrote about the predecessor of the Internet, ARPANET.  He envisioned a global computer network consisting of interconnected networks using standard communication protocols enabling transfer of information and communication.  Kleinrock also came up with the idea of a packet-switching network which lies at the heart of the Internet.  Today the Internet is almost taken for granted and used across the planet for business, communication, leisure, shopping, social activities and so much more.  It is the largest Wide Area Network that there is.</p> <p>Note</p> <p>The Internet: The global system of interconnected computer networks that uses the Internet protocol suite (TCP/IP) to communicate between networks and devices.</p> <p>Access to the Internet is provided by Internet Service Providers (ISP), some own parts of the network, others do not.  Those that do can provide access and agreements to other ISPs, the level of that provision determines their tier:</p> <ul> <li>Tier 1: the backbone of the Internet providing traffic to other Tier 1 providers, exchanging data between continents</li> <li>Tier 2: regionally based companies and organisations connecting Tier 1 with Tier 3</li> <li>Tier 3: providing the \"last mile\" to home users and businesses</li> </ul> <p>Core to the growth in adoption of the Internet is its open architecture using a set of standard protocols (TCP/IP) , a standard data format and messaging structure (packets) combined with a uniform addressing mechanism (IP Addresses).</p>"},{"location":"topics/networking/04_internet.html#packet-switching","title":"Packet Switching","text":"<p>There are two methods used to connect communicating devices:</p> <ul> <li>circuit switching, and</li> <li>packet switching</li> </ul> <p>Circuit switching was designed for voice communication and creates a physical path between the two hosts.  Think of using a land line phone to make a call, once the connection is formed it remains connected until the call is ended.</p> <p></p> <p>Circuit switching is not suitable for data as the data is transmitted in spurts and the line would be idle for a lot of the time wasting bandwidth.  For data, packet switching was designed.</p> <p>Packet switching does not provide a fixed connection between two end points, it is connectionless.  Before the message is transmitted it is split into smaller chunks, packets, and each is routed one by one from the source to the destination via the network of routers.</p> <p></p> <p>The path each packet takes is determined by a router.  Each packet from the same message might take a different route, the next step in that route determined by the router using the address information in the packet passing it on to the next router in the network. Should a packet not arrive it can be resent.</p> <p>The hosts at the source and destination control the process of transfer and communication with the Internet managing the routing of the packet.</p> <p>Checking the route</p> <p>You can trace the route being taken by packets from your device to a selected destination by using the <code>tracert</code> command from the command prompt in Windows::</p> <pre><code>$ tracert www.google.com\nTracing route to www.google.com [216.58.204.228]\nover a maximum of 30 hops:\n\n  1     2 ms     1 ms     1 ms  ZyXEL.Home [192.168.1.1]\n  2     7 ms     7 ms     6 ms  172.16.15.61\n  3    12 ms    13 ms    12 ms  133.hiper04.sheff.dial.plus.net.uk [195.166.143.133]\n  4    11 ms    11 ms    12 ms  132.hiper04.sheff.dial.plus.net.uk [195.166.143.132]\n  5    14 ms    11 ms    10 ms  195.99.125.140\n  6    12 ms    14 ms    11 ms  194.72.16.72\n  7    13 ms    11 ms    11 ms  109.159.253.3\n  8    15 ms    14 ms    14 ms  216.239.40.87\n  9    14 ms    14 ms    12 ms  172.253.71.201\n 10    14 ms    14 ms    14 ms  par21s06-in-f228.1e100.net [216.58.204.228]\n</code></pre> <p>Note</p> <p>Repeat the command and see if the route taken is the same or different.</p>"},{"location":"topics/networking/04_internet.html#whats-in-a-packet","title":"What's in a packet?","text":"<p>The packet is the unit of communication in the network.  It will contain control information and the message itself (the payload).  The control information, usually stored in the packet header or packet trailer, will include, e.g.</p> <ul> <li>address information: to route the packet through the network both the source address of the sending host and destination addresses of the receiving host are required, also in the address will be the port to identify the application sending the packet e.g. web browser connects to a web server on port 80; an email client will connect to an email server on its own port etc..</li> <li>sequencing information: packets may arrive at their destination out of order, so the receiver needs to rebuild the original message from these packets using the sequencing data</li> <li>acknowledgment number: if acknowledgment is required (protocol dependent) used to confirm successful receipt.</li> <li>error detection/correction: performed at various times through the protocol stack and the packet may contain a checksum, parity bits or cyclic redundancy checks to detect errors in the payload during transmission.  Checksums are recalculated by the receiver and either corrected or discarded.</li> <li>hop limit or time to live: in case the packet gets caught in a closed loop, this value counts down and if zero is reached the packet is discarded</li> <li>payload: the message/data itself, variable length up to a maximum determined by the protocol (see later) being used</li> </ul>"},{"location":"topics/networking/04_internet.html#ip-addresses","title":"IP Addresses","text":"<p>Every computer connected to the Internet is allocated a unique address, an IP address (Internet Protocol).  Its a 32-bit (IPv4) or 128-bit (IPv6) number usually expressed in dotted quad notation i.e. 192.168.1.1, 216.58.210.195 where each part is an 8-bit number.</p> <p>You can obtain information about your network and IP configuration by using the commands <code>ipconfig</code> in Windows (or <code>ifconfig</code> in Linux):</p> <pre><code>$ ipconfig\nenp3s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.1.11  netmask 255.255.255.0  broadcast 192.168.1.255\n        inet6 fe80::b738:3e6d:499b:7355  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 10:78:d2:a0:d4:5a  txqueuelen 1000  (Ethernet)\n        RX packets 41413  bytes 44775166 (44.7 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 24078  bytes 3004699 (3.0 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 8552  bytes 581418 (581.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 8552  bytes 581418 (581.4 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <p>Public and private IP addresses</p> <p>Using 32 bits for an IP address provides for some 4 billion possible addresses (4,228,250,625 to be precise).  This would have to include all addresses for both public and private use and thus, by implication, all IP addresses would be public.  </p> <p>Some addresses are also reserved as private addresses.  These enable network administrators to extend their local network.  A network might have one public IP address that all traffic on the Internet can connect with and then hundreds (even thousands) of hosts inside the organisation subnet.</p> <p>There are three blocks:</p> Address space Range Total addresses 10.0.0.0/8 10.0.0.1 - 10.255.255.255 16,777,216 172.16.0.0/12 172.16.0.1 - 172.31.255.254 1,048,576 192.168.0.0/16 192.168.0.1 - 192.168.255.254 65,536 <p>Inside the local network packets can be transmitted and received but they cannot be routed on the Internet and will be rejected i.e. they are non-routable.</p> <p>Use Python to get your IP address</p> <p>The <code>socket</code> library can be used to get information about your client, e.g.</p> <pre><code>import socket\nhost_name = socket.gethostname()\nip_address = socket.gethostbyname(host_name)\nprint(\"Host Name is:\" + h_name)\nprint(\"Computer IP Address is:\" + ip_address)\n</code></pre>"},{"location":"topics/networking/04_internet.html#domain-name-service","title":"Domain Name Service","text":"<p>Such numbers are not easy to remember so a naming system was introduced:  Domain Name System (DNS).  The main function of DNS is to translate easier to remember domain names such as bbc.co.uk into their IP address.  Think of it like a phone book for the Internet.  It is a distributed database which keeps track of domain names and their associated IP addresses.  There is not one database but several and they are organised into hierarchies best visualised as a tree structure.  The path through this tree is shown through the full stops in the domain name.</p> <p>At the top level, the last part of the URL will be e.g. .com, .gov, .mil, .uk</p> Top level domain Description .com Commercial .gov US governmental organisations .org Organisation .uk United Kingdom, country specific <p>These may then be chained with second level domains to give further information e.g.</p> <ul> <li><code>bbc.co.uk</code> - commercial organisation in the uk called bbc</li> <li><code>tfl.gov.uk</code> - a uk based government organisation called tfl</li> </ul> <p>Thus, the domain name is e.g. <code>bbc.co.uk</code>, no <code>www</code>.  The domain name can be qualified to identify a specific host (computer) in the domain such as <code>wwww.bbc.co.uk</code> for the web server, or <code>mail.bbc.co.uk</code> for a mail server.  These are Fully Qualified Domain Names (FQDN).</p> <p>Finding an IP address using Python</p> <p>The <code>socket</code> library used earlier can also be used to find the IP address for a domain which, under the hood, is making a DNS request:</p> <pre><code>import socket\n\ndef get_ip_by_hostname(hostname):\n    try:\n        # Get the IP address associated with the given hostname\n        ip_address = socket.gethostbyname(hostname)\n        return ip_address\n    except socket.gaierror as e:\n        print(f\"Error resolving hostname: {e}\")\n        return None\n\n# Replace 'bbc.co.uk' with the desired domain name\nhostname = 'bbc.co.uk'\n\n# Call the function to get the IP address by hostname\nip_address = get_ip_by_hostname(hostname)\n\nif ip_address:\n    print(f\"The IP address of {hostname} is: {ip_address}\")\nelse:\n    print(f\"Unable to resolve IP address for {hostname}\")\n</code></pre> <p>Note</p> <p>If you wish to explore this further there's a good explanatory video here: https://www.youtube.com/watch?v=72snZctFFtA&amp;feature=youtu.be</p>"},{"location":"topics/networking/04_internet.html#internet-registries","title":"Internet registries","text":"<p>Domain names and associated IP addresses need to be registered before they can be used.  This is the responsibility of an internet registry.  Ultimately they are managed by IANA and the Internet Corporation of Assigned Names and Numbers (ICANN). ICANN is the senior organisation coordinating the databases of Internet names, with IANA distributes numbers regionally.  Each region maintains its own Regional Internet Registry (RIR) that allocates IP addresses and domain names in its own region.  Beneath the RIRs sit the Local Internet Registries (LIR) authorised by its RIR to distribute (sell) numbers to businesses and organisations in their locality.</p> <p>In the UK Nominet hold the official registry of all .UK based domain names.  They provide a lookup service:  www.nominet.uk/lookup.  This can be used to look up domains and check availability.</p> <p>For example, entering <code>shumphreys.co.uk</code> tells me it is already registered but if I wanted a domain name with my own name, for say running this website, there are others available e.g. <code>shumphreys.me.uk</code>, or <code>shumphreys.uk</code>.  I could then apply to a company assigned to release domains to own that domain name for a period of time in return for payment.  They need to know the IP address allocated to me by my ISP and these will then be logged and searchable through DNS.</p>"},{"location":"topics/networking/04_internet.html#questions","title":"Questions","text":"1. What is the main function of the Internet?To connect two Bluetooth devicesTo enable the global system of interconnected computer networksTo provide a backup storage system for filesTo transmit data only within private networksThe Internet is the global system of interconnected computer networks that uses the Internet protocol suite (TCP/IP) to communicate between networks and devices.Submit 2. Which of the following describes Tier 1 ISPs?They provide the 'last mile' connection to home usersThey are regionally based companies connecting Tier 2 with Tier 3They form the backbone of the Internet and exchange data between continentsThey are responsible for maintaining domain name registriesTier 1 ISPs form the backbone of the Internet, providing traffic and exchanging data between continents.Submit 3. What is packet switching?A method that establishes a fixed connection between two devicesA connectionless method where messages are broken into smaller packets that are routed individuallyA process of reserving a dedicated path for each communicationA method of sending packets directly to their destination without routingPacket switching is a connectionless method where messages are split into smaller packets, each routed individually through the network.Submit 4. What is the role of a router in packet switching?It creates a fixed physical path for data to travelIt prevents packets from reaching their destinationIt determines the next step in the route for each packet based on address informationIt converts data into radio waves for wireless transmissionA router determines the next step in the route for each packet based on the address information and passes it to the next router in the network.Submit 5. Which command can be used to trace the route of packets to a destination in Windows?ipconfigpingtracertrouteThe 'tracert' command is used to trace the route packets take to a destination, showing the hops along the way.Submit 6. What is the main purpose of the control information in a network packet?To carry the payload or data being sentTo route the packet through the network and ensure error correctionTo store the message for future transmissionTo encrypt the data for securityThe control information in a packet, stored in the header or trailer, is responsible for routing, error detection, sequencing, and other tasks.Submit 7. Which of the following is true about private IP addresses?They are routable on the InternetThey are reserved for use within local networksThey can be used by any device on the InternetThey are used only by Tier 1 ISPsPrivate IP addresses are reserved for use within local networks and are not routable on the Internet.Submit 8. What does the Domain Name System (DNS) do?It manages domain name registrations and ownershipIt converts domain names into IP addresses to facilitate network communicationIt monitors Internet traffic for malicious activityIt controls the routing of packets across networksThe Domain Name System (DNS) translates domain names into IP addresses, making it easier for users to access websites and resources on the Internet.Submit 9. What is an example of a Fully Qualified Domain Name (FQDN)?192.168.1.1mail.google.comlocalhostHTTPA Fully Qualified Domain Name (FQDN) identifies a specific host within a domain, like 'mail.google.com'.Submit 10. Who is responsible for coordinating the global assignment of domain names and IP addresses?Tier 1 ISPsICANN and IANARegional Internet Registries (RIR)Domain Name System (DNS)ICANN and IANA are responsible for coordinating the global assignment of domain names and IP addresses.Submit"},{"location":"topics/networking/05_protocols.html","title":"Protocols","text":""},{"location":"topics/networking/05_protocols.html#protocols","title":"Protocols","text":"<p>Objectives</p> <ul> <li>Define the term network protocol</li> <li>Explain the purpose and use of common network protocols including:<ul> <li>Ethernet</li> <li>Wi-Fi</li> <li>TCP (Transmission Control Protocol)</li> <li>UDP (User Datagram Protocol)</li> <li>IP (Internet Protocol)</li> <li>HTTP (Hypertext Transfer Protocol)</li> <li>HTTPS (Hypertext Transfer Protocol Secure)</li> <li>FTP (File Transfer Protocol)</li> <li>SMTP (Simple Mail Transfer Protocol)</li> <li>IMAP (Internet Message Access Protocol)</li> </ul> </li> <li>Describe the 4 layer TCP/IP model</li> <li>Understand that the HTTP, HTTPS, SMTP, IMAP and FTP protocols operate at the application layer</li> <li>Understand that the TCP and UDP protocols operate at the transport layer</li> <li>Understand that the IP protocol operates at the internet layer</li> </ul> <p>A protocol, in the context of computer science and networking, is a set of rules and conventions that govern how data is transmitted and received between devices or systems. These rules define the format, sequencing, error checking, and communication behavior that devices must follow to exchange information successfully. Protocols are essential for ensuring standardized and efficient communication in various computing environments.</p> <p>There are various types of protocols, each serving specific purposes. Some common examples include:</p> <ul> <li>Communication Protocols: e.g. Transmission Control Protocol (TCP): A connection-oriented protocol that provides reliable, ordered, and error-checked delivery of data over a network and User Datagram Protocol (UDP): A connectionless protocol that delivers data without guarantees regarding reliability or order.</li> <li>Internet Protocols: e.g. Internet Protocol (IP): The fundamental protocol that provides the addressing and routing mechanisms for data transmission across networks.</li> <li>Application Layer Protocols: e.g. Hypertext Transfer Protocol (HTTP): Used for transferring hypertext documents on the World Wide Web; File Transfer Protocol (FTP): Facilitates the transfer of files between computers on a network; Simple Mail Transfer Protocol (SMTP): Manages the sending of emails.</li> <li>Network Security Protocols: e.g. Secure Socket Layer (SSL) and its successor Transport Layer Security (TLS): to provide secure communication over a computer network.</li> <li>Data Link Layer Protocols:  e.g. Ethernet: A widely used protocol for local area networks (LANs).</li> </ul> <p>Protocols enable connections between different hardware and software systems by ensuring that devices adhere to the same rules when communicating. They play a crucial role in the functioning of the internet and computer networks, allowing devices from different manufacturers to communicate effectively.</p>"},{"location":"topics/networking/05_protocols.html#tcpip","title":"TCP/IP","text":"<p>The Transmission Control Protocol/Internet Protocol is the set of rules ensuring communication for devices on the Internet.  It determines how data should be packaged, transmitted and received as well as how the data makes its way to its destination.  The term protocol means, variously, a code of conduct or the etiquette observed by foreign diplomats and in these senses a protocol sets out the way things are to be done and how the business of communication should be carried out.  It's like the following figure:</p> <p></p> <p>The two diplomats are communicating but only virtually.  They're handing over information to their interpreters who then use a physical medium to communicate. There are three layers here but the only real communication is between the diplomat and their interpreter.</p> <p>So, with networking protocols, though there may be more layers, there's a way the transaction should be carried out.  As long as all devices on the network conform to these protocols safe and effective communication can take place.</p> <p>TCP/IP was designed in the 1970s by Vint Cerf and Bob Kahn, the so-called fathers of the Internet.  They set out a number of goals for the protocol:</p> <ul> <li>Network connectivity: any network can connect to any other network via a gateway or router</li> <li>Distribution: there would be no central network administration or control</li> <li>Error recovery: lost packets of data would be retransmitted</li> </ul> <p>Today practically all consumer-targeted operating systems include TCP/IP as standard.</p> <p>Note</p> <p>TCP/IP is a classic example of computational thinking in that the problem of implementing transfer of data between networks is decomposed into other smaller problems (the layers) and the complexities of the underlying network are hidden from the applications using them (a form of abstraction).</p> <p>TCP/IP is not one protocol but many, it is a protocol suite of which TCP and IP were the first to be developed hence the name.  New protocols were added to the suite over time as demand and technology changed.</p>"},{"location":"topics/networking/05_protocols.html#the-layers-of-tcpip","title":"The layers of TCP/IP","text":"<p>Fundamentally, TCP/IP is a conceptually layered protocol, originally specifying four layers:</p> <ul> <li>Application layer</li> <li>Transport layer</li> <li>Network layer (or Internet layer)</li> <li>Link layer (or Network Access/Interface layer)</li> </ul> <p>Latterly the Link layer has been split into two, Data Link and Physical, due to the growth of alternative physical connection media but the AQA syllabus refers to the four as in the following figure:</p> <p></p> <p>TCP/IP is implemented in separate software modules where each has a different responsibility.  Applications will communicate with the protocol stack via an Application Programming Interface (API), the Socket API.  (NB.  A socket is the IP address and port combined e.g. 212.53.71.20:80).</p> <p>It is useful to conceptually organise the four layers into two groups:</p> <ul> <li>The top two are concerned with the application and processes </li> <li>The lower two with the transfer of data on the network itself</li> </ul> <p>Logically each layer talks to the corresponding layer on the other side:</p> <p></p>"},{"location":"topics/networking/05_protocols.html#application-layer","title":"Application layer","text":"<p>At this layer the applications being used i.e. web browser, email client etc connect to the protocol stack.  This layer defines how the application will use the network.  Sitting in the application layer are a number of application protocols.  For example, DNS, Hypertext Transfer Protocol (HTTP), Secure Shell (SSH), File Transfer Protocol (FTP), Simple Mail TRansfer Protocol (SMTP) etc..</p> <p>The application layer defines how the user application processes, (i.e. programs running on the computers, the clients and the servers), pass messages to each other.  Each of these protocols will define:</p> <ul> <li>type of message e.g. requests, responses</li> <li>syntax of the message e.g. fields in the message and how separated</li> <li>semantics of the fields i.e. what do the fields mean</li> <li>rules for determining when and how a process sends a message and how/when to respond</li> </ul> <p>Just a few of these protocols that exist in this layer are:</p> Application Type Application-layer protocol Transport Protocol Electronic Mail Send: Simple Mail Transfer Protocol SMTP (RFC821) TCP 25 Receive: Post Office Protocol v3 POP3 (RFC1939) TCP 110 World Wide Web Hypertext Transfer Protocol 1.1 HTTP (RFC2068) TCP 80 File Transfer File Transfer Protocol FTP (RFC959) TCP 21 Remote File Server Network File System NFS UDP or TCP etc .. <p>We'll look in more detail at some of these later.</p>"},{"location":"topics/networking/05_protocols.html#transport-layer","title":"Transport layer","text":"<p>TCP lives at the transport layer, along with another protocol UDP.</p> <p>When the application layer gets the data it communicates to the transport layer through the assigned port (see table above).  Each port is assigned to a different protocol in the transport layer so that TCP knows where the data is coming from e.g. web browser data will go through port 80.</p> <p>The transport layer will divide the data into small chunks (packets) and adds a header to the message containing the port.  The client request will have, say, port 7268, as the source and 80 for the destination (for an HTTP request).  When the server responds the source port will be 80 and the destination 7268.   This use of ports allows multiple sessions to take place at once i.e. multiple tabs in the browser.</p> <p>The transport layer will also add sequencing information, enabling the destination to sort them into the correct order on arrival before passing the message on to the network layer.</p> <p>Note</p> <p>This layer is called the transport layer - it adds the port information.</p> <p>Transport Layer Protocols</p> <p>There are two main protocols used here:</p> <ul> <li>Transmission Control Protocol (TCP) - a connection-oriented service where the sender's TCP divides the message into chunks adding a sequence number.  The receiver will reorder the chunks and send an acknowledgment for safe receipt.  TCP will also manage flow control.</li> <li>User Datagram Protocol (UDP) -  a simple unreliable, connectionless, unacknowledged service for applications not requiring sequencing, error or flow control. Used for connections where speed of delivery is important.</li> </ul>"},{"location":"topics/networking/05_protocols.html#network-or-internet-layer","title":"Network, or Internet, layer","text":"<p>The Internet layer is responsible for transferring the data between source and destination computers, accepting data from the transport layer then passing on to the link layer.  Its main functions are:</p> <ul> <li>transmit data to the link layer</li> <li>routing the data</li> </ul> <p>Irrespective of the application layer protocol (HTTP, FTP etc) and the transport layer protocol being used it has to pass through the Internet protocol as the only protocol used for routing data packets through the network.</p> <p>The protocols in this layer include:</p> <ul> <li>Internet Protocol (IP)</li> <li>Internet Control Message Protocol (ICMP)</li> <li>Address Resolution Protocol (ARP) and Reverse Address Protocol (RARP)</li> </ul> <p>It is at this layer when the source and destination IP addresses are added to the packet.</p>"},{"location":"topics/networking/05_protocols.html#link-layer","title":"Link layer","text":"<p>Finally, the link layer handles MAC addressing and converting the data into electrical signals for transmission.  This layer handles the physical details of interfacing with the connection media.  MAC addresses, added to the header of the data, now called a frame.</p> <p>The MAC address physically identifies, with a unique address, the actual device and are written as six groups of two hexadecimal digits separate by colons.</p> <p>If two hosts are in same network then delivery is simple. If devices are in different networks a router is needed when the destination address will be the MAC address of the router itself which will get rewritten as it passes from router to router</p> <p>Protocols used at this layer will be dependent on the connection media being used e.g. Ethernet, Wireless.  </p>"},{"location":"topics/networking/05_protocols.html#standard-application-layer-protocols","title":"Standard application layer protocols","text":"<p>As we now dig into how some of the application layer protocols work the principles outlined above should not be forgotten.  Ultimately each will be making a request of a server to return data to the client, the request is organised into a packet, transferred to a number of routers and on arrival the request is dealt with and the data returned back to the client.  The port used by the application is essential in determining how the packet is processed on arrival triggering the specific protocol to be used.</p> <p>File Transfer Protocol (FTP)</p> <p>As the name suggests FTP is used for transferring files.  Two ports are used, port 20 for FTP commands and port 21 for the file data though the initial connection will be to port 21.</p> <p>The client sends the request to create a TCP connection from a random (unprivileged) port to the server listening on port 21.  The server will respond with a control code e.g. \"200 OK\" indicating success.  Once established a number of commands can be used to browse directories (<code>ls</code> to list directories, <code>cd</code> to change directory, <code>get</code> to download or <code>put</code> to  upload files etc..</p> <p>FTP does not encrypt usernames or passwords, or its data and thus can be intercepted.  This is common for many of the application level protocols developed before TLS or SSL therefore it's advised to used secure versions of the protocol (FTPS) or better still connect to the remote server via SSH.</p> <p>Most modern web browsers will include FTP functionality.</p> <p>Hypertext Transfer Protocol (HTTP)</p> <p>HTTP, using port 80, is the foundation for data communication and transfer using the World Wide Web.  Again the client will send a request to a server, port 80 for HTTP web servers, and the server will respond to that request.  The final data may be in a number of forms but most commonly as HTML, though other data may be transferred including image and audio files etc..</p> <p>The web browser will:</p> <ul> <li>extract the FQDN from the URL entered by the user and perform a DNS lookup request to get the IP address</li> <li>send a <code>GET</code> request to the server for the requested resource</li> <li>the server will send the resource to the client</li> <li>the browser renders the file using any accompanying style and structure information (e.g. CSS)</li> <li>if the requested resource contains other references e.g. to image files then additional GET requests will be made</li> </ul> <p>Other types of request are available e.g. <code>POST</code> where a user is sending data e.g. website login information, <code>HEAD</code> to get such the header (metadata) from the resource without the body.</p> <p>HTTP is not encrypted, thus HTTPS is recommended.</p> <p>Hypertext Transfer Protocol Secure (HTTPS)</p> <p>HTTPS uses port 443 and encrypts data using either Transport Layer Security (TLS) or Secure Sockets Layer (SSL).  It serves to authenticate the website being access, using digital certificates, and encryption of the data being transferred.</p> <p>Post Office Protocol (POP3) and Simple Mail Transfer Protocol (SMTP)</p> <p>Bundled together these protocols deal with email communication and transfer.</p> <p>SMTP is used to send email messages.  Recipients of messages are specified then transferred to the email server listening on port 25.  To access an email the client needs to use POP3 which uses port 110.  The message is held by the server until the client requests it to be downloaded to their computer.  NB.  There are alternative protocols that can be used, and are probably preferable including Internet Message Access Protocol (IMAP) which allows users to view and manipulate email messages on the server as though they were on the client's own computer.</p> <p>Email messages are sent without encryption but each of the protocols permit using SSL or TLS where different ports will be used.</p> <p>Dynamic Host Configuration Protocol (DHCP)</p> <p>The Dynamic Host Control Protocol (DHCP) is a network management protocol where a DHCP server can automatically allocate IP addresses to hosts on its network.  Without DHCP the network administrator would need to manually set the IP address of each device on their network (a static IP address).  Most domestic routers will also act as a DHCP server though addresses can be statically assigned as well and ISPs will also auto-allocate IP addresses from a known pool of available addresses leased to them for their customers.</p> <p>The DHCP server makes it much easier to add devices to a network.  It's not just the IP address that needs to be assigned.  Any device joining the network also needs to be assigned the subnet mask, the address of a DNS Server and the default gateway (the first-hop router).  Also, no two devices on the same network can have the same IP address so they'll need to ensure they do not duplicate.  The DHCP server removes all these issues.</p>"},{"location":"topics/networking/05_protocols.html#client-server-model","title":"Client server model","text":"<p>Throughout this unit the terms client and server have been used a great deal, it's one of the principles behind the working of the Internet. The server application listens for requests from clients which make requests to the server for the resources it is providing.  For example, the client is a user running a web browser application who makes  request to a remote web server for a particular page or resource using the URL.  The web server receives the request and responds by returning the requested resource to the client, or it may reject the request and inform the client of the reason.</p> <p></p> <p>Typically, servers will be identified by the type of service they provide e.g. Web server serving web pages, Email servers serving email messages, DHCP server providing a DHCP service etc..  The server will be running all the time and can respond to requests from multiple clients at the same time.</p> <p>It's a good example of abstraction in that the client does not need to know how the server is performing its task, it only needs to know the format of the response so it can process it appropriately.  The server and the client are separate independent programs. Each can be developed independently of the other, code on the client side can be changed without affecting the operation of the server and vice versa.  So, one can change the user interface and/or internal processing of the data but when it comes to needing to pass messages between the client and the server though they need to ensure the messages are in the form both can recognise.</p>"},{"location":"topics/networking/05_protocols.html#questions","title":"Questions","text":"1. Define the term 'network protocol' and provide an example.A network protocol is a set of rules that define how data is exchanged over a network; for example, HTTP.A network protocol is a piece of hardware that connects devices; for example, Ethernet cables.A network protocol is software that blocks unauthorized network access; for example, firewalls.A network protocol is a program for managing files on a computer network; for example, FTP.A network protocol defines the rules for data exchange between devices. HTTP, for example, is a protocol used for transferring hypertext on the web.Submit 2. What is the main difference between TCP (Transmission Control Protocol) and UDP (User Datagram Protocol)?TCP is faster but less reliable than UDP.TCP is connectionless, while UDP requires a connection.TCP ensures data is received in the correct order, while UDP does not guarantee order or reliability.UDP is more commonly used for web browsing, while TCP is used for video streaming.TCP guarantees the correct ordering and reliable delivery of data, while UDP is faster but does not provide guarantees for order or reliability.Submit 3. Which of the following best describes the 4-layer TCP/IP model?Application, Network, Transport, LinkApplication, Transport, Internet, LinkPhysical, Data Link, Network, ApplicationSession, Presentation, Transport, NetworkThe TCP/IP model consists of four layers: Application, Transport, Internet, and Link, each with its specific functions in data transmission.Submit 4. Which of the following are application layer protocols in the TCP/IP model?TCP, UDP, IPHTTP, FTP, SMTPEthernet, Wi-Fi, TCPIP, ICMP, ARPHTTP, FTP, and SMTP are all application layer protocols that manage specific tasks like web browsing, file transfers, and email communication.Submit 5. Which of the following is NOT a responsibility of the transport layer?Sequencing and reassembling data packetsAddressing physical hardware devicesEnsuring reliable data transmissionManaging the flow of data between devicesThe transport layer handles reliable data transmission and packet sequencing, but addressing physical hardware devices is handled by the link layer.Submit 6. Which protocols operate at the Internet layer of the TCP/IP model?HTTP, FTP, SMTPTCP, UDPIP, ICMP, ARPEthernet, Wi-FiIP, ICMP, and ARP are protocols that operate at the Internet layer, which is responsible for routing and transferring data between devices.Submit 7. What is the role of the Link Layer in networking?It routes data between networks.It converts data into signals and handles MAC addressing.It ensures data is transferred in the correct order.It manages web requests and email transfers.The Link Layer handles MAC addressing, converts data into signals for physical transmission, and ensures proper delivery across the network medium.Submit 8. What is the purpose of using ports in the transport layer?To identify different processes and manage multiple connections simultaneously.To convert data into physical signals for transmission.To encrypt data and ensure secure communication.To identify different types of hardware on the network.Ports allow the transport layer to manage multiple processes simultaneously, ensuring the correct delivery of data to the intended application.Submit 9. How does the FTP (File Transfer Protocol) function in a client-server model?The server sends a request to download files from the client using port 110.The client connects to the server over port 21 to upload or download files.The client and server communicate over port 80 to request and display files.FTP encrypts all communications between the client and server for secure transfer.FTP uses port 21 to establish a connection between a client and server, allowing file uploads or downloads over the network.Submit 10. Which statement best describes the client-server model in networking?In the client-server model, the server requests data from multiple clients.Clients send requests to the server, which processes them and returns data or resources.Servers actively manage data transfers between clients in peer-to-peer networks.Clients and servers exchange data without any established protocol.In the client-server model, the client sends requests to the server, which processes and responds with the requested data or service.Submit"},{"location":"topics/programming/index.html","title":"Programming","text":""},{"location":"topics/programming/index.html#programming","title":"Programming","text":"<p>Slide deck</p>"},{"location":"topics/programming/index.html#overview","title":"Overview","text":"<p>In this section we'll be looking at the principles and concepts of programming in general.  There is a very full section on Programming with Python which focuses on the syntax of the Python programming language and how that language can be used to solve problems programmatically.  The material covered here will/should be applicable to all other procedural programming languages.</p> <p>All examples and code snippets will be expressed using pseudocode rather than Python and most of these fundamental concepts will be covered here by was of revision except where Python may do things a little differently, but there will, inevitably be some repetition.  Studying this material in association with that of the Python topic is advised.</p> <p>Each of the exam boards express their algorithm using their own version of pseudocode, and this topic explores the difference between them.</p> <p>In addition to the syntax and concepts we will also consider some good habits to develop when programming, including:</p> <ul> <li>Designing robust programs</li> <li>Dealing with errors</li> <li>Aspects of Integrated Development Environments</li> <li>Process of compilation and interpreters</li> </ul>"},{"location":"topics/programming/01_variables_types_and_strings.html","title":"Variables, Types and Strings","text":""},{"location":"topics/programming/01_variables_types_and_strings.html#variables-types-and-strings","title":"Variables, Types and Strings","text":"<p>We will already be familiar with the concept of a variable (see: Variables in Python).  It is It is a container, or a label, used to store data in our programs.</p> <p>Examples of variables might include:</p> <ul> <li>age = 42</li> <li>answer = 'Y'</li> <li>full_name = 'Harry Jones'</li> <li>is_over_age = True</li> <li>area_of_circle = 3.142 * radius^2</li> </ul> <p>A variable consists of an identifier, it's name and can be assigned a value.  This value might change during the course of the program.</p> <p>AQA Pseudocode</p> <pre><code>a &lt;- 3\nb &lt;- 'Hello'\n</code></pre> <p>Note</p> <p>For assignment AQA uses the backward pointing arrow - it's a sensible choice</p> <p>OCR Pseudocode</p> <pre><code>a = '3'\nb = 'Hello'\n</code></pre>"},{"location":"topics/programming/01_variables_types_and_strings.html#data-types","title":"Data Types","text":"<p>All programming languages need to handle data, and that data can take different forms.  Consider the examples above.  What type of data is being assigned to each of these variables?  Is it numeric?  Is it text?  If it's a number, is it a whole number of a number with a fractional part?</p> <p>Every item of data needs to be stored in the computer's memory.  How much memory is going to allocated to each of these variables?  How does the operating system determine this and set aside the right amount of memory?</p> <p>The answers here may depend on whether we are programming using a statically-typed language or dynamically-typed language.  The different between these:</p> <ul> <li>Statically-typed: The amount of memory will be known when the code is compiled into an executable</li> <li>Dynamically-typed: The amount of memory will be allocated while the program is running</li> </ul> <p>For statically typed languages the amount of memory is effectively built-in and we, the programmer, cannot change it.  A typical summary is shown in the following table:</p> Data Type Expected Type of Data Typical amount of memory Example integer Whole number, positive or negative 4 bytes 42, -89, 0 float/real Number with a fractional part 8 bytes 3.142, -89.7 char Individual character 1 byte 'a', '9', 'Z', ';' string Zero or more characters 1 byte per character in the string 'John', '1234' boolean True or False 1 byte True, False <p>Note</p> <p>Different languages might be set up to use different amounts of memory</p> <p>For dynamically typed languages the amount of memory allocated to a variable is determined at run-time.  So, if the program encounters the assignment: <code>age = 42</code> a 4-byte block of memory will be allocated and labelled as <code>age</code>.  If later in the program the user decides (and I'm not sure why they might do this) to change the value assigned to <code>age</code> to be <code>age</code> = \"forty two\" then the operating system would need to allocate 10 bytes of memory.</p> <p>Whichever type of language we are dealing with the type of data being handled by a variable is an important consideration.  It can lead to some issues:</p> <ul> <li>An integer occupies 4 bytes, 32 bits</li> <li>These 32 bits provide an allowable range of -2,147,483,648 through to 2,147,483,647</li> <li>What if you want to store a value higher or lower than this?</li> </ul> <p>You can't! Well, if you know in advance this might be possible than you will have to use another integer data type provided by the language (not listed in the table above).</p> <ul> <li>Also, if we're only dealing with values between, say, 1 and 100, we're wasting three bytes of memory for each of these values!</li> </ul> <p>A valid consideration.  Again use an alternative data type.  For example C# provides both <code>Int16</code> and <code>Int32</code>, the first uses 16 bits, the second 32 bits.</p> <p>The point is, data is important, the data type of that data is also important to us programmers.  Select the correct data type wisely.</p>"},{"location":"topics/programming/01_variables_types_and_strings.html#constants","title":"Constants","text":"<p>As well as variables we can declare and assign constants.  As the name suggests, the value assigned to a constant can not be changed.</p> <p>In this regard Python misbehaves.  It does not endorse constants in the same way other languages do.  it is perfectly possible in Python to declare a value for <code>PI = 31,42</code>, and then later in the program change that value to something completely different.  This is not good practice.</p> <p>Other languages may expect, when you declare a constant, to preface it with the keyword <code>const</code>:</p> <ul> <li><code>const PI = 3.142</code></li> <li><code>const VAT_RATE = 0.2</code></li> </ul> <p>Any attempt then to change these values will lead to a syntax error.  This is good practice.</p> <p>Note</p> <p>It is good practice to use upper case letters for the names of constants, whether in Python or not.  It serves as a reminder that the value we're dealing can not (should not) be changed.</p> <p>The benefits of a constant are:</p> <ul> <li>The value cannot be changed accidentally during the course of a program</li> <li>Defining the constant once, usually at the start of a program, means any subsequent updates e.g. the chancellor changes the rate of VAT, are only done in one place</li> </ul> <p>AQA Pseudocode</p> <pre><code>CONSTANT PI &lt;- 3.142 \nCONSTANT CLASS_SIZE &lt;- 30\n</code></pre> <p>OCR Pseudocode</p> <p>OCR make no distinction in their pseudocode between variables and constants</p> <p>Tip</p> <p>For OCR always upper case the identifier to make it clear it is a constant</p>"},{"location":"topics/programming/01_variables_types_and_strings.html#inputoutput","title":"Input/Output","text":"<p>All languages need some way of communication with their user, either by getting the user to enter data at the keyboard or to display results to the screen or to a file or to a printer etc..</p> <p>Each will have their own way of doing this, classically:</p> <pre><code>name = input(\"What is your name\")\nprint(name)\n</code></pre> <ul> <li>The function <code>input</code> waits for the user to type something, then assigns that to the variable <code>name</code>.</li> <li>The function <code>print()</code> sends whatever is included in the brackets to the screen</li> </ul> <p>Note</p> <p>If the brackets are empty, as in <code>print()</code>, a new line character is sent and the cursor will move down by one line on the screen</p> <p>AQA Pseudocode</p> <pre><code>a &lt;- USERINPUT  // get a value from the user and assign it to `a`\nOUTPUT a        // output value of `a` to the screen\n</code></pre> <p>Somewhat unusual perhaps ...</p> <p>OCR Pseudocode</p> <pre><code>name = input(\"Enter your name: \")       // get value from user, assign it to `name`\nprint(name)                             // display `name` to the screen\n</code></pre> <p>Nothing to surprise us here.</p>"},{"location":"topics/programming/01_variables_types_and_strings.html#operators","title":"Operators","text":"Operator Description Example Result + Addition <code>7 + 3</code> 10 - Subtraction <code>7 - 3</code> 4 - Multiplication <code>7 * 3</code> 21 / Division <code>7 / 3</code> 2.33333.. ^ Exponentiation <code>7 ^ 3</code> 343 <p>Note</p> <p>When two integers are divided, the result is a real (floating point number)</p> <p>There is also a pair of integer division operators: </p> Operator Description Example Result DIV Floor division <code>7 // 3</code> 2 MOD Modulo (Remainder) <code>7 % 3</code> 1 <p>Note</p> <p>Both AQA and OCR pseudocode uses the mnemonic <code>MOD</code> and <code>DIV</code> for integer division operations, equivalent to <code>//</code> and <code>%</code> in Python</p>"},{"location":"topics/programming/01_variables_types_and_strings.html#strings","title":"Strings","text":"<p>A string is different to an integer.  Perhaps obvious, but consider: </p> <ul> <li>the string '42' is represented in binary as \\(0111010101110011_2\\), </li> <li>the integer 42 is represented in binary as \\(00101010_2\\).</li> </ul> <p>Everything the user enters at the keyboard will be received by the computer as a character, or string if more than one character is entered.</p> <p>To convert string data into numeric data, and vice versa, we use one of several built-in functions:</p> <p>AQA Pseudocode</p> Function Description STRING_TO_INT(str) converts the string, <code>str</code> to an integer STRING_TO_REAL(str) converts the string, <code>str</code> to a float/real INT_TO_STRING(num) converts the numeric value, 'num' to a string REAL_TO_STRING(num) converts the numeric value, 'num' to a string CHAR_TO_CODE(ch) converts the character, <code>ch</code> to its ASCII value CODE_TO_CHAR(num) converts the integer, <code>num</code>, to its associated ASCII character <p>OCR Pseudocode</p> Function Description int(str) converts the string, <code>str</code> to an integer float(str) converts the string, <code>str</code> to a float/real str(num) converts the numeric value, 'num' to a string"},{"location":"topics/programming/01_variables_types_and_strings.html#string-concatenation","title":"String concatenation","text":"<p>Two strings can be joined together using the concatenation operator, <code>+</code>:</p> <ul> <li><code>full_name = first_name + ' ' + last_name</code></li> <li><code>age = '4' + '2'</code></li> </ul>"},{"location":"topics/programming/01_variables_types_and_strings.html#string-functions","title":"String functions","text":"<p>There are a number of standard functions  for working with strings.  These functions will be made available in most programming languages.  If you know you want to find the length of a string using, say, C# or Java then a quick search on the Internet will yield the answer (yes, we all do that!)</p> Function Description Example Output <code>str.length</code> returns the length of the string, <code>str</code> <code>n = 'john'.length</code> 4 <code>str.substring(start, end)</code> returns a slice of the string, <code>str</code>, <code>print('john',substring(0,2))</code> 'jo' <code>str.left(3)</code> returns the first 3 characters of the string, <code>str</code> <code>print('john'.left(1))</code> 'j' <code>str.right(3)</code> returns the last 3 characters of the string, <code>str</code> <code>print('john'.left(1))</code> 'ohn' <code>str.upper()</code> Convert the string, <code>str</code> to upper case <code>print('john'.upper())</code> 'JOHN' <code>str.lower()</code> Convert the string, <code>str</code> to lower cacse <code>print('John.lower())</code> 'john' <p>AQA Pseudocode</p> <p>AQA alters the syntax of some of these string handling functions:</p> Function Description Example Output <code>LEN(str)</code> returns the length of the string, <code>str</code> <code>n = LEN('john')</code> 4 <code>SUBSTRING(start, stop, str)</code> returns a slice of the string, <code>str</code>, <code>print(SUBSTRING(0,2,'john'))</code> 'jo' <p>You should not expect to see any of the others in the AQA pseudocode.</p> <p>OCR Pseudocode</p> <p>Both <code>length</code> and <code>substring</code> are used in OCR and the syntax is:</p> Function Description Example Output <code>str.length</code> returns the length of the string, <code>str</code> <code>n = 'john'.length</code> 4 <code>str.substring(start, num)</code> returns a slice of the string, <code>str</code>, <code>num</code> indicates how many characters <code>print('john',substring(0,2))</code> 'jo'"},{"location":"topics/programming/01_variables_types_and_strings.html#comments","title":"Comments","text":"<p>Any lines in your code that begin with the comment indicator are ignored when the program is compiled and/or executed.</p> <p>Get into the habit of including comments in your code, they are really useful.  All programs should contains comments:</p> <ul> <li>to describe the purpose of the program</li> <li>include your name and date of the author and when the program was written</li> <li>include a revision history, what changes were made and when</li> </ul> <p>AQA Pseudocode</p> <p>Adopts the Python comment: <code>#</code></p> <p>OCR Pseudocode</p> <p>Uses <code>//</code> as in languages such as Javascript etc..</p>"},{"location":"topics/programming/01_variables_types_and_strings.html#questions","title":"Questions","text":"1. What does a variable in programming do?Stores dataChanges the data typeDeletes dataExecutes codeA variable is used to store data in a program.Submit 2. Which symbol is used for assignment in AQA pseudocode?=&lt;-:=-&gt;In AQA pseudocode, the assignment operator is '&lt;-'.Submit 3. What is the typical memory size allocated for an integer data type?1 byte2 bytes4 bytes8 bytesAn integer typically occupies 4 bytes of memory.Submit 4. How is a string represented differently from an integer in binary?Strings use less memoryIntegers are represented with fewer bitsStrings use more bitsIntegers and strings are represented the sameStrings are represented with more bits compared to integers because they store multiple characters.Submit 5. What does the <code>STRING_TO_INT</code> function do in AQA pseudocode?Converts an integer to a stringConverts a string to an integerConverts a string to a floatConverts a float to a string<code>STRING_TO_INT</code> converts a string to an integer in AQA pseudocode.Submit 6. Which operator is used for floor division in pseudocode?+/DIV%The <code>DIV</code> operator is used for floor division, which gives the quotient without the remainder.Submit 7. What is the result of <code>7 / 3</code> in most programming languages?22.33211The division operator <code>/</code> typically results in a floating-point number when dividing two integers.Submit 8. Which function in OCR pseudocode converts a string to a float?float(str)str(float)int(str)real(str)In OCR pseudocode, <code>float(str)</code> converts a string to a float.Submit 9. How does Python handle constants compared to other languages?Python does not enforce constants.Python uses the <code>const</code> keyword.Python allows changing constants without restriction.Python does not support constants.Python does not enforce constants in the same way as other languages; constants can be changed.Submit 10. What does the <code>str.upper()</code> function do?Converts a string to lowercaseConverts a string to uppercaseReturns the length of a stringExtracts a substring from a string<code>str.upper()</code> converts all characters in the string to uppercase.Submit"},{"location":"topics/programming/02_selection_boolean_and_random.html","title":"Selection, Boolean and Random","text":""},{"location":"topics/programming/02_selection_boolean_and_random.html#selection-boolean-and-random","title":"Selection, Boolean and Random","text":"<p>This content should also be familiar from the programming with Python topic but we need to see how this concept is described using pseudocode.</p>"},{"location":"topics/programming/02_selection_boolean_and_random.html#selection","title":"Selection","text":"<p>Recall that each line of code in a program will be executed one after the other in sequence unless we change the flow of control by introducing a construct such as selection or iteration.</p> <p>With a selection statement the next statement to be executed will be dependent on some condition:</p> <pre><code>// in pseudocode\nage = 15\nif age &gt; 17 then\n    print(\"You are old enough to drive\")\nelse\n    print(\"You are not old enough to drive\")\nendif\n</code></pre> <p>The condition, <code>age &gt; 17</code> is a boolean expression.  It will evaluate to either <code>True</code> or <code>False</code>.  In this example, <code>age = 15</code>, so the program will execute the <code>print()</code> statement that belongs to the <code>else</code> part of the selection block.</p> <p>The <code>if</code> statement can provide a number of alternative branches:</p> <pre><code>if age &gt; 18 then\n    print(\"You may be at university\")\nelif age &gt; 16 then\n    print(\"You may be doing your A Levels\")\nelif age &gt; 14 then\n    print(\"You will be doing your GCSEs\")\nelif age &gt; 11 then\n    print(\"You will be at secondary school\")\nelse\n    print(\"You will be at primary school\")\nendif\n</code></pre> <p>AQA pseudocode</p> <p>Similar to previous example, do not forget the <code>ENDIF</code>:</p> <pre><code>IF age &gt; 18 THEN\n    OUTPUT \"You may be at university\"\nELSE IF age &gt; 16 THEN\n    OUTPUT \"You may be doing your A Levels\"\nELSE IF age &gt; 14 THEN\n    OUTPUT \"You will be doing your GCSEs\"\nELSE IF age &gt; 11 THEN\n    OUTPUT \"You will be at secondary school\"\nELSE\n    OUTPUT \"You will be at primary school\"\nENDIF\n</code></pre> <p>OCR Pseudocode</p> <p>Similar to previous example, except uses <code>elseif</code> instead of <code>endif</code>.  Again, do not forget the <code>endif</code>:</p> <pre><code>if age &gt; 18 then\n    print(\"You may be at university\")\nelseif age &gt; 16 then\n    print(\"You may be doing your A Levels\")\nelseif age &gt; 14 then\n    print(\"You will be doing your GCSEs\")\nelseif age &gt; 11 then\n    print(\"You will be at secondary school\")\nelse\n    print(\"You will be at primary school\")\nendif\n</code></pre>"},{"location":"topics/programming/02_selection_boolean_and_random.html#nested-if-statements","title":"Nested if statements","text":"<p>Another <code>if</code> statement can appear inside another one:</p> <pre><code>if age &lt;= 16 then\n    if day == 'Tuesday' then\n        print(\"20% Discount is available\")\n    else\n        print(\"10% Discount is available\")\n    endif\nelse\n    print(\"Full price only\")\nendif\n</code></pre>"},{"location":"topics/programming/02_selection_boolean_and_random.html#switchcase-statement","title":"Switch/Case statement","text":"<p>Multiple <code>if ... elif ... elif .. endif``` statements can sometimes be hard to follow and the</code>switch ... case`` statement block can make this easier to read and maintain:</p> <pre><code>option = int(input(\"Enter an option: \"))\n\nswitch option:\n    case 1:\n        print(\"You selected the first option\")\n    case 2:\n        print(\"You selected the second option\")\n    case 3:\n        print(\"You selected the third option\")\n    default:\n        print(\"You made an invalid choice\")\nendswitch\n</code></pre> <p>Depending on the value entered by the user, the code will either take the first, second or third option.  If none of these is recognised, it will <code>default</code> to the final alternative.</p> <p>Note</p> <p>AQA does not use switch/case in its pseudocode</p>"},{"location":"topics/programming/02_selection_boolean_and_random.html#boolean-expressions","title":"Boolean Expressions","text":"<p>A number of operators are available for boolean expressions:</p> Operator Description Example Result <code>==</code> Equal to <code>7 == 7</code> True <code>!=</code> Not Equal to <code>7 != 6</code> True <code>&gt;</code> Greater than <code>7 &gt; 6</code> True <code>&lt;</code> Less than <code>7 &lt; 6</code> False <code>&gt;=</code> Greater than or equal to <code>7 &gt;= 7</code> True <code>&lt;=</code> Less than or equal to <code>7 &lt;= 7</code> True <p>Warning</p> <p>Pay attention to the \"is equal to\" operator ( == ), it's two equal signs. It\u2019s easy to mistake it for the assignment operator ( = ).  It helps to read the assignment operator as e.g. \"age is assigned the value 17\" for <code>age = 17</code>; and \"is age equal to 17?\" for <code>age == 17</code>.</p> <p>These are also known as the comparison operators</p>"},{"location":"topics/programming/02_selection_boolean_and_random.html#complex-boolean-expressions","title":"Complex Boolean Expressions","text":"<p>Boolean expressions can be joined together using <code>AND</code>, <code>OR</code> and <code>NOT</code>.</p> <pre><code>if age &gt; 16 AND age &lt; 18 then\n    print(\"You can claim a student discount\")\nendif\n</code></pre>"},{"location":"topics/programming/02_selection_boolean_and_random.html#random-number-generation","title":"Random Number generation","text":"<p>Python has a built in library of functions for dealing with random numbers, and by using <code>import random</code> at the top of the program code makes the library available for use.</p> <p>In the pseudocode, there is not need to add an import statement, it is assumed to be available.</p> <p>AQA Pseudocode</p> <pre><code>value = RANDOM_INT(first, second)  // returns a random integer between `first` and `second` inclusive\n</code></pre> <p>OCR Pseudocode</p> <p>Random number generation is not included in the OCR pseudocode</p>"},{"location":"topics/programming/03_iteration.html","title":"Iteration","text":""},{"location":"topics/programming/03_iteration.html#iteration","title":"Iteration","text":"<p>There are three main programming constructs, that is, three main building blocks we use to construct algorithms:</p> <ul> <li>sequence</li> <li>selection</li> <li>iteration</li> </ul> <p>In sequence the code statements are executed one after another; in selection a choice is made based on a boolean expression to determine which statement, or block of statements, will be executed; in iteration statements will repeat until a condition is met.</p> <p>There are three types of iteration statements:</p> <ul> <li>the <code>for ... next</code> loop</li> <li>the <code>while ... endwhile</code> loop, and</li> <li>the <code>do ... until</code> loop, or <code>repeat ... until</code> loop</li> </ul> <p>Note</p> <p>Python only has the first two, there is no <code>do ... while</code> loop in Python</p>"},{"location":"topics/programming/03_iteration.html#for-loop","title":"<code>for</code> loop","text":"<p>The `for ... next' loop will repeat a set number of times.  It is sometimes known as the counted loop.  The code sets up a counter and it will count up from a start value to a stop value.  When that stop value has been reached the loop will end.</p> <p>AQA Pseudocode</p> <pre><code>sum &lt;- 0\nFOR count &lt;- 1 to 10\n    sum &lt;- sum + count\nENDFOR\n</code></pre> <p>OCR Pseudocode</p> <pre><code>sum = 0\nfor count = 1 to 10\n    sum = sum + count\nnext i\nprint(sum)\n</code></pre> <p>On each iteration of the loop the value if <code>count</code> is incremented, and the value of count on that loop is added to our accumulator, <code>sum</code>.  When <code>count</code> reaches 10 the loop ends and the value if <code>sum</code> is printed to the screen.</p>"},{"location":"topics/programming/03_iteration.html#while-endwhile-loop","title":"<code>while ... endwhile</code> loop","text":"<p>This loop is used <code>while</code> a given condition is <code>True</code>.  The same loop can be expressed in this was:</p> <p>AQA Pseudocode</p> <pre><code>sum &lt;- 0\ncount &lt;- 1\nWHILE  count &lt;= 10\n    sum &lt;- sum + count\n    count &lt;- count + 1\nENDWHILE\n</code></pre> <p>OCR Pseudocode</p> <pre><code>sum = 0\ncount = 1\nwhile count &lt;= 10\n    sum = sum + count\n    count = count + 1\nendwhile\nprint(sum)\n</code></pre> <p>The functionality is identical to the <code>for</code> loop, though the syntax used is different.</p> <p>The <code>while</code> loop is also known as a top-tested loop.  The condition for entering the loop is placed at the top, all the while this condition remains <code>True</code> the loop will run.</p> <p>Unlike the <code>for</code> loop, we have to manage the <code>count</code> variable, firstly by giving it a start value, and then changing that value as part of the loop.</p> <p>If we did not change the value of <code>count</code> inside the loop it would just keep on running - an inifinite loop.</p>"},{"location":"topics/programming/03_iteration.html#do-until-or-repeat-until-loop","title":"<code>do ... until</code> or <code>repeat ... until</code> loop","text":"<p>This loop construct is also known as a bottom-tested loop, the condition is placed at the bottom.</p> <p>The same algorithm can be expressed using this form:</p> <p>AQA Pseudocode</p> <pre><code>sum &lt;- 0\ncount &lt;- 1\nREPEAT\n    sum &lt;- sum + count\n    count &lt;- count + 1\nUNTIL count == 10\nOUTPUT sum\n</code></pre> <p>OCR Pseudocode</p> <pre><code>sum = 0\ncount = 1\ndo\n    sum = sum + count\n    count = count + 1\nuntil count == 10\nprint(sum)\n</code></pre> <p>It does not matter what the start value of <code>count</code> is in this loop, the loop will always be executed at least once.  Consider what happens if we assign 11 to <code>count</code> in line 2.  What will be output?  If we did the same thing with the <code>while ... endwhile</code> loop, what would be the output?</p>"},{"location":"topics/programming/04_arrays.html","title":"Arrays","text":""},{"location":"topics/programming/04_arrays.html#arrays","title":"Arrays","text":"<p>When using Python we came across the <code>list</code> data structure:</p> <pre><code>my_shopping_list = [\"Milk\", \"Eggs\", \"Tomatoes\"]\nmy_values = [1, 6, 87,34, 23]\nmy_mixed_list = [\"Milk\", 45, \"Flour\", 23.99]\nmy_sub_list = [[\"Milk\", \"Eggs\"], [45, 3.142]]\n</code></pre> <p>The list is a fundamental data structure in Python that allows us to store and manage such collections of data, where the collection is gathered under a single identifier or name.  Their contents can be changed during the run of the program, items can be added, changed or removed i.e. they are mutable.  </p> <p>E.g. we have just three of items on our shopping list above.  Each item is in a given position indicated by an integer started at \\(0\\).  So, \"Milk\" can be referenced by <code>my_shopping_list[0]</code> and \"Tomatoes\" by <code>my_shopping_list[2]</code> etc..</p> <p>AQA Pseudocode</p> <p>Syntax is as above, except the assignment operator that uses <code>&lt;-</code>.</p> <p>OCR pseudocode</p> <p>Syntax is as above</p>"},{"location":"topics/programming/04_arrays.html#array-vs-list","title":"Array vs List","text":"<ul> <li>The list <code>my_shopping_list</code> is a list in Python but more accurately we call it an array</li> <li>The list <code>my_mixed_list</code> is also a list in Python but it is not an array.</li> </ul> <p>The difference is due to the data types being used.  All items of data in an array must be the same data type.</p>"},{"location":"topics/programming/04_arrays.html#2d-array","title":"2D Array","text":"<p>An array can have several dimensions.  Suppose we wanted to also store a set os marks achieved by students on a test?</p> <pre><code>marks = [[19, 16, 14, 16], [12, 8, 11, 14], [20, 17, 12, 8]]\n</code></pre> <p>Here we have the marks achieved by 3 students, each item in the array represent the marks for a student.  These marks are presented as a list.  Think of this as a table with rows and columns:</p> test 1 test 2 test 3 test 4 19 16 14 16 12 8 11 14 20 17 12 8 <p>To extract and process the items in the 2D array we need two indexes: e.g. <code>marks[0][1]</code>, <code>marks[3][0]</code></p> <p>If wwe wanted to display all the marks as a table, using pseudocode, we might do:</p> <p>AQA Pseudocode</p> <pre><code>FOR student &lt;- 0 to 2\n    student_total &lt;- 0\n    FOR mark = 0 to 3\n        student_total = studentTotal + marks[student][mark]\n    ENDFOR\n    OUTPUT student_total\nENDFOR\n</code></pre> <p>OCR Pseudocode</p> <pre><code>for student = 1 to 2\n    student_total = 0\n    for mark = 0 to 3\n        student_total = student_total + marks[student,mark]\n    next mark\nnext student\nprint(student_total)\n</code></pre> <p>Note</p> <p>The indices in line 4, uses one set of square brackets with the row, column indices separated by a  comma</p>"},{"location":"topics/programming/05_functions_and_procedures.html","title":"Functions and Procedures","text":""},{"location":"topics/programming/05_functions_and_procedures.html#functions-and-procedures","title":"Functions and Procedures","text":"<p>You will encounter different names for this e.g. subroutine.  Use the term subroutine as the catch-all term for a block of code that is intended to be used several times in your program or that just make sense to group the statements together under one heading to mek the code more manageable and easier to read.</p> <ul> <li>A function is a subroutine that returns a value to the calling program</li> <li>A procedure is a subroutine that does not return a value to the calling program</li> </ul> <p>All languages will come with a number of built-in subroutines e.g. <code>print()</code>, <code>input()</code>, <code>int()</code> etc..  These may be either functions or procedures e.g.</p> <ul> <li><code>print()</code> - a procedure that outputs text to the screen, no value is returned to the main program when this is called</li> <li><code>your_input = input()</code> - function that returns whatever the user types on the keyboard when the line is executed</li> </ul> <p>Note</p> <p>Take note of the different syntax used when calling a function and a procedure.  The function returns a value, that value needs to be assigned to a variable</p> <p>All subroutines can contain arguments, these are the values or variables inside the brackets when the subroutine is called:</p> <pre><code>print(\"Hello World\") // \"Hello World\" is the string argument\nyour_name = input(\"Enter your name\")  // \"Enter your name\" is the string argument\n</code></pre>"},{"location":"topics/programming/05_functions_and_procedures.html#procedure","title":"Procedure","text":"<p>A typical use for a procedure is to print a menu to the screen, especially as we are likely to want to display this several times during the course of a program:</p> <pre><code>procedure show_menu()\n    print(\"      MAIN MENU      \")\n    print(\" ------------------- \")\n    print(\"1. Play game\")\n    print(\"2. Show controls\")\n    print(\"3. Display high scores\")\n    print(\"4. QUIT\")\nendprocedure\n\nshow_menu() // calls the procedure to show the menu\n</code></pre>"},{"location":"topics/programming/05_functions_and_procedures.html#functions","title":"Functions","text":"<p>Functions return a value to the calling program:</p> <pre><code>function get_user_choice()\n    option = int(\"Select &gt; \")\n    return option\nendfunction\n</code></pre> <p>This can be used in combination with the <code>show_menu()</code> procedure:</p> <pre><code>procedure main()\n    do\n        show_menu()\n        option = get_user_choice()\n        process_choice(option)\n    until option == 4\nendprocedure\n\nprocedure show_menu()\n    print(\"      MAIN MENU      \")\n    print(\" ------------------- \")\n    print(\"1. Play game\")\n    print(\"2. Show controls\")\n    print(\"3. Display high scores\")\n    print(\"4. QUIT\")\nendprocedure\n\nfunction get_user_choice()\n    print(\"Select &gt; \")\n    option = int(read_line())\n    return option\nendfunction\n\nprocedure process_choice(option)\n    if option == 1 then\n        play_game()\n    elseif option == 2 then\n        show_controls()\n    elseif option == 3 then\n        display_high_scores()\n    elseif option == 4 then\n        print(\"Goodbye!\")\n    else\n        print(\"Invalid option. Please try again.\")\n    endif\nendprocedure\n\n// placeholder procedures for demonstration purposes\nprocedure play_game()\n    print(\"Game is not implemented yet.\")\nendprocedure\n\nprocedure show_controls()\n    print(\"Controls are not implemented yet.\")\nendprocedure\n\nprocedure display_high_scores()\n    print(\"High scores are not implemented yet.\")\nendprocedure\n</code></pre>"},{"location":"topics/programming/05_functions_and_procedures.html#parameters","title":"Parameters","text":"<p>When you define and declare your subroutine, the data it might need is included in the brackets following the subroutine identifier e.g.</p> <pre><code>function sum(a, b)\n    return a + b\nendfunction\n</code></pre> <p>Here the variables <code>a</code> and <code>b</code> are known as the parameters of the function.</p> <p>It will be called, e.g.</p> <pre><code>first = 10\nsecond = 12\ntotal = sum(first, second)\n</code></pre> <p>The variables <code>first</code> and <code>second</code> are the arguments.</p> <p>AQA Pseudocode</p> <p>A function using AQA pseudocode.  It is a function because it includes the <code>RETURN</code> statement.</p> <pre><code>SUBROUTINE sum(a,b)\n    result &lt;- a + b\n    RETURN result\nEND SUBROUTINE\n\nc &lt;- sum(10,12)\n</code></pre> <p>A procedure using AQA pseudocode.  There is no <code>RETURN</code> statement.</p> <pre><code>SUBROUTINE print_sum(a, b)\n    OUTPUT a + b\nENDSUBROUTINE\n\nDISPLAY print_sum(10, 12)\n</code></pre> <p>OCR Pseudocode</p> <pre><code>function sum(a,b)\n    result = a + b\n    return result\nendfunction\n\nc = sum(10,12)\n</code></pre> <pre><code>procedure show_sum(sum(a, b))\n    print(a + b)\nendprocedure\n\nshow_sum(10,12)\n</code></pre>"},{"location":"topics/programming/05_functions_and_procedures.html#benefits-of-subroutines","title":"Benefits of subroutines?","text":"<p>1. Code Reusability</p> <p>Subroutines allow you to write a block of code once and reuse it multiple times throughout your program. This reduces code duplication and makes your code more concise.</p> <p>2. Modularity</p> <p>Subroutines enable you to break down a large program into smaller, independent modules. Each module can be developed, tested, and maintained separately, making it easier to manage complex programs.</p> <p>3. Easier Debugging</p> <p>With subroutines, you can debug a specific section of code without affecting the rest of the program. This makes it easier to identify and fix errors.</p> <p>4. Improved Readability</p> <p>Subroutines make your code more readable by providing a clear, descriptive name for a block of code. This helps other developers understand the purpose of the code and how it fits into the larger program.</p> <p>5. Reduced Complexity</p> <p>Subroutines can simplify complex code by hiding implementation details and exposing only the necessary information. This makes it easier to understand and work with the code.</p> <p>6. Better Abstraction</p> <p>Subroutines provide a way to abstract away low-level implementation details, allowing you to focus on the higher-level logic of your program.</p> <p>7. Faster Development</p> <p>By reusing existing subroutines, you can speed up your development process and reduce the time it takes to write new code.</p> <p>8. Improved Collaboration</p> <p>Subroutines make it easier for multiple developers to work on a project together. Each developer can focus on a specific subroutine without affecting the rest of the codebase.</p>"},{"location":"topics/programming/05_functions_and_procedures.html#variables-and-scope-in-code","title":"Variables and scope in code","text":"<p>There are two main types of variables:</p> <ul> <li>Local Variables: These are defined inside a function or a block of code and can only be accessed within that scope.</li> <li>Global Variables: These are defined outside of any function or block of code and can be accessed from anywhere in the program.</li> </ul>"},{"location":"topics/programming/05_functions_and_procedures.html#scope-rules","title":"Scope Rules","text":"<p>Here are the scope rules to keep in mind:</p> <ul> <li>A variable defined inside a function or block of code is only accessible within that scope.</li> <li>A variable defined outside of any function or block of code is a global variable and can be accessed from anywhere in the program.</li> <li>If a variable with the same name is defined both locally and globally, the local variable takes precedence within its scope.</li> </ul> <p>For example:</p> <pre><code>x = 10                      // `x` is a global variable\n\n\nprocedure  myProcedure()\n    y = x + 20              // `y` is a local variable\n    print(y)                // output: 30\nendprocedure\n\nprint(x)                    // output: 10\nprint(y)                    // Error: y is not defined\n</code></pre>"},{"location":"topics/programming/06_file_handling.html","title":"File Handling","text":""},{"location":"topics/programming/06_file_handling.html#file-handling","title":"File Handling","text":"<p>Reading and writing data to and from a file is an important process for most programs - where it is required.  For GCSE we only need to concern ourselves with text files, that is files that contain raw ASCII data.  Many programs will also save and read files in different formats loosely termed binary files.  These will not be considered here.</p> <p>The process is not that complicated:</p> <ul> <li>obtain a handle to the file</li> <li>process the file by reading its contents into a variable, or writing the contents of a variable to the file</li> <li>close the file</li> </ul> <p>A text file consists of a sequence of lines of text in the file e.g.</p> <pre><code>// file1.txt\nradar\nrotor\nmadam\n</code></pre> <p>Or, it might be a series of records.</p>"},{"location":"topics/programming/06_file_handling.html#records","title":"Records","text":"<p>The record has fallen out of favour in preference for other ways of organising data e.g. lists, or tuples but it does appear in the AQA syllabus.  So for completeness, a record is a data structure that contains a number fields, each field can be a different data type.</p> <p>Example</p> <pre><code>type student = record\n    studentId : integer\n    first_name : string[15]         // 15 characters available for this field\n    last_name : string[25]\n    year_born : integer\nend;\n</code></pre> <p>To clarify, Python does not have the concept of a record.  It does not need one as other data structures such as dictionary that work just as well if not better:</p> <pre><code>student = {\n    'studentId': 123,\n    'first_name': 'Harry',\n    'last_name': 'Jones',\n    'year_born': 2007\n}\n</code></pre> <p>The <code>collections</code> library also has a <code>namedtuple</code> data structure:</p> <pre><code>from collection import namedtuple\n\nStudent = namedTuple('Student', ['studentId', 'first_name', 'last_name', 'year_born'])\n\nstudent = Student(123, 'Harry', 'Jones', 1990)\n</code></pre> <p>We could (though it's not recommended) store the same data as a list:</p> <p></p><pre><code>student = [123, 'Harry', 'Jones', 2007]\n</code></pre> However, this is not as readable or maintainable as the other two examples."},{"location":"topics/programming/06_file_handling.html#reading-from-a-text-file","title":"Reading from a text file","text":"<p>Assume we have a file of students, <code>students.txt</code>:</p> <pre><code>123, Harry, Jones, 2007\n129, Ben, Davies, 2008\n130, Mai Ling, Li, 2007\n</code></pre> <p>Each line in the file is a record, typically several fields separated by commas.  Each row represents one student.  This structure is also known as a comma separated value file, or CSV.</p> <p>Obtain a handle to the file</p> <pre><code>my_file = openRead('student.txt')\n</code></pre> <p>Typically, when we open a file we will be opening to perform one type of action, or mode:</p> <ul> <li>write: allows writing to the file, usually overwriting any existing content</li> <li>append: adds data to the end of the file</li> <li>read: allows reading from the file</li> </ul> <p>When we open the file we get back a file handle, essentially we're asking the operating system to grant us access to that file.  The OS returns a unique identifier, commonly known as the file handle.  It's a special key that allows us to interact with the file.  But, it is not the file itself!</p> <p>Process the file contents</p> <p>We want to read the contents of the file, the contents need to be put somewhere, i.e. assigned to a variable.  We might want all the lines in the file, or we might want to process each line one at a time.</p> <p>Example:</p> <pre><code>student_file = open('students.txt')     // get a \"handle\" for the file\nwhile not student_EOF()                 // EOF = End Of File\n    line = student_file.readLine()      // read one line of the file\n    print(line)\nendwhile\nstudent_file.close()                    // close the file handle\n</code></pre>"},{"location":"topics/programming/06_file_handling.html#writing-to-a-text-file","title":"Writing to a text file","text":"<p>The following should be straightforward:</p> <pre><code>student_file = open('students.txt')\nid = int(input(\"Enter student id: \"))\nfirst_name = input(\"Enter student first name: \")\nlast_name = input(\"Enter student last name: \")\nyear_of_birth = int(input(\"Enter student year of birth: \"))\nstudent_file.writeLine(id + \", \" + first_name + \", \" + last_name + \", \" + year_of_birth + \"\\n\")\nstudent_file.close()\n</code></pre> <p>Take particular note of the <code>\\n</code> at the end of the string in line 6.  This is the new line character and ensures any subsequent record is written to the next line of the file.</p>"},{"location":"topics/programming/06_file_handling.html#closing-the-file","title":"Closing the file","text":"<p>In the previous examples we used <code>student_file.close()</code>.  It is important to close any file when it is no longer needed:</p> <ul> <li>Frees up memory</li> <li>File cannot be processed when it is closed</li> </ul> <p>AQA Pseudocode</p> <p>There are no file handling functions in the AQA pseudocode.</p> <p>OCR Pseudocode</p> <p>The following functions are specified as part of the OCR pseudocode:</p> Function Description Example <code>openRead(file)</code> Open a file to read <code>file = openRead('students.txt')</code> <code>readLine()</code> Read a line from the file <code>line = file.readLine()</code> <code>endOfFile()</code> Determines when the end of the file has been reached <code>while not file.endOfFile()</code> <code>openWrite(file)</code> Open a file for writing <code>file = openWrite('students.txt')</code> <code>writeLine()</code> Write a line to the file <code>file.writeLine(line)</code> <code>close()</code> Close the file <code>file.close()</code>"},{"location":"topics/python/index.html","title":"Programming with Python","text":""},{"location":"topics/python/index.html#programming-with-python","title":"Programming with Python","text":"<p>Slidedeck</p>"},{"location":"topics/python/index.html#overview","title":"Overview","text":"<p>Whether you're new to coding or looking to enhance your skills, these pages will help you understand the fundamental concepts of programming in an easy-to-follow manner. </p> <p>Python is one of the most popular programming languages in the world, known for its simplicity and readability, making it a popular choice for beginners and students for GCSE level, and beyond.</p> <p>In this tutorial series, we'll start with the basics, including installing Python on your own computers, understanding variables, data types, and control structures. You'll learn how to create loops, make decisions in your code with conditional statements, and handle data with lists and dictionaries. By the end of this course, you'll even be able to read from and write to files, giving you the skills to manage data effectively. </p> <p>You may be examined on any of the content here in the final exams.  </p> <p>The key to success with this topic is practice, practice, practice!  The more programming you do the more fluent you will become.  It can be hard at first but persevere, programming really is fun!</p> <p> Access each section using the menu on the left.  Each section includes background notes, sample code followed by a quick multiple-choice quiz and a number of programming tasks.  More tasks can be found [here].</p>"},{"location":"topics/python/index.html#moving-from-scratch-to-python","title":"Moving from Scratch to Python","text":"<p> You may have had some experience with programming using Scratch.  If so you may find it useful to download and keep this comparison guide to Scratch and Python from The Raspberry Pi Foundation.</p> <p>Download: \"Scratch compared to Python\"</p>"},{"location":"topics/python/index.html#climate-quest-text-adventure-game","title":"Climate Quest Text Adventure Game","text":"<p> Throughout this topic we will be working on a larger project, the Climate Quest Text Adventure Game.  As each new topic is introduced you will be applying that concept to the game.</p>"},{"location":"topics/python/index.html#additional-resources","title":"Additional Resources","text":"<p>If you're looking for coding challenges and other tutorials for Python that actually get you engaged with the process of programming (rather than just cutting and pasting) then have a look at:</p> <ul> <li>Snakify</li> <li>100 Days of Python</li> </ul>"},{"location":"topics/python/02_getting_started.html","title":"Getting Started with Python","text":""},{"location":"topics/python/02_getting_started.html#getting-started-with-python","title":"Getting Started with Python","text":"<p>Objectives</p> <ul> <li>Have a working Python environment on the computers.</li> <li>Understand the importance of choosing and using an IDE.</li> <li>Introduction to basic Python concepts.</li> <li>Grasp the concept of a program and how Python fits into it.</li> <li>Get hands-on experience by writing and running a first Python program.</li> </ul> <p>The first steps to get started with programming using the Python language are:</p> <ul> <li>download and install Python to your computer</li> <li>download, install and if needed configure an IDE (Integrated Development Environment) to write your Python programs.</li> </ul> SourceResult <pre><code>print(\"Hello, World!\")\nfor i in range(5):\n    print(i)\n</code></pre> <p>Hello, World! 0 1 2 3 4</p>"},{"location":"topics/python/02_getting_started.html#installing-a-python-environment","title":"Installing a Python environment","text":"<p>Follow these steps to install Python to your computer.  The exact steps may vary depending on your operating system (Windows, macOS, or Linux).</p>"},{"location":"topics/python/02_getting_started.html#download-python","title":"Download Python","text":"<p>There are a couple of options here:</p> <p>Microsoft Store Package</p> <ul> <li>This is the most straightforward method, especially for when just starting out.  It is designed for students and others using Python for the first time.</li> <li>On their home page, search for \"Python\" or use this link: https://www.microsoft.com/en-gb/search/shop?q=python</li> <li>Select the app with the highest version number (at time of writing this was 3.11)</li> <li>Click <code>Get</code></li> <li>Wait for the application to download and the click <code>Install</code></li> </ul> <p></p> <p>The full package: </p> <ul> <li>Visit the official Python website at https://www.python.org/downloads/</li> <li>You'll see the latest versions of Python available for download. Choose the version that is appropriate for your operating system. For most users, it's Python 3.x (e.g., Python 3.8, Python 3.9, etc.), as Python 2 is no longer supported.  At time of writing the latest version was Python 3.12.</li> </ul> <p></p> <p>2. Download the Installer:</p> <ul> <li>Click on the download link for the Python version you've chosen.</li> <li>If you're using Windows, you'll likely download an executable installer (.exe) file. For macOS, it will be a disk image (.dmg) file. For Linux, it might be a tarball (.tar.gz) or another format, depending on your distribution.</li> </ul> <p>3. Run the Installer:</p> <ul> <li>For Windows: Double-click the downloaded .exe file and follow the installation wizard's instructions. Make sure to check the box that says \"Add Python x.x to PATH\" during installation to make Python accessible from the command line.</li> <li>For macOS: Double-click the .dmg file and follow the instructions to install Python.</li> <li>For Linux: Open a terminal and navigate to the directory where you downloaded the tarball. Extract it and follow the README or installation instructions provided with your distribution.</li> </ul> <pre><code>&gt; python --version\nPython 3.10.5\n</code></pre> <p>Note</p> <p>If you encounter any issues or would like further help go to <code>https://realpython.com/installing-python/</code> and follow the instructions there</p>"},{"location":"topics/python/02_getting_started.html#the-python-interactive-environment","title":"The Python interactive environment","text":"<ul> <li>Enter <code>python</code> in your terminal (command) window, this will load the Python interactive environment and means you can run Python commands here.</li> <li>Sometimes known as the REPL, which stands for \"Read-Evaluate-Print-Loop\".  </li> <li>Try the following examples which introduce some of the fundamental concepts of Python:  </li> </ul> <p>Basic Arithmetic Operations:</p> <ul> <li>In Python, you can perform basic arithmetic operations directly in the interactive environment.</li> <li>At the prompt, try the following and record your answers:</li> </ul> <pre><code>&gt;&gt;&gt; 2 + 3\n&gt;&gt;&gt; 5 - 1\n&gt;&gt;&gt; 4 * 6\n&gt;&gt;&gt; 10 / 3\n&gt;&gt;&gt; 10 // 3\n</code></pre> <p>Working with Variables:</p> <ul> <li>A variable is a name that we give to some data which is stored in the computer's memory.  We can create variables to store and manipulate data in the interactive environment.</li> <li>At the prompt, try the following and observe the results:</li> </ul> <pre><code>&gt;&gt;&gt; x = 5\n&gt;&gt;&gt; y = 3\n&gt;&gt;&gt; sum_result = x + y\n&gt;&gt;&gt; product_result = x * y\n&gt;&gt;&gt; sum_result\n&gt;&gt;&gt; product_result\n</code></pre> <p>Strings and String Operations:</p> <ul> <li>Strings are collections of characters, usually assigned to a variable.</li> <li>Strings will always be surrounded by quote characters (either single quote or double quote)</li> <li>At the prompt, try the following and observe the results:</li> </ul> <pre><code>&gt;&gt;&gt; greeting = \"Hello\"\n&gt;&gt;&gt; greeting\n&gt;&gt;&gt; name = \"Alice\"\n&gt;&gt;&gt; name\n</code></pre> <ul> <li>String can be joined together, known as concatenation:</li> </ul> <pre><code>&gt;&gt;&gt; full_greeting = greeting + \" \" + name\n&gt;&gt;&gt; full_greeting\n</code></pre> <ul> <li>Strings can be processed using some useful built-in functions:</li> </ul> <pre><code>&gt;&gt;&gt; greeting_length = len(greeting)\n&gt;&gt;&gt; greeting_length\n&gt;&gt;&gt; uppercase_name = name.upper()\n&gt;&gt;&gt; uppercase_name\n</code></pre> <p>Lists and List Operations:</p> <ul> <li>Lists are a fundamental data structure in Python, they are collections of data items with a common name.</li> <li>At the prompt, try the following and observe the results:</li> </ul> <pre><code>&gt;&gt;&gt; fruits = [\"apple\", \"banana\", \"cherry\"]\n</code></pre> <ul> <li>To access the elements, or items, in the list we use an index for its position (starting at \\(0\\)) </li> </ul> <pre><code>&gt;&gt;&gt; first_fruit = fruits[0]\n&gt;&gt;&gt; second_fruit = fruits[1]\n</code></pre> <ul> <li>Items can be added or removed from the list:</li> </ul> <pre><code>&gt;&gt;&gt; fruits.append(\"orange\")\n&gt;&gt;&gt; fruits.remove(\"banana\")\n</code></pre> <ul> <li>Review the results:</li> </ul> <pre><code>&gt;&gt;&gt; fruits\n&gt;&gt;&gt; first_fruit\n&gt;&gt;&gt; second_fruit\n</code></pre> <p>Info</p> <p>To exit from the interactive environment, enter the command <code>exit()</code> or <code>quit()</code> or use the shortcut keys Ctrl+D  (Windows)</p>"},{"location":"topics/python/02_getting_started.html#install-a-code-editor-or-ide","title":"Install a Code Editor or IDE","text":"<ul> <li>While you can write Python code using the interactive environment it soon becomes too difficult and we need to write our code in a file which can then be run by the Python interpreter.  For this we use an IDE, or Interactive Development Environment.</li> <li>The IDE will come with an editor (for writing our code and options to save our file etc), syntax highlighting, line numbers, a debugging environment and a host of other features.</li> <li>Working with an IDE that you like and can get familiar with is a really important aspect of a programmer's workflow.</li> <li>There are several IDEs available for Python and we'll not cover the specific instructions for each.</li> <li>Your Python installation will come with a default IDE called IDLE</li> <li>You might like to try alternatives (as IDLE can be tricky and its debugging environment is not ideal), e.g.</li> <li>Thonny</li> <li>Visual Studio Code</li> <li>PyCharm</li> <li>Alternatively you can use an online environment such as that provided by repl.it</li> <li>With your chosen editor make sure you know how to create a new file and save.</li> </ul> <p>That's it! Python should now be installed on your home computer. You can start writing and running Python scripts in your chosen development environment.</p> <p>Remember to keep your Python installation updated as new versions are released with bug fixes and improvements. You can check for updates and install them using the <code>pip</code> package manager, which usually comes bundled with Python. Use the following command to upgrade <code>pip</code> and check for Python package updates:</p> <pre><code>&gt; pip install --upgrade pip\n&gt; pip list --outdated\n</code></pre>"},{"location":"topics/python/02_getting_started.html#your-first-program","title":"Your first program","text":"<p>The convention when learning any new programming language is to write a program that displays the string \"Hello, World!\" on the screen.  You can read about why this is the case here.</p> <p>With Python this is very easy:</p> SourceResult <pre><code>print(\"Hello, World!\")\n</code></pre> <p>Hello, World!</p> <p>That's it!  We use the built-in Python function, <code>print()</code>, and provide this function with the text we want to display inside quotation marks.  You can use single or double quote, just be consistent.</p> <ul> <li>In your IDE create a new file, save it with a suitable name e.g. 'hello.py'.</li> <li>Enter the statement to print as in the code snippet above, and re-save the file</li> <li>Run the file using e.g. 'Run Module' in IDLE, 'Run Current Module' in Python or click the play button in VSCode</li> <li>Most IDEs will run the current file using the F5 key.</li> <li>Alternatively at a terminal window, in the directory where the file has been saved you can type the following to run your program: <code>C:\\PythonFiles\\Hello\\python hello.py</code></li> </ul> <p>Note</p> <p>All Python code files, sometimes called scripts, should be saved with the file extension '.py'</p>"},{"location":"topics/python/02_getting_started.html#questions","title":"Questions","text":"1. What are the general steps to install Python on your home computer?Download the installer and click 'Next' repeatedlyVisit a random website and download PythonDownload Python from the official Python website and follow the installation instructionsPython cannot be installed on home computersIt's important to download Python from the official Python website (https://www.python.org) to ensure you are getting a legitimate, up-to-date version of the software. The installation instructions provided are straightforward and guide you through the process to ensure Python is installed correctly.Submit 2. Which version of Python should you choose for most users?Python 2.xPython 3.xPython 4.xPython 1.xPython 3.x is the recommended version for most users because it is the current and actively maintained version. Python 2.x has reached the end of its life and is no longer supported, so using Python 3 ensures compatibility with modern libraries and tools.Submit 3. What does the 'Add Python x.x to PATH' option during installation do?It adds Python to the Windows RegistryIt creates a shortcut on the desktopIt adds Python to the system's PATH environment variableIt installs additional Python librariesAdding Python to the PATH environment variable allows you to run Python from the command prompt or terminal without having to specify the full path to the Python executable. This makes it easier to use Python from any directory.Submit 4. How can you check if Python is installed correctly on your computer?By opening Microsoft WordBy typing <code>python --version</code> in the command prompt or terminalBy creating a new Python fileBy checking your emailTyping python --version in the command prompt or terminal will display the installed version of Python, confirming that Python is installed and correctly configured.Submit 5.  What command can you use to start the Python interactive environment in your terminal or command prompt?<code>start python</code><code>run python</code><code>python</code><code>start</code>Simply typing python (or python3 on some systems) in the terminal or command prompt starts the Python interactive environment, also known as the REPL (Read-Eval-Print Loop), where you can enter and execute Python code interactively.Submit 6. What is the result of the expression <code>10 / 3</code> in Python?3.33333333333333353.0410In Python, the / operator performs floating-point division, which means the result is a decimal (float) value. The division of 10 by 3 results in a float with many decimal places: 3.3333333333333335.Submit 7. What does the <code>len()</code> function do in Python?Returns the length of a string or listConverts a string to uppercasePerforms basic arithmetic operationsCreates a new listThe len() function in Python is used to determine the number of elements in a list or the number of characters in a string. It returns an integer representing this count.Submit 8. How do you access elements in a list in Python?Using square brackets and the element's valueUsing the <code>get()</code> functionUsing parentheses and an indexLists cannot be accessed in PythonIn Python, elements in a list are accessed using square brackets ([]) and an index (an integer representing the position of the element). For example, my_list[0] would access the first element in the list.Submit 9. Which Python function is used to join two or more strings together?<code>add()</code><code>concatenate()</code><code>merge()</code><code>+</code> operatorIn Python, the + operator is used to concatenate (join) two or more strings together. For example, 'Hello' + ' ' + 'World' results in 'Hello World'.Submit 10. What is the purpose of an Integrated Development Environment (IDE) when working with Python?To download Python packagesTo create Python programsTo run Python scripts in a web browserTo play Python gamesAn Integrated Development Environment (IDE) provides tools to write, debug, and test Python programs more efficiently. It typically includes features like code editors, debuggers, and automation tools that streamline the development process.Submit"},{"location":"topics/python/03_variables.html","title":"Variables","text":""},{"location":"topics/python/03_variables.html#variables","title":"Variables","text":"<p>Objectives</p> <ul> <li>Understand the concept of variables and their role in programming.</li> <li>Grasp the dynamic typing system in Python.</li> <li>Follow Python's naming conventions when naming variables.</li> <li>Learn how to display output using the print() function.</li> <li>Know how to obtain and process user input.</li> <li>How to check the data type of a variable.</li> <li>Definition of a constant and how to use with Python</li> <li>Gain practical experience by completing programming tasks related to variables and user input.</li> </ul> <p>In the previous section we set up the Python environment and our IDE for writing Python programs.  Here we'll run through one of the key features for all programming languages, variables and constants.</p>"},{"location":"topics/python/03_variables.html#what-is-a-program","title":"What is a program?","text":"<p>A program, in the context of computers and technology, is like a set of instructions that tells a computer what to do. It's a bit like giving directions to a friend, but instead of telling your friend how to get from one place to another, you're telling the computer how to perform specific tasks.</p> <p>Imagine you have a robot, and you want that robot to make you a sandwich. You can't just tell the robot, \"Make me a sandwich.\" The robot needs step-by-step instructions, like:</p> <ol> <li>Go to the kitchen.</li> <li>Open the refrigerator.</li> <li>Take out the bread, cheese, and lettuce.</li> <li>Put two slices of bread on a plate.</li> <li>Put some cheese and lettuce on one slice of bread.</li> <li>Put the other slice of bread on top.</li> <li>Close the sandwich.</li> <li>Bring it to me.</li> </ol> <p>Each of these steps is like a line of code in a program. A program is a collection of these instructions that a computer can understand and follow to complete a specific task. The computer reads and executes these instructions in order, just like our robot friend follows the steps to make a sandwich. It's the language computers understand to perform the tasks we want them to do.</p> <p>The syntax of the instructions will differ between programming languages but essentially all have the following components:</p> <ul> <li>Input: Get data from the keyboard, a file, the network, or some other device.</li> <li>Output: Display data on the screen, save it in a file, send it over the network, etc.</li> <li>Mathematical and logical operators: To perform basic mathematical operations like addition and multiplication and logical operations such as AND, OR and NOT.</li> <li>conditional execution: Check for certain conditions and run the appropriate code.</li> <li>Repetition: Perform some action repeatedly, usually with some variation.</li> </ul> <p>Every program you've ever run will be made up of these type of instructions and these will be explored in this and subsequent sections.</p>"},{"location":"topics/python/03_variables.html#example-1","title":"Example 1:","text":"<pre><code># Example 1\nname = \"Alice\"\nage = 21\nPI = 3.14\n\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"PI:\", PI)\n\nuser_input = input(\"Enter something: \")\nprint(\"You entered:\", user_input)\nprint(\"Data type of user input:\", type(user_input))\n</code></pre> <p>Read the code and predict what will happen when we run this program, in particular:</p> <ul> <li>line 1: What will be stored in the variable <code>name</code>?</li> <li>line 6: What do you think <code>print(\"Age:\", age)</code> will display?</li> <li>line 9: What will happen when the program reaches this line?\"</li> <li>line 11: What is the purpose of <code>type(user_input)</code>?</li> </ul> <p>Copy the code into your text editor, run the code to see if your were right!</p>"},{"location":"topics/python/03_variables.html#variables_1","title":"Variables","text":"<p>In the example program, line 1 assigns the value \"Alice\" to a variable named <code>name</code>.</p> <p>A variable is a foundational concept for all programming languages.  It is a container, or a label, used to store data in our programs.  Lines 2 and 3 assign further variables named <code>age</code> and <code>pi</code>.</p> <p>During the course of a program it is likely the value of that data item will change, it varies, hence it is known as a variable.</p> <p></p><pre><code># Example 1\nname = \"Alice\"\nage = 21\nPI = 3.14\n\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"PI:\", PI)\n\nuser_input = input(\"Enter something: \")\nprint(\"You entered:\", user_input)\nprint(\"Data type of user input:\", type(user_input))\n</code></pre> The opening lines of our program assigns data to three different variables, they contain a different type of data:  line identifier value type 1 <code>name</code> \"Alice\" string 2 <code>age</code> 21 integer 3 <code>PI</code> 3.14 float <p>Python knows about four primitive types of data:</p> <ul> <li>Integer: whole numbers, positive and negative</li> <li>Floating point numbers: a real number with a decimal point and fractional component</li> <li>Boolean: either true or false</li> <li>String: any set of characters</li> </ul> <p>Comments</p> <p>A comment is text in your code that will be ignored by the Python interpreter. Comments can be on a single line when preceded by the <code>#</code> symbol:</p> <pre><code># This is a comment, and will be ignored by the interpreter\n</code></pre> <p>It's important to recognise the difference between these different data-types.  In some programming languages you have to declare the type of data that is expected in a variable, this is known as static data typing, and it is fixed before the code is compiled.  For example in C# you would declare these variables as:</p> <pre><code>string name = \"Simon\";\nint age = 34;\nbool plays_piano = true;\nfloat hourly_rate = 34.99;\n</code></pre> <p>Python takes a different approach.  It is a dynamically typed language.  This means the value assigned to the variable will determine the data type for that variable as the program is running.  So the data type of the variable is determined by the value it holds.</p>"},{"location":"topics/python/03_variables.html#identifiers","title":"Identifiers","text":"<p>The names, or identifiers, for each helps to describe the data they each contain.  We could have named them as follows:</p> <pre><code>a = \"Alice\"\nb = 21\nc = 3.14\n</code></pre> <p>But, the name <code>a</code> does not tell the reader anything about the data being stored in the variablae named <code>a</code>.  The name given to the variable should be descriptive of the item of data contained there so it makes sense when you, or others, read your code.  This makes the code easier to read and understand.</p> <p>Tip</p> <p>When giving a name to a variable, think carefully about what to use.  Make if descriptive of the data being stored in the variable.</p> <p>There are guidelines/rules for naming variables but for now remember they must not start with a digit, nor can they use another term used as a keyword in the language.  Python allows for underscores to be used in variable names e.g. <code>is_student</code> but not the hyphen e.g. <code>is-student</code>.  </p> <p>Finally, variable names are case-sensitive, so <code>age</code> is different to <code>Age</code>.</p> <p>Python Keywords</p> <p>Python keywords </p> <p><code>and</code>, <code>as</code>, <code>assert</code>, <code>break</code>, <code>class</code>, <code>continue</code>, <code>def</code>, <code>del</code>, <code>elif</code>, <code>else</code>, <code>except</code>, <code>finally</code>, <code>for</code>, <code>from</code>, <code>global</code>, <code>if</code>, <code>import</code>, <code>in</code>, <code>is</code>, <code>lambda</code>, <code>nonlocal</code>, <code>not</code>, <code>or</code>, <code>pass</code>, <code>raise</code>, <code>return</code>, <code>try</code>, <code>while</code>, <code>with</code>, <code>yield</code>.  </p> <p>None of these can be used as the name for a variable. To see the latest set of keyboards enter <code>print(keyword.kwlist)</code> in the interactive environment.</p>"},{"location":"topics/python/03_variables.html#naming-style-for-variables","title":"Naming style for variables","text":"<p>Python has a style for naming of variables.  When an identifier is made up of multiple words separate each word with an underscore:</p> <pre><code>is_student = True\ncumulative_sum_of_numbers = 50\n</code></pre> <p>Info</p> <p>This naming style is called \"snake-case\".  There is extensive documentation for how to write Python code, a style guide known as PEP8.  You can read about PEP8 here https://pep8.org</p> <p>Values are assigned to variables using the assignment operator: <code>=</code>, as shown in the examples above.  Variables can be re-assigned with new values thus their value can change during the course of the program.  This is why they are called variables.</p> <pre><code># Example 1\nname = \"Alice\"\nage = 21\nPI = 3.14\nname = \"Imran\"  # the value of name has been changed\n</code></pre> <p>Note the assignment operator: <code>=</code>.  It's important not to confuse this with the mathematical symbol for \"equals\".  Try to get into the habit when reading code and encountering e.g. <code>age = 42</code> to say \"age is assigned the value 42\".  Also make sure you get it the right way round, <code>42 = age</code> will not work!</p>"},{"location":"topics/python/03_variables.html#simple-output","title":"Simple Output","text":"<pre><code># Example 1\nname = \"Alice\"\nage = 21\nPI = 3.14\n\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"PI:\", PI)\n\nuser_input = input(\"Enter something: \")\nprint(\"You entered:\", user_input)\nprint(\"Data type of user input:\", type(user_input))\n</code></pre> <p>To get data displayed on the screen we use the <code>print()</code> function.  On it's own this command will just print a new empty line, but elements, or more formally arguments, can be placed inside the brackets.  These arguments will then be displayed on the screen.  </p> <p>Having declared and initialised the three variables, we make successive calls to <code>print()</code> passing in a different variable each time to display the values of each variable.</p>"},{"location":"topics/python/03_variables.html#getting-input-from-the-user","title":"Getting input from the user","text":"<pre><code># Example 1\nname = \"Alice\"\nage = 21\nPI = 3.14\n\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"PI:\", PI)\n\nuser_input = input(\"Enter something: \")\nprint(\"You entered:\", user_input)\nprint(\"Data type of user input:\", type(user_input))\n</code></pre> <p>Assigning data to a variable can be hard-coded in your program or obtained externally such as a user entering data at the keyboard.</p> <p>To get data from our user we call the <code>input()</code> function, line 11</p> <p>This function displays the string in brackets and waits for user to type something, this is then assigned to a variable, here named <code>user_input</code>.</p>"},{"location":"topics/python/03_variables.html#all-data-entered-from-the-keyboard-is-a-string","title":"All data entered from the keyboard is a string","text":"<p>The data type of the input from the keyboard will always be a string so if we need that data to behave as a integer, a float or some other type then it will need to be cast to that type using the appropriate function.  For example, the following will generate an error as we are trying to subtract \\(1\\) from the string entered by the user.  You cannot subtract \\(1\\) from, say, \"15\"!</p> <pre><code>age = input('Enter you age: \")\nage = age - 1                   # this generates an error!\n</code></pre> <p>Instead, we have to cast it to an integer:</p> <pre><code>age = input(\"Enter your age: \")\nage = int(age)\nage = age - 1\n</code></pre> <p>This will work, though it can be shortened by wrapping the <code>int()</code> function around the <code>input()</code>:</p> <pre><code>age = int(input(\"Enter your age: \"))\nage = age + 1\n</code></pre> <ul> <li> <p>To convert the input to a float i.e. a number with a decimal point such as \\(3.14\\), use the <code>float()</code> function.</p> </li> <li> <p>To convert a numeric value to a string using the <code>str()</code> function,</p> </li> </ul>"},{"location":"topics/python/03_variables.html#checking-the-data-type","title":"Checking the data type","text":"<pre><code># Example 1\nname = \"Alice\"\nage = 21\nPI = 3.14\n\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"PI:\", PI)\n\nuser_input = input(\"Enter something: \")\nprint(\"You entered:\", user_input)\nprint(\"Data type of user input:\", type(user_input))\n</code></pre> <p>If you want to check the type of data held by a variable we can use the <code>type()</code> function:</p> <p>In line 12 we print to the screen the data type of <code>user_input</code>.  It will, of course, be a string.</p>"},{"location":"topics/python/03_variables.html#constants","title":"Constants","text":"<pre><code># Example 1\nname = \"Alice\"\nage = 21\nPI = 3.14\n\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"PI:\", PI)\n\nuser_input = input(\"Enter something: \")\nprint(\"You entered:\", user_input)\nprint(\"Data type of user input:\", type(user_input))\n</code></pre> <p>The data on line 4, for the value of pi (\\(\\pi\\)) should not be changed.  It's value should remain the same.  We call it a constant.</p> <p>Like a variable a constant is a name given to an item of data.  The difference is the value of that item should not change throughout the course of the program.  </p> <p>Warning</p> <p>Unlike other programming languages Python does not have a strict syntax for constants - this is unfortunate.  To get round this we simply declare our constants using upper case identifiers.  Yes, you might make a mistake and inadvertently reassign that constant value but if you stick to the convention it should be obvious that the data item is to be treated as a constant value rather than a variable.</p>"},{"location":"topics/python/03_variables.html#formal-vs-natural-languages","title":"Formal vs natural languages","text":"<p>When we think of a language we probably think of the language people speak be that English, French or arabic etc..  These are known as natural languages, no-one sat down and designed the language, they have evolved naturally over time (and are continuing to evolve).</p> <p>A formal language is a language that has been designed by people to be used in specific circumstances e.g. mathematical expressions and notation or chemical symbols to denote the molecular structure of different chemicals.  Similarly programming languages in computer science.  </p> <p>These formal languages have a strict syntax relating to the tokens of the language and how they can be organised.  For example, in mathematical notation \\(4 + 7 = 11\\) combines five tokens of the language into a meaningful expression.  By contrast, \\(4 += 7\\) does not!  The tokens might be valid but the rules do not permit one operator to follow another in this way.  It is a syntax error.</p>"},{"location":"topics/python/03_variables.html#the-python-interpreter","title":"The Python interpreter","text":"<p>Python is an interpreted language.  This means it does not produce a separate executable file but works its way through your code file and executing it on the fly.  </p> <p>The Python Interpreter</p> <p>How Python works through the code you write and produces the output is a complicated process and not required for the GCSE - you might like to return to this section at another time.  But, do remember Python is an interpreted language.</p> <p>First, Python (the interpreter) will analyse your code and check it for any syntax errors and make sure the rules for indentation have been followed correctly.  It carries out a lexical analysis and the divides the source code into a number of tokens which are passed to the parser which generates the Abstract Syntax Tree (AST). The AST is converted into byte codes which can then be saved to a file with a <code>.pyc</code> extension.</p> <p>Next, the Python interpreter will launch its Python Virtual Machine (PVM) which converts the byte codes into the binary data required by the target computer.  This way, your Python code will run on Windows, Linux or MacOS.</p> <p>Some programming languages will, by default, produce a compiled executable which, on Windows, will be a file with the <code>.exe</code> extension.  This means you can create your program and distribute the <code>.exe</code> for another user to run.  This file will only be compatible for the target platform e.g. Windows, or MacOS.  To distribute your Python program you need to provide the code and your user will have to have Python installed on their machine to run your code.</p>"},{"location":"topics/python/03_variables.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 1 - Declaring variables</p>"},{"location":"topics/python/03_variables.html#questions","title":"Questions","text":"1. What is a variable in programming?A container used to store data that can change during program execution.A function used to control program flow.A mathematical expression used to perform calculations.A keyword used to organize and manage data effectively.In programming, a variable acts as a container that stores data, such as numbers or strings, which can be modified as the program runs. This allows the program to work with and manipulate different data values.Submit 2. Which of the following best describes the concept of a constant?A container used to store data that can change during program execution.A mathematical expression used to perform calculations.A value that remains fixed throughout the program.A keyword used to control program flow.A constant is a type of variable that is assigned a value once and does not change during the execution of the program. Constants are used to represent fixed values that should not be altered.Submit 3. Python is a dynamically typed language. What does this mean in terms of variable declaration and data types?The ability to change a variable's value during program execution.The requirement to declare variable types before using them.The process of converting one data type to another.The determination of a variable's data type based on the value it holds.In Python, you do not need to explicitly declare the data type of a variable. The type is determined automatically based on the value assigned to it. This feature makes Python a dynamically typed language, allowing for more flexibility.Submit 4. What is the purpose of the <code>print()</code> function in Python?To perform mathematical calculations.To obtain user input.To display output on the screen.To define constants.The print() function is used in Python to display output, such as text or the value of variables, on the screen. This is a basic way to show results and debug programs.Submit 5. Which of the following is not a legal name for a variable?<code>_my_name</code><code>my name</code><code>my_name</code><code>myName</code>In Python, variable names cannot contain spaces. The name my name is illegal because it contains a space, which would cause a syntax error. Instead, use underscores (_) or other styles like <code>my_name</code> or <code>myName</code>.Submit 6. How can you obtain user input in Python?Using the <code>input()</code> function.Using the <code>print()</code> function.Using the cast() function.Using the get_input() function.The <code>input()</code> function is used to capture input from the user in Python. It pauses program execution until the user provides input, which can then be stored in a variable for further processing.Submit 7. How can you convert a string to an integer in Python?Using the <code>convert_to_int()</code> function.Using the <code>str_to_int()</code> function.Using the <code>int()</code> function.Using the <code>parse_int()</code> function.The <code>int()</code> function in Python is used to convert a string that represents a number (e.g., 123) into an integer. This is useful when you need to perform arithmetic operations on values received as strings.Submit 8. How can you check the data type of a variable in Python?Use the <code>type()</code> function to determine the data type of a variable in Python.Convert the variable to a string and then check its length to identify its data type.Use the <code>typeof()</code> function to inspect the data type of a variable.Create a new variable and assign it the value of the original variable, then check its data type using the <code>type()</code> function.The <code>type()</code> function returns the data type of a variable, such as <code>int</code>, <code>str</code>, or <code>list</code>. This function is essential for debugging and understanding how different variables are being used in a program.Submit 9. Which naming style is recommended for variables in Python?camelCasePascalCasesnake_casekebab-caseThe snake_case naming style, where words are separated by underscores (e.g., <code>my_variable</code>), is the preferred convention for naming variables in Python. This style improves readability and consistency in your code.Submit 10. What is PEP8, and why is it important in Python programming?PEP8 is a programming language, essential for writing Python code efficiently.PEP8 is a set of guidelines for writing clean, readable Python code, important for maintaining code quality and consistency.PEP8 is a Python package used for handling web development tasks, crucial for building web applications.PEP8 is a Python Enhancement Proposal that provides coding conventions for Python code, ensuring consistency and readability across projects.PEP8 is a widely accepted style guide that outlines best practices for writing Python code. Following PEP8 ensures that your code is clean, readable, and consistent, which is especially important when working on larger projects or collaborating with others.Submit"},{"location":"topics/python/03_variables.html#extra-programming-tasks","title":"Extra Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Simple Calculator<p>Create a program that takes two numbers as input from the user and performs basic arithmetic operations like addition, subtraction, multiplication, and division. Save the file as `simple-calculator.py`</p>Read more ...Total Marks<p>A student has taken three tests as part of his final year exam. He scored 65/100, 45/100 and 57/100 respectively. Write a Python program that asks the user to enter the marks, calculate the total and display the total and the average of the marks to the screen. Save the file as `marks.py`.</p>Read more ...Currency Converter<p>Write a Python program that converts an amount in Pound Sterling (GBP) to Euros (EUR).  The program should prompt the user for an amount in pounds sterling (\u00c2\u00a3) and convert the entered amount to Euros using a suitable exchange rate e.g. 1GBP = 1.17EUR.  The program should print the result to the screen. Save the program as `currency.py`.  The following shows example output: </p>Read more ..."},{"location":"topics/python/04_operators.html","title":"Operators","text":""},{"location":"topics/python/04_operators.html#operators","title":"Operators","text":"<p>Objectives</p> <ul> <li>Understand the use and application of the assignment operator</li> <li>Use mathematical operators (+, -, *, /, %, //) for simple calculations</li> <li>Learn how to use the augmented assignment operators</li> <li>Be able to construct expressions, applying operator precedence</li> <li>Understand and use logical operators (and, or, not) in Python.</li> <li>Understand the role and use of comparison Operators (==, !=, &gt;, &lt;, &gt;=, &lt;=)</li> <li>Build expressions combining logical and comparison operators</li> <li>Apply parentheses to modify the evaluation order of logical expressions.</li> </ul> <p>In this section we will look at the different operators we can use when programming with Python.  An operator is a character, or characters that will carry out a function on its operands.</p> <p>The concept will be familiar from using basic arithmetic operators such as <code>+</code> or <code>-</code> to add two numbers together or subtract two numbers.  The <code>+</code> is known as an operator, and the numbers being added are the operands.</p> <p>Programming languages have a number of types of operators:</p> <ul> <li>Mathematical operators</li> <li>comparison operators</li> <li>logical operators</li> </ul> <p>One other is the assignment operator (<code>=</code>) that we used in the previous section.</p>"},{"location":"topics/python/04_operators.html#example-2","title":"Example 2","text":"<p>Review the following program:</p> <pre><code>a = 10\nb = 5\nresult = a + b * 2\nprint(\"Result 1:\", result)\n\nresult = (a + b) * 2\nprint(\"Result 2:\", result)\n\nresult = a // b\nprint(\"Result 3:\", result)\n\nis_greater = a &gt; b\nprint(\"Is a greater than b?\", is_greater)\n\nlogical_test = (a &gt; b) and (a &lt; 20)\nprint(\"Logical test:\", logical_test)\n</code></pre> <p>Here there are a number of these operators being used.  Read the code and predict what will be printed to the screen when the highlighted lines are executed.</p> Answers <ul> <li>Result 1: 20 </li> <li>Result 2: 30 </li> <li>Result 3: 2 </li> <li>Is a greater than b? True </li> <li>Logical test: True</li> </ul> <p>Copy the code and paste into a code editor and run the code to compare your predictions with the actual results.</p> <p>Compare lines 4 and lines 7.  Why is the result different?</p> <p>The following sections summarise the behaviour of each type of operator that we use when programming.</p>"},{"location":"topics/python/04_operators.html#assignment-operator","title":"Assignment Operator","text":"<p>We've already seen this being used.  It is the equals sign, <code>=</code>, but as we noted before we read it as \"is assigned to\".  </p> <p>We can practice its use with the interactive environment:</p> <pre><code>&gt;&gt;&gt; name = \"Simon\"\n&gt;&gt;&gt; age = 42\n</code></pre> <p>When reading this code say: \"Simon is as assigned to the variable <code>name</code>\"  and \"42 is assigned to the variable <code>age</code>\".  The computer will then store this value in its memory and they can then be referred to by using their name, or identifier:</p> <pre><code>&gt;&gt;&gt; print(name, age)\nSimon 42\n</code></pre>"},{"location":"topics/python/04_operators.html#mathematical-operators","title":"Mathematical operators","text":"<p>The mathematical operators are the same we have in maths, noting the use of <code>/</code> for division and <code>*</code> for multiplication:</p> <ul> <li>Addition: <code>+</code></li> <li>Subtraction: <code>-</code></li> <li>Division: <code>/</code></li> <li>Multiplication: <code>*</code></li> </ul> Operator Description Example Result + Addition <code>7 + 3</code> 10 - Subtraction <code>7 - 3</code> 4 - Multiplication <code>7 * 3</code> 21 / Division <code>7 / 3</code> 2.33333.. <p>Note</p> <p>When two integers are divided, the result is a real (floating point number)</p> <p>There is also a pair of integer division operators: </p> Operator Description Example Result // Floor division <code>7 // 3</code> 2 % Modulo (Remainder) <code>7 % 3</code> 1 <p>Try both of these in the interactive environment to confirm results.</p> <p>If we think of an example of wanting to know how many hours and minutes for a movie that lasts 138 minutes.  We can get the hours by using the integer division operator: <code>hours = minutes // 60</code>.  This automatically rounds down.  We can get the remainder too: <code>remainder = minutes - (hours * 60)</code>.  But this is the same as using the modulo operator: <code>remainder = minutes % 60</code>.</p> <p>The modulo operator is also really useful when checking if one divides equally into another.  For example: <code>if x % 2 == 0</code>, then we know if the number (<code>x</code>) is odd or even.</p> <p>Finally, exponent operator, <code>**</code>:</p> Operator Description Example Result ** Exponent <code>7 ** 3</code> 343"},{"location":"topics/python/04_operators.html#augmented-assignment-operators","title":"Augmented assignment operators","text":"<p>The following expression is often used where the value of a variable is being incremented by a given amount:</p> <pre><code>x = x + 1\n</code></pre> <p>Here we can use a shorthand form (sometimes called syntactic sugar):</p> <pre><code>x += 1              # the same as x = x + 1\n</code></pre> <p>Any of the mathematical operators can be used in this way.</p> <p></p><pre><code># Initial assignment\nx = 10\nprint(x)            # output: 10\n\n# Augmented assignment operator: subtraction\nx -= 2\nprint(x)            # output: 8\n\n# Augmented assignment operator: multiplication\nx *= 3  \nprint(x)            # output: 24\n</code></pre> It does not matter which you prefer to use but the shorter form takes a little less typing.   <p>Note</p> <p>This is sometimes known as an in-place operator</p>"},{"location":"topics/python/04_operators.html#operator-precedence","title":"Operator precedence","text":"<p>There should be no surprises here, at least initially:</p> <ul> <li>exponentiation</li> <li>multiplication or division</li> <li>addition or subtraction</li> </ul> <p>As in maths any brackets take priority, so these can be used to alter the order of precedence</p>"},{"location":"topics/python/04_operators.html#comparison-operators","title":"Comparison operators","text":"<p>Comparison operators in Python are used to compare two values or expressions and produce Boolean results (<code>True</code> or <code>False</code>). These operators allow you to check conditions and make decisions based on the results of these comparisons. They are usually used as part of selection and iteration structures which we'll meet later.</p> <p>Python provides several comparison operators:</p> Operator Description Example Result <code>==</code> Equal to <code>7 == 7</code> True <code>!=</code> Not Equal to <code>7 != 6</code> True <code>&gt;</code> Greater than <code>7 &gt; 6</code> True <code>&lt;</code> Less than <code>7 &lt; 6</code> False <code>&gt;=</code> Greater than or equal to <code>7 &gt;= 7</code> True <code>&lt;=</code> Less than or equal to <code>7 &lt;= 7</code> True <p>Warning</p> <p>Pay attention to the \"is equal to\" operator ( == ), it's two equal signs. It\u2019s easy to mistake it for the assignment operator ( = ).  It helps to read the assignment operator as e.g. \"age is assigned the value 18\" for <code>age = 18</code>; and \"is age equal to 18\" for <code>age == 18</code>.</p>"},{"location":"topics/python/04_operators.html#logical-operators","title":"Logical operators","text":"<p>Logical operators in Python allow us to combine logical operations on one or more Boolean values (<code>True</code> or <code>False</code>). These operators are used to make decisions and control the flow of a program based on those conditions. They are often referred to as Boolean operators.</p> <p>Python provides three main logical operators:</p> Operator Description Example Result <code>and</code> Returns <code>True</code> only if all the boolean values are true (7 &gt; 6) and (4 &lt; 8) True <code>or</code> Returns <code>True</code> if at least one of the boolean values are true (10 &lt; 20) or (10 &lt; 5) True <code>not</code> Returns <code>True</code> if the value is false; returns `False if the value is true not(7 &gt; 6) False"},{"location":"topics/python/04_operators.html#logical-operator-examples","title":"Logical Operator Examples","text":"<p>Let's explore these logical operators with some examples, you can try these in the interactive environment:</p> <p>1. AND Operator (<code>and</code>)</p> <p>The <code>and</code> operator returns True only if both conditions are True.</p> <pre><code>&gt;&gt;&gt; x = True\n&gt;&gt;&gt; y = False\n&gt;&gt;&gt; x and y\nFalse\n</code></pre> <p>2. OR Operator (<code>or</code>)</p> <p>The <code>or</code> operator returns True if at least one condition is True.</p> <pre><code>&gt;&gt;&gt; a = True\n&gt;&gt;&gt; b = False\n&gt;&gt;&gt; a or b\nTrue\n</code></pre> <p>3. NOT Operator (<code>not</code>)</p> <p>The <code>not</code> operator negates the Boolean value.</p> <pre><code>&gt;&gt;&gt; p = True\n&gt;&gt;&gt; not p\nFalse\n</code></pre>"},{"location":"topics/python/04_operators.html#combining-logical-operators","title":"Combining Logical Operators","text":"<p>You can combine logical operators to create more complex conditions:</p> <pre><code>age = 25\nis_student = False\n\nif age &gt;= 18 and not is_student:\n    print(\"You are eligible to vote.\")\nelse:\n    print(\"You are not eligible to vote.\")\n</code></pre> <p>You are eligible to vote.</p> <p>In this example, the <code>and</code> operator is used to check if the age is greater than or equal to 18, and the <code>not</code> operator is used to check if the person is not a student.</p>"},{"location":"topics/python/04_operators.html#precedence-of-logical-operators","title":"Precedence of Logical Operators","text":"<p>Logical operators have a specific order of precedence: <code>not</code> has the highest precedence, followed by <code>and</code>, and then <code>or</code>. You can use parentheses to change the order of evaluation if needed.</p> <pre><code>result = (True or False) and (not True)\n</code></pre>"},{"location":"topics/python/04_operators.html#common-use-cases","title":"Common Use Cases","text":"<p>Logical operators are commonly used in programming for various purposes, such as:</p> <ul> <li>Conditional Statements: To make decisions and control the flow of a program using <code>if</code>, <code>elif</code>, and <code>else</code> statements.</li> <li>Loop Control: To control the execution of loops, such as <code>while</code> and <code>for</code> loops.</li> <li>Filtering Data: To filter data based on specific conditions.</li> <li>Searching and Validation: To search for specific values in data and validate user input.</li> </ul>"},{"location":"topics/python/04_operators.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 2 - Using Operators</p>"},{"location":"topics/python/04_operators.html#questions","title":"Questions","text":"1. What is the purpose of an operator in computer science?To represent a specific operation to be performed on one or more operands.To assign values to variables.To control the flow of a program.To filter data based on specific conditions.An operator in computer science is a symbol or keyword that specifies an operation to be performed on one or more operands (e.g., variables or values). For example, the + operator is used to add two numbers.Submit 2. Which of the following operators is used to assign values to variables in Python?<code>==</code><code>=</code><code>+</code><code>/</code>The <code>=</code> operator in Python is used to assign a value to a variable. For instance, <code>x = 5</code> assigns the value 5 to the variable x. It is important to note that <code>=</code> is not the same as <code>==</code>, which is used for comparison.Submit 3. What is the result of the expression <code> 7 // 2</code> in Python?3.5343.0The <code>//</code> operator in Python performs integer (or floor) division, which returns the largest integer less than or equal to the result of the division. Therefore, <code>7 // 2</code> results in 3, discarding the fractional part.Submit 4. Which operator is used for exponentiation in Python?<code>^</code><code>%</code><code>//</code><code>**</code>The <code>**</code> operator is used in Python to perform exponentiation, which raises a number to the power of another number. For example, <code>2 ** 3</code> results in 8 (2 raised to the power of 3).Submit 5. What does the <code>+=</code> operator do in Python?Subtracts a value from a variable.Multiplies a variable by a value.Adds a value to a variable.Divides a variable by a value.The <code>+=</code> operator in Python is an example of an augmented assignment operator. It adds the value on the right to the variable on the left and then assigns the result back to that variable. For instance, <code>x += 3</code> is equivalent to <code>x = x + 3</code>.Submit 6. Which comparison operator checks if two values are not equal in Python?<code>==</code><code>&gt;=</code><code>&lt;</code><code>!=</code>The <code>!=</code> operator in Python checks whether two values are not equal. If the values are not equal, it returns True; otherwise, it returns False. For example, <code>5 != 3</code> returns <code>True</code>.Submit 7. What is the order of precedence for mathematical operations in Python?Exponentiation, Addition/Subtraction, Multiplication/DivisionMultiplication/Division, Addition/Subtraction, ExponentiationAddition/Subtraction, Exponentiation, Multiplication/DivisionExponentiation, Multiplication/Division, Addition/SubtractionIn Python, the order of precedence for mathematical operations follows standard mathematical rules: exponentiation (<code>**</code>) is performed first, followed by multiplication and division (<code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>), and finally addition and subtraction (<code>+</code>, <code>-</code>).Submit 8. Which logical operator returns <code>True</code> only if both conditions are <code>True</code>?<code>and</code><code>or</code><code>not</code><code>==</code>The <code>and</code> operator in Python returns <code>True</code> only if both conditions it is evaluating are <code>True</code>. If either condition is <code>False</code>, the result is <code>False</code>. For example, <code>True and False</code> returns <code>False</code>.Submit 9. What is the purpose of using parentheses, (brackets), in logical expressions?To change the order of evaluation.To combine multiple expressions.To separate operands.To indicate comments.Parentheses in logical expressions are used to alter the natural order of evaluation, ensuring that the expressions inside the parentheses are evaluated first. This is similar to their use in mathematical expressions.Submit 10. What is the result of the expression <code>not True</code>?<code>False</code><code>True</code>nullErrorThe <code>not</code> operator in Python negates a boolean value. If applied to <code>True</code>, it returns <code>False</code>, and if applied to <code>False</code>, it returns <code>True</code>. Therefore, <code>not True</code> results in <code>False</code>.Submit"},{"location":"topics/python/04_operators.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Exponentiation<p>Write Python code to calculate the result of 2^5 (2 raised to the power of 5) using the exponentiation operator.</p>Read more ...Odd or Even<p>Create a Python program that asks the user to input a number and then checks whether the number is odd or even. The program should display a message indicating whether the number is odd or even.  The expected output is: </p>Read more ...Integer division<p>Implement a Python program that calculates the quotient and remainder when dividing 23 by 5 without using the `/` operator. Use the integer division operator `//` and the modulo operator `%`</p>Read more ...BMI Calculator<p>Develop a Python program that calculates the Body Mass Index (BMI) of a person based on their weight and height. The program should prompt the user to input their weight (in kilograms) and height (in meters), calculate their BMI using the BMI formula `bmi = weight_kg / (height_m ** 2)`, and then display the result.</p>Read more ..."},{"location":"topics/python/05_strings.html","title":"Strings","text":""},{"location":"topics/python/05_strings.html#strings","title":"Strings","text":"<p>Objectives</p> <ul> <li>Understand the nature and importance of strings as a fundamental data type in Python.</li> <li>Know how to create, manipulate, and format strings using various techniques.</li> <li>Be aware of common string methods and their applications.</li> <li>Know how to effectively index, slice, and find the length of strings.</li> <li>Understand the concept of string immutability.</li> <li>Gain practical experience through programming tasks related to strings.</li> </ul> <p>Earlier we saw how Python works with variables and the data stored in the variable will be of a particular type of data i.e. integers (whole numbers), reals (numbers with a fractional part), characters (e.g. 'a', '5') and boolean (either true or false).  In this section we look at strings.</p> <p>A string is a list of characters, a character being anything that you type on the keyboard in one keystroke e.g. a letter, a number or a symbol, including Space.</p>"},{"location":"topics/python/05_strings.html#example-3","title":"Example 3:","text":"<p>Read the following program, and predict what the program will do.  </p> <pre><code>greeting = \"Hello, \"\nname = \"Alice\"\nfull_greeting = greeting + name\nprint(\"Full Greeting:\", full_greeting)\n\nshout = full_greeting.upper()\nprint(\"Shout:\", shout)\n\nwhisper = full_greeting.lower()\nprint(\"Whisper:\", whisper)\n\nlength = len(full_greeting)\nprint(\"Length of Full Greeting:\", length)\n\nfirst_letter = name[0]\nprint(\"First Letter of Name:\", first_letter)\n\nsliced_name = name[1:4]\nprint(\"Sliced Name:\", sliced_name)\n</code></pre> <p>Pay particular attention to the highlighted lines.  What will be displayed on the screen when these lines are executed?</p> Answers <ul> <li>Full Greeting: Hello  Alice </li> <li>Shout: HELLO, ALICE </li> <li>Whisper: hello, alice </li> <li>Length of Full Greeting: 12 </li> <li>First Letter of Name: </li> <li>A Sliced Name: lic</li> </ul> <p>Copy the code and paste into a code editor and run the code to compare your predictions with the actual results.</p>"},{"location":"topics/python/05_strings.html#what-are-strings","title":"What are Strings?","text":"<ul> <li>In Python, a string is a data type used to represent text.</li> <li>Text can be anything from a single character to a whole paragraph.</li> <li>Strings are a fundamental data type in programming and are used extensively in real-world applications.</li> <li>A string is a list of characters</li> </ul>"},{"location":"topics/python/05_strings.html#creating-strings","title":"Creating Strings","text":"<ul> <li>Strings are created by enclosing text in either single quotes (<code>'</code>) or double quotes (<code>\"</code>).</li> <li>For example:</li> <li><code>'Hello, World!'</code></li> <li><code>\"Python is fun\"</code></li> </ul> <p>Warning</p> <p>The type of quotation mark used must be consistent e.g. <code>'Hello, World!\"</code> is incorrect, the quotes do not match </p> <ul> <li>to include a quotation mark within a string, use the other one!  For example:</li> </ul> <pre><code>message = \"I don't like Mondays!\"\n</code></pre>"},{"location":"topics/python/05_strings.html#string-operations","title":"String Operations","text":"<p>Two of the operators we saw being used as mathematical operators are repurposed when applied to string operands:</p>"},{"location":"topics/python/05_strings.html#concatenation","title":"Concatenation","text":"<ul> <li>You can combine two or more strings using the concatenation operator (<code>+</code>).</li> <li> <p>Example:</p> </li> <li> <p><code>'Hello' + ' ' + 'World'</code> results in <code>'Hello World'</code>.</p> </li> </ul>"},{"location":"topics/python/05_strings.html#repetition","title":"Repetition","text":"<ul> <li>You can repeat a string multiple times using the repetition operator (<code>*</code>).</li> <li>Example:</li> <li><code>'Python' * 3</code> results in <code>'PythonPythonPython'</code>.</li> </ul>"},{"location":"topics/python/05_strings.html#string-methods","title":"String Methods","text":"<ul> <li>Python provides many built-in string methods that allow you to manipulate and work with strings effectively.</li> <li>Some common string methods include <code>upper()</code>, <code>lower()</code>, <code>len()</code>, <code>strip()</code>, <code>split()</code>, and <code>replace()</code>.</li> <li>Example:</li> <li><code>\"Python\".upper()</code> results in <code>'PYTHON'</code>.</li> <li>When using these do not forget the brackets after the method name, these are function calls and must have the brackets</li> <li>To find characters in a string, use the <code>find()</code> method.  This returns the index of the first occurrence of that character.  </li> <li>For example:</li> </ul> <pre><code>course = \"Python for beginners\"\ncourse.find('P')                    # returns 0\ncourse.find('for')                  # returns 7\ncourse.find('Beg')                  # returns -1, it is case sensitive\n</code></pre> - To replace a character, or a sequence of characters use <code>replace()</code> e.g. <code>course.replace('Python', 'Java')</code> - To check for the existence of characters in a string, use <code>print('Python' in course)</code>.  This method will returns a boolean value and line <code>find()</code> is case-sensitive."},{"location":"topics/python/05_strings.html#string-indexing","title":"String Indexing","text":"<ul> <li>Each character in a string has a unique index starting from <code>0</code>.</li> <li>You can access individual characters in a string using square brackets and the index.</li> <li>Example:</li> <li><code>\"Python\"[0]</code> returns <code>'P'</code>.</li> <li><code>\"Python\"[2]</code> returns <code>'t'</code>.</li> </ul>"},{"location":"topics/python/05_strings.html#string-slicing","title":"String Slicing","text":"<ul> <li>String slicing allows you to extract a portion of a string.</li> <li>It is done by specifying a range of indices inside square brackets.</li> <li>For example:</li> </ul> <pre><code>course = \"Python\"\nprint(course[0])            # 'P'\nprint(course[-1])           # 'n'\nprint(course[0:3])          # 'Pyt' nb. does not print course[3] the 4th char\nprint(course[0:])           # all the characters!\nP\nn\nPyt\nPython\n</code></pre>"},{"location":"topics/python/05_strings.html#string-length","title":"String Length","text":"<ul> <li>You can find the length of a string using the <code>len()</code> function.</li> <li>Example:</li> <li><code>len(\"Hello, World!\")</code> returns <code>13</code>.</li> </ul>"},{"location":"topics/python/05_strings.html#escape-characters","title":"Escape Characters","text":"<ul> <li>Some characters have special meanings in strings, such as newline (<code>\\n</code>) and tab (<code>\\t</code>).</li> <li>To include these characters in a string, you need to use escape sequences.</li> <li>Example:</li> <li><code>\"Hello\\nWorld\"</code> creates a string with a newline character.</li> </ul>"},{"location":"topics/python/05_strings.html#multiline-strings","title":"Multiline Strings","text":"<ul> <li>You can create multiline strings by enclosing them in triple quotes (<code>'''</code> or <code>\"\"\"</code>).</li> <li>Useful for long text or preserving the formatting of text.</li> <li>Example:</li> </ul> <pre><code>multiline_text = '''\nThis is a multiline\nstring in Python.\n'''\n</code></pre>"},{"location":"topics/python/05_strings.html#printing-strings","title":"Printing strings","text":"<p>Python provides three different ways to print the contents of the string to the screen:</p> <p>Compare the following:</p> <pre><code>first = \"Imran\"\nsecond = \"Khalisa\"\nprint(first + second)       # concatenation operator\nprint(first, second)        # comma operator, inserts a space between items\nprint(f\"{first} {second}\")  # f-string\n</code></pre> <p>It makes little different which you choose to use but notice the concatenation operator does not insert a space between items being printed.</p>"},{"location":"topics/python/05_strings.html#string-immutability","title":"String Immutability","text":"<ul> <li>Strings in Python are immutable, which means their values cannot be changed after creation.</li> <li>Any operation that seems to modify a string actually creates a new string.</li> <li>Example:</li> <li><code>text = \"Hello\"</code></li> <li><code>new_text = text + \", World!\"</code></li> </ul> <p>Activity </p> <p>Modify the given example by:</p> <ul> <li>Changing the variable values and observe the output.</li> <li>Adding more string manipulations using different methods.</li> <li>Experimenting with slicing to extract different parts of the string.</li> </ul>"},{"location":"topics/python/05_strings.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 3 - String Handling</p>"},{"location":"topics/python/05_strings.html#questions","title":"Questions","text":"1. What is the primary purpose of strings in Python?To represent mathematical calculationsTo store and manipulate textual dataTo create graphical user interfacesTo perform logical operationsStrings in Python are used to store and manipulate sequences of characters, such as words or sentences. They are fundamental for handling text in programs.Submit 2. How do you create a string in Python?By enclosing text in single quotesBy enclosing the string in backticksBy using the <code>str()</code> functionBy using square bracketsIn Python, a string can be created by enclosing text in either single quotes (') or double quotes (\"). For example, 'Hello' and \"World\" are both valid strings.Submit 3. Which of the following string operations is used to combine two or more strings?DivisionSubtractionConcatenationMultiplicationConcatenation is the operation used to join or combine two or more strings into one. In Python, this is done using the + operator, like \"Hello\" + \"World\" resulting in \"HelloWorld\".Submit 4. What is the result of <code>Python * 3</code>?<code>PythonPython</code><code>PythonPythonPython</code><code>Python3</code><code>9</code>In Python, multiplying a string by an integer repeats the string that many times. Therefore, \"Python\" * 3 results in \"PythonPythonPython\".Submit 5. Which Python method is used to convert a string to uppercase?<code>upper()</code><code>lower()</code><code>length()</code><code>find()</code>The <code>upper()</code> method in Python converts all characters in a string to uppercase. For example, <code>\"hello\".upper()</code> results in \"HELLO\".Submit 6. What does the <code>find()</code> method return if the specified character or substring is not found in the string?<code>True</code> <code>False</code><code>-1</code><code>0</code>The <code>find()</code> method searches for a substring within a string and returns the index of the first occurrence. If the substring is not found, it returns -1.Submit 7. How do you access the first character of a string named <code>text</code>?<code>text[0]</code><code>text[1]</code><code>text[-1]</code><code>text(0)</code>In Python, strings are indexed starting from 0. To access the first character of a string text, you use <code>text[0]</code>.Submit 8. What does string slicing allow you to do?Combine two stringsRepeat a stringExtract a portion of a stringConvert a string to uppercaseString slicing in Python allows you to extract a substring from a string by specifying a start and end index. For example, <code>text[1:4]</code> extracts characters from index 1 to 3.Submit 9. What is the length of the string <code>'Hello, World!'</code>?11121314The string 'Hello, World!' has 14 characters, including the punctuation and space. The <code>len()</code> function in Python can be used to determine the length of a string.Submit 10. How do you include a newline character in a string?Using <code>\\n</code>Using <code>\\t</code>Using <code>\\</code>Using <code>#</code>The <code> </code> escape sequence is used in Python to include a newline character in a string, causing the text to continue on the next line when printed.Submit"},{"location":"topics/python/05_strings.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Greeting a friend<p>Write a Python program that asks the user to enter their first name and last name separately. Then, print a formatted message such as 'Hello, [First Name] [Last Name]!', replacing `[First Name]` and `[Last Name]` with the data entered by the user.</p>Read more ...Programming is fun<p>Given the string 'Python programming is fun' write a program that converts and displays to screen the string in (a) upper case, (b) lower case and (c) splits the string into individual words</p>Read more ...Splitting strings<p>Given the string 'Python programming is fun' use string slicing to extract the following words from the string: (a) 'gram' (b) 'Python' (c) 'program'</p>Read more ...Word Count<p>Write a Python program that takes a user's input as a sentence and counts the number of words in that sentence. Words are separated by spaces. Print the word count. (For this exercise look up the `split()` method.)</p>Read more ..."},{"location":"topics/python/06_functions.html","title":"Functions","text":""},{"location":"topics/python/06_functions.html#functions","title":"Functions","text":"<p>Objectives</p> <ul> <li>Understand the concept of functions and procedures in Python.</li> <li>Learn why functions are useful in programming.</li> <li>Discover when and how to use functions.</li> <li>Understand the roles of arguments and parameters in functions.</li> <li>Practice writing and using functions with simple examples.</li> </ul> <p>Most problems we encounter can be broken down in to a series of steps.  Earlier we saw the following series of steps to make a sandwich:</p> <ul> <li>Go to the kitchen.</li> <li>Open the refrigerator.</li> <li>Take out the bread, cheese, and lettuce.</li> <li>Put two slices of bread on a plate.</li> <li>Put some cheese and lettuce on one slice of bread.</li> <li>Put the other slice of bread on top.</li> <li>Close the sandwich.</li> <li>Bring it to me.</li> </ul> <p>Here's we've decomposed the larger problem into a series of smaller problems each can be tackled on their own but when put together will result in a sandwich being made (hopefully).</p>"},{"location":"topics/python/06_functions.html#example-4","title":"Example 4","text":"<p>Read the following code and predict what the output will be using the questions below as a prompt.</p> <pre><code>def convert_celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ndef calculate_average(temperatures):\n    return sum(temperatures) / len(temperatures)\n\ndef greet(name):\n    return f\"Hello, {name}! Welcome to Climate Quest.\"\n\nweekly_celsius_temps = [22, 24, 20, 26, 23, 25, 21]\naverage_temp = calculate_average(weekly_celsius_temps)\nprint(\"Average Weekly Temperature (Celsius):\", average_temp)\n\nname = \"Student\"\ngreeting = greet(name)\nprint(greeting)\n\ntemp_in_fahrenheit = convert_celsius_to_fahrenheit(average_temp)\nprint(\"Average Weekly Temperature (Fahrenheit):\", temp_in_fahrenheit)\n</code></pre> <ul> <li>\"What will <code>convert_celsius_to_fahrenheit(25)</code> return?\"</li> <li>\"What does the <code>calculate_average</code> function do with the list of temperatures?\"</li> <li>\"What will be stored in <code>greeting</code>?\"</li> <li>\"What will be printed for the average temperature in Fahrenheit?\"</li> </ul> Answers <ol> <li>What will <code>convert_celsius_to_fahrenheit(25)</code> return? 77</li> <li>What does the <code>calculate_average</code> function do with the list of temperatures? Calculates the average, which is 23.0 for the provided list.</li> <li>What will be stored in <code>greeting</code>? <code>\"Hello, Student! Welcome to Climate Quest.\"</code></li> <li>What will be printed for the average temperature in Fahrenheit? <code>Average Weekly Temperature (Fahrenheit): 73.4</code></li> </ol> <p>Copy and paste the example code into your code editor.  Run the code to check your predictions.</p>"},{"location":"topics/python/06_functions.html#syntax-of-a-functions","title":"Syntax of a functions","text":"<p>To create a function in Python, we use the <code>def</code> keyword, followed by the function name, pair of parentheses, <code>()</code>, followed by a colon, <code>:</code>. </p> <p>For example:</p> <pre><code>def my_function():\n    # Function body\n    pass\n</code></pre> <p>Note</p> <p>The keyword <code>pass</code> is a statement that does not do anything.  It is useful when scaffolding code as in the previous example.  We know we want a function that calculates the area of a rectangle but are either unsure of how to complete this function or want to return to it later so we enter <code>pass</code>.  Our main program will still call that function but nothing will happen.</p>"},{"location":"topics/python/06_functions.html#naming-the-function","title":"Naming the function","text":"<p>Similar to the naming of variables and constants, the name we give to our function should be self-documenting.  In our example program one of the functions is named <code>convert_celcius_to_fahrenheit()</code>.  This name describes exactly what this function will do!  It might be more to type than say <code>conv_cel to fahr()</code> of <code>c_to_f()</code> but being more precise will result in your code being easier to read and maintain.</p> <p>The syntax required can be summarised as:</p> <ul> <li>Function Name: Descriptive and meaningful (follow naming conventions), the identifier for the function</li> <li>Parentheses: Used to pass arguments (inputs) to the function.</li> <li>Colon: Indicates the beginning of the function body.</li> <li>Indentation: All code inside the function must be indented.</li> <li>Statement(s): The body of the function, statements that get executed every time the function is called.</li> </ul> <p>Using functions are highly recommended.  They provide: </p> <ul> <li>Modularity: Divide your code into smaller, self-contained modules (functions) for easier development and debugging.</li> <li>Reusability: Write code once and use it multiple times, reducing duplication.</li> <li>Readability: Functions make code more understandable and concise.</li> <li>Maintenance: Changes are easier to implement and test within a function.</li> </ul>"},{"location":"topics/python/06_functions.html#indenting-the-function-body","title":"Indenting the function body","text":"<p>When defining a function the body of the code in that function must be indented to show the code belongs to that function.</p> <pre><code>def convert_celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius = 24\nprint(convert_celsius_to_fahrenheit(celsius)\n</code></pre> <p>The function body here only has one line (line 2), but it has been indented (by four spaces).  Your code editor will probably indent this line automatically.</p> <p>Lines 4 and 5 are not part of the function, they are lined up with the left-hand margin.</p> <p>Note</p> <p>The indentation feature of Python is really important to understand:  </p> <p>Code statements can be grouped into blocks.  The function is an example of a block of code, indicated by the colon at the end of the function header.  As we will see late, we can also create a block of code to take a decision (an <code>if</code> statement), or to repeat a block of code (a <code>for</code> loop, or a <code>while</code> loop).  These also end with a colon and statements belonging to these blocks must also be indented.</p>"},{"location":"topics/python/06_functions.html#functions-return-a-value","title":"Functions return a value","text":"<pre><code>def convert_celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius = 24\nfahrenheit = convert_celsius_to_fahrenheit(celsius)\n</code></pre> <p>Note</p> <p>All functions, by definition, will return a value.  Here the fahrenheit equivalent of the given celsius value is returned from our function (line 2) and assigned to the variable 'fahrenheit' (line 5)</p>"},{"location":"topics/python/06_functions.html#procedures-vs-functions","title":"Procedures vs Functions","text":"<p>Look at the following code, it assumes the functions <code>get_value()</code>, <code>calculate_area()</code> but these are not shown, also <code>print_result()</code>:</p> <pre><code>def main():\n    length = get_value()\n    height = get_value()\n    area = calculate_area(length, height)\n    print_result(area)\n</code></pre> <p>The statements in the first three lines are assignment statements.  An item of data is being returned from that block of code and immediately assigned to a variable.</p> <p>Line 5 is different, <code>print_result(area)</code>.  Any value being returned here is not assigned to a variable.  This is known as a procedure.  </p> <p>We might expect <code>print_result()</code> to be:</p> <pre><code>def print_result(area):\n    print(area)\n</code></pre> <p>Notice there is no return statement here.  This is what makes it a procedure and not a function.</p> <p>Warning</p> <p>This is not strictly true in Python, as a procedure will always return <code>None</code> when it is called, but we generally ignore this and it is not used.</p> <p>To return a value from a function we have to use the <code>return</code> statement.  Here's how it might be used for the <code>get_value()</code> function:</p> <pre><code>def get_value():\n    print(\"Enter a value: \")    # prompt for a value\n    value = int(input())        # cast the input to an integer\n    return value                # return the input back to the main program\n</code></pre> <p>Similarly to calculate the area the result is being returned:</p> <pre><code>def calculate_area(length, height):\n    return length * height\n</code></pre> <p>That return value needs to be stored somewhere, yes, in a variable: <code>area = calculate_area(length, height)</code>.</p>"},{"location":"topics/python/06_functions.html#parameters-and-arguments","title":"Parameters and Arguments","text":"<pre><code>def convert_celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius = 24\nfahrenheit = convert_celsius_to_fahrenheit(celsius)\n</code></pre> <p>Line 1 declares the function using the <code>def</code> keyword, followed by the name of the function and then a pair of brackets.  To calculate the fahrenheit value we need to know the celsius value.  This is passed in as a parameter to the function.</p> <p>Think of this parameter as a placeholder.  We do no know the value yet, it could be any value as defined by the user or our program.</p> <p>Line 5 calls our function, using the function name followed by the argument to pass to the function.  In this instance it is the value \\(24\\).</p> <p>When the function is executed Python will create a new local variable and copy the value of the argument to that new variable.  When the function finishes that local variable will no longer be available.</p> <p>In this instance we happen to use the same name for our argument and our parameter - this can aid readability but they could have been different e.g.</p> <pre><code>def convert_celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius_input = 24\nfahrenheit = convert_celsius_to_fahrenheit(celsius_input)\n</code></pre> <p></p> <p>Remember:</p> <ul> <li>Parameters: Variables declared in the function header.</li> <li>Arguments: Values passed to the function when it's called.</li> </ul>"},{"location":"topics/python/06_functions.html#calling-a-function","title":"Calling a function","text":"<p>To call a function we enter the name for the function and any arguments that need to be passed to the function from another part of our program.  The function call must come after the function definition in Python.</p> <pre><code>def calculate_area(rec_length, rec_height):     # function definition\n    return rec_length * rec_height)\n\nlength = 10\nheight = 5\narea = calculate_area(length, height)           # function call\nprint(area)\n</code></pre>"},{"location":"topics/python/06_functions.html#default-parameters","title":"Default parameters","text":"<p>Consider the following example:</p> <pre><code>def greet(name, message=\"Hello\"):\n    print(f\"{message} {name})\n</code></pre> <p>Python allows for functions (and procedures) to have default arguments.  The procedure <code>greet()</code> can now be called with only one argument:</p> <pre><code>greet(\"Sally\")          # \"Hello Sally\"\n</code></pre> <p>Or we can override the default parameter replacing the default message with one of our own:</p> <pre><code>greet(\"Sally\", \"Hi\")    # \"Hi Sally\"\n</code></pre>"},{"location":"topics/python/06_functions.html#why-bother-with-functions","title":"Why bother with functions?","text":"<p>It can be a lot of trouble to organise your code into these blocks, functions, so why bother?  There are a number of good reasons:</p> <ul> <li>Providing a name for a group of statements that are responsible for a task will make the program easier to read and debug</li> <li>Using functions can eliminate the need to duplicate code.  One of the guiding rules of good programming style is the acronym DRY.  This stands for Don't Repeat Yourself</li> <li>With a long program decomposed into smaller chunks it becomes easier to locate where there might be a bug.  It can also be easier to start with a high level description (even as code) and then progressively break each of these down into as many functions as might be required.</li> <li>Well designed functions can be used in other programs.  Once its written and tested you can use it elsewhere.</li> </ul>"},{"location":"topics/python/06_functions.html#keyword-parameters","title":"Keyword parameters","text":"<p>When you call a function, you usually pass values as arguments in the same order as the function's parameters are defined. However, sometimes it's more convenient to specify which argument corresponds to which parameter by using their names. These are called keyword parameters.</p> <p>Let's say we have our simple function that calculates the area of a rectangle, we can call this function using keyword parameters:</p> <pre><code>area = calculate_area(length=5, width=10)\n</code></pre> <p>The names of the parameters are explicitly mentioned with their values.  It makes the code more readable, especially when you have a function that takes in several arguments.  If the keyword parameter is used the order of the variables do not matter.</p>"},{"location":"topics/python/06_functions.html#summary","title":"Summary","text":"<p>Functions are fundamental to programming in Python. They promote code organization, reusability, and readability. As you continue your programming journey, you'll find that functions become an essential tool for solving complex problems efficiently.</p> <p>Cheat Sheet for functions<sup>1</sup></p>"},{"location":"topics/python/06_functions.html#activity","title":"Activity","text":"<p>Using the following code:</p> <pre><code>def add(a, b):\n    return a + b\n\ndef multiply(a, b):\n    return a * b\n\nnum1 = 10\nnum2 = 5\n\nsum_result = add(num1, num2)\nprint(\"Sum:\", sum_result)\n\nproduct_result = multiply(num1, num2)\nprint(\"Product:\", product_result)\n</code></pre> <p>Modify this code:</p> <ul> <li>Change the variable values and observe the output.</li> <li>Add more functions that perform different basic tasks.</li> <li>Experiment with returning different types of values (e.g., strings, booleans).</li> </ul>"},{"location":"topics/python/06_functions.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 4 - Functions</p>"},{"location":"topics/python/06_functions.html#questions","title":"Questions","text":"1. What is the main purpose of using functions in programming?To make the code longer and more complexTo reduce duplication of code and make the program easier to maintainTo confuse other programmersTo slow down program executionFunctions help in organizing code by encapsulating repetitive tasks. This makes the code more readable, reusable, and easier to maintain.Submit 2. In Python, how do you define a function?Using the <code>def</code> keyword followed by the function name, parentheses, and a colonUsing the <code>function</code> keyword followed by the function name and parenthesesUsing the <code>define</code> keyword followed by the function name and parenthesesUsing the <code>func</code> keyword followed by the function name and a semicolonIn Python, a function is defined using the <code>def</code> keyword followed by the function name, parentheses (which may contain parameters), and a colon. The function body is indented underneath this line.Submit 3. What is the difference between a function and a procedure in Python?Functions return values, procedures do notFunctions do not use parameters, while procedures doFunctions are called with <code>call()</code>, and procedures are called with <code>execute()</code>There is no difference; the terms are interchangeable.The primary distinction is that functions return a value after execution, whereas procedures (often just another term for functions that don\u00e2\u20ac\u2122t return a value) do not.Submit 4. When defining a function, what are the components included in the function header?Function name and indentationFunction name, parentheses for parameters, and a colonFunction name, parentheses for arguments, and a semicolonFunction name, parentheses for return values, and a commaThe function header in Python includes the function name, parentheses (which may contain parameters), and a colon. This is followed by the indented function body.Submit 5. What is the purpose of function parameters in Python?They are used to specify the return value of a functionThey allow you to pass data into a function for processingThey determine the indentation level of a functionThey are optional and not required for defining functionsFunction parameters are variables that allow data to be passed into a function, making the function flexible and able to handle different inputs.Submit 6. Which keyword is used to return a value from a function in Python?<code>result</code><code>output</code><code>return</code><code>response</code>The <code>return</code> keyword is used in Python to exit a function and return a value to the caller. This is essential when the function is supposed to provide a result.Submit 7. What does it mean to have a 'default parameter' in a function?It means the parameter cannot be changedIt means the parameter is mandatoryIt means the parameter has a predefined valueIt means the parameter is hidden from the functionA default parameter is one that has a predefined value in the function definition. If no argument is provided for that parameter when the function is called, the default value is used.Submit 8. When calling a function with keyword parameters, what advantage does it offer?It allows you to call the function without any parametersIt specifies which argument corresponds to which parameter, making the code more readableIt allows you to call the function with a variable number of argumentsIt prevents the function from being calledKeyword arguments improve readability by explicitly stating which value corresponds to which parameter, making the function call easier to understand.Submit 9. What is the purpose of using functions in a program's structure?To make the program run fasterTo make the program more complexTo organize and modularize the codeTo eliminate the need for variablesFunctions help in organizing and modularizing code, breaking down complex problems into smaller, manageable sections, and improving code clarity and reusability.Submit 10. In Python, where should the function call be placed if you want it to be the entry point for your program?Before defining the functionAfter defining the functionInside the function definitionIt doesn't matter where the function call is placedIn Python, a function must be defined before it is called. This ensures that the Python interpreter knows what the function is supposed to do when it encounters the function call.Submit"},{"location":"topics/python/06_functions.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Area of a triangle<p>Write a Python function called calculate_triangle_area(base, height) that calculates and returns the area of a triangle using the `formula area = 0.5 * base * height`. Then, call this function from your main program and print the result.</p>Read more ...BMI Calculator Function<p>A previous task was to write a program to calculate the BMI of an individual from their height and weight.  Use the program structure from this chapter to amend that program so the height and weight are entered via a function, so too the BMI calculation and the display of the result</p>Read more ...String Reversal Function<p>Write a function that takes a string as a parameter and returns the reverse of that string.  Use string slicing to help</p>Read more ... <ol> <li> <p>[https://ehmatthes.github.io/pcc_3e/cheat_sheets/(https://ehmatthes.github.io/pcc_3e/cheat_sheets/)]\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/python/07_built-in-functions.html","title":"Built in functions","text":""},{"location":"topics/python/07_built-in-functions.html#built-in-functions","title":"Built in functions","text":"<p>Objectives</p> <ul> <li>Understand the concept of built-in functions in Python.</li> <li>Learn how to use some commonly used built-in functions for math, strings, and basic input/output.</li> <li>Explore the purpose and usage of functions like <code>print()</code>, <code>len()</code>, <code>input()</code>, and more.</li> </ul> <p>As well as creating our own functions Python comes with a wide range of built-in functions that perform various tasks, making programming easier and more efficient. These functions are part of Python's standard library and can be used without the need for additional installations.</p> <p>There are a whole host of other functions available to us that can be either <code>import</code>ed to our program e.g. the <code>random</code> library, or installed e.g. the <code>pandas</code> library.  We'll consider this approach in a later section</p>"},{"location":"topics/python/07_built-in-functions.html#example-5","title":"Example 5","text":"<pre><code>print(\"Welcome to the Built-in Functions Lesson!\")\nuser_name = input(\"Enter your name: \")\nprint(\"Hello,\", user_name)\n\nsample_string = \"Climate\"\nstring_length = len(sample_string)\nprint(\"The length of the string is:\", string_length)\n\nvalue = input(\"Enter a whole number: \")\nprint(type(value))\n\nvalue_int = int(value)\nprint(type(value))\n\nnumber = -7.25\nabs_number = abs(number)\nprint(\"The absolute value is:\", abs_number)\n\ndecimal_number = 3.14159\nrounded_number = round(decimal_number, 2)\nprint(\"The rounded value is:\", rounded_number)\n</code></pre> <p>Before running this code, read it and predict what you think will be displayed for the following:</p> <ul> <li>line 2: What will <code>input(\"Enter your name: \")</code> do?</li> <li>line 6: What does the <code>len</code> function return for the string 'Climate'?</li> <li>line 10 and 13: what will be output from the <code>type()</code> function in both cases?</li> <li>line 16: What will be the result of <code>abs(-7.25)</code>?</li> <li>line 20: What will <code>round(3.14159, 2)</code> return?</li> </ul> <p>Run the program in a Python environment and compare the actual output with your predictions.</p>"},{"location":"topics/python/07_built-in-functions.html#commonly-used-built-in-functions","title":"Commonly Used Built-In Functions","text":"Function Description Example Output <code>print()</code> We have seen this used in previous sections. The <code>print()</code> function is used to display information on the screen. It can print text, variables, and the result of expressions. <code>print(\"Welcome\")</code> \"Welcome\" <code>len()</code> The <code>len()</code> function returns the length of a string. It counts the number of characters in the string. <code>len(\"Hello\")</code> 5 <code>input()</code> The <code>input()</code> function allows user input. It waits for the user to enter data and returns it as a string. <code>int()</code> used for data type conversion. <code>int()</code> converts a value to an integer <code>float()</code> used for data type conversion. <code>float()</code> converts a value to an real number <code>str()</code> The <code>str()</code> function converts other data types to strings <code>max()</code> used to find the maximum value among a set of values <code>min()</code> used to find the minimum value among a set of values. <code>abs()</code> The <code>abs()</code> function returns the absolute value of a number. <code>round()</code> The <code>round()</code> function rounds a floating-point number to the nearest integer <code>str.upper()</code> Converts characters in <code>str</code> variable to upper case <code>str.lower()</code> Converts characters in <code>str</code> variable to lower case <code>chr()</code> <code>chr()</code> converts an ASCII code (integer) to a character <code>ord()</code> <code>ord()</code> converts a character to its ASCII integer code"},{"location":"topics/python/07_built-in-functions.html#activity","title":"Activity","text":"<p>Copy and paste the following code into a code editor, before running the code read it and predict what you think the output will be.  Then make changes to the code as indicated below.</p> <p></p><pre><code>print(\"Welcome to the Modified Built-in Functions Lesson!\")\nage = int(input(\"Enter your age: \"))\nprint(\"You are\", age, \"years old.\")\n\nanother_string = \"Environmental Science\"\nstring_upper = another_string.upper()\nstring_lower = another_string.lower()\nprint(\"Uppercase:\", string_upper)\nprint(\"Lowercase:\", string_lower)\n\nfloat_number = float(input(\"Enter a decimal number: \"))\nrounded_float = round(float_number)\nprint(\"Rounded number:\", rounded_float)\n\nnegative_number = int(input(\"Enter a negative integer: \"))\nabsolute_value = abs(negative_number)\nprint(\"Absolute value:\", absolute_value)\n</code></pre> Make the following changes: <ul> <li>Change the string and observe the output of the <code>upper()</code> and <code>lower()</code> methods.</li> <li>Input a decimal number and see the rounded result.</li> <li>Input a negative integer and see the absolute value.</li> </ul>"},{"location":"topics/python/07_built-in-functions.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 5 - Built-in Functions</p>"},{"location":"topics/python/07_built-in-functions.html#questions","title":"Questions","text":"1. What is the primary purpose of the <code>print()</code> function in Python?To perform mathematical calculationsTo find the maximum value in a listTo display information on the screenTo convert data typesThe <code>print()</code> function is used to output data to the console or terminal, allowing the user to see information or results generated by the program.Submit 2. Which built-in function returns the length of a string?<code>size()</code><code>length()</code><code>count()</code><code>len()</code>The <code>len()</code> function in Python returns the number of characters in a string, or the number of items in a list, tuple, or other collection.Submit 3. What does the input() function do in Python?It performs rounding operationsIt allows user input and returns it as a stringIt calculates the absolute value of a numberIt converts a value to uppercaseThe <code>input()</code> function is used to prompt the user for input and returns that input as a string, which can then be processed or used in the program.Submit 4. How can you convert a string containing a number, like 42, to an actual integer in Python?Use the <code>int()</code> functionUse the <code>str()</code> functionUse the float() functionUse the <code>round()</code> functionThe <code>int()</code> function converts a string representing a number into an integer, which can then be used in mathematical operations.Submit 5. What does the <code>max()</code> function do in Python?Returns the length of a stringReturns the maximum value among a set of valuesConverts all characters to uppercaseCalculates the sum of all elements in a listThe <code>max()</code> function returns the largest item in an iterable or the largest of two or more arguments provided.Submit 6. Which built-in function is used to find the absolute value of a number?<code>abs()</code><code>max()</code><code>round()</code><code>len()</code>The <code>abs()</code> function returns the absolute value of a number, which is the distance of the number from zero, without regard to whether it is positive or negative.Submit 7. What does the <code>round()</code> function do to a floating-point number?Converts it to an integerRounds it to the nearest integerConverts it to a stringFinds its square rootThe <code>round()</code> function rounds a floating-point number to the nearest integer, optionally specifying the number of decimal places to round to.Submit 8. Which function is used to change all characters in a string to uppercase?<code>str.capitalize()</code><code>str.upper()</code><code>str.lower()</code><code>str.title()</code>The <code>str.upper()</code> method returns a new string where all the characters in the original string have been converted to uppercase.Submit 9. What is the purpose of the chr() function in Python?To find the length of a stringTo calculate mathematical expressionsTo convert a character to its integer representationTo perform character encodingThe <code>chr()</code> function returns the string representing a character whose Unicode code point is the integer passed. This is used to convert numbers back into their corresponding characters.Submit 10. Which function is used to convert an integer to its corresponding character?<code>int.char()</code><code>chr()</code><code>char()</code><code>int.to_char()</code>The <code>chr()</code> function is used to convert an integer (representing a Unicode code point) into its corresponding character in Python.Submit"},{"location":"topics/python/07_built-in-functions.html#programming-tasks","title":"Programming Tasks","text":""},{"location":"topics/python/08_selection.html","title":"Selection","text":""},{"location":"topics/python/08_selection.html#selection","title":"Selection","text":"<p>Objectives</p> <ul> <li>To understanding selection in algorithms and code</li> <li>Define the purpose of selection (conditional statements) in programming.</li> <li>Learn the syntax of <code>if</code>, <code>elif</code>, and <code>else</code> statements in Python</li> <li>List and explain the relational operators used in conditions (e.g., ==, !=, &gt;, &lt;, &gt;=, &lt;=).</li> <li>Review examples of Conditional Statements</li> <li>Define the role of the <code>elif</code> statement in handling multiple conditions.</li> <li>Differentiate the use of <code>elif</code> from <code>if</code> and <code>else</code>.</li> </ul>"},{"location":"topics/python/08_selection.html#introduction","title":"Introduction","text":"<p>As part of our algorithm we will often encounter a moment when a decision needs to be taken, and depending on the outcome of that decision, either <code>True</code> or <code>False</code>, execute a different statement or set of statements. In Python, we use <code>if</code>, <code>elif</code> (else if), and <code>else</code> statements to implement selection.  We also rely on the relational operators covered earlier i.e. <code>==</code>, <code>!=</code>, <code>&gt;</code> etc..</p> <pre><code>if True\n    do something\nelse\n    do this instead\n</code></pre>"},{"location":"topics/python/08_selection.html#example-6","title":"Example 6","text":"<pre><code>print(\"Welcome to the Climate Data Analyzer\")\n\ntemperature = float(input(\"Enter the temperature in Celsius: \"))\n\nif temperature &lt; 0:\n    print(\"It's freezing cold!\")\nelif temperature &gt;= 0 and temperature &lt;= 20:\n    print(\"The weather is cool.\")\nelif temperature &gt; 20 and temperature &lt;= 30:\n    print(\"The weather is warm.\")\nelse:\n    print(\"It's hot outside!\")\n</code></pre> <p>Predict what the output of the program will be for these inputs:</p> <ul> <li>\"What will the program print if the temperature is -5?\"</li> <li>\"What will the program print if the temperature is 15?\"</li> <li>\"What will the program print if the temperature is 25?\"</li> <li>\"What will the program print if the temperature is 35?\"</li> </ul> <p>Run the program in a Python environment and compare the actual output with your predictions.</p>"},{"location":"topics/python/08_selection.html#1-the-if-statement","title":"1. The <code>if</code> Statement","text":"<p>The <code>if</code> statement allows you to execute a block of code only if a specified condition is true.</p> <pre><code>if condition:\n    # code to execute if condition is true\n</code></pre>"},{"location":"topics/python/08_selection.html#2-the-elif-statement","title":"2. The <code>elif</code> Statement","text":"<p>The <code>elif</code> statement is used when you have multiple conditions to check. It is executed if the preceding <code>if</code> or <code>elif</code> conditions are false and its own condition is true.</p> <pre><code>if condition1:\n    # code to execute if condition1 is true\nelif condition2:\n    # code to execute if condition2 is true\n</code></pre> <p>Note</p> <p>It makes sense to read <code>elif</code> as \"else if\"</p>"},{"location":"topics/python/08_selection.html#3-the-else-statement","title":"3. The <code>else</code> Statement","text":"<p>The <code>else</code> statement is used as a fallback option if none of the preceding conditions are true.</p> <pre><code>if condition:\n    # code to execute if condition is true\nelse:\n    # code to execute if condition is false\n</code></pre>"},{"location":"topics/python/08_selection.html#4-conditions","title":"4. Conditions","text":"<p>The condition will always be some kind of Boolean expression that evaluates to either <code>True</code> or <code>False</code> and will use the relational operators we saw earlier:</p> <ol> <li> <p>Equal to (<code>==</code>): Checks if two values are equal.</p> </li> <li> <p>Not equal to (<code>!=</code>): Checks if two values are not equal.</p> </li> <li> <p>Greater than (<code>&gt;</code>): Checks if one value is greater than another.</p> </li> <li> <p>Less than (<code>&lt;</code>): Checks if one value is less than another.</p> </li> <li> <p>Greater than or equal to (<code>&gt;=</code>): Checks if one value is greater than or equal to another.</p> </li> <li> <p>Less than or equal to (<code>&lt;=</code>): Checks if one value is less than or equal to another.</p> </li> </ol> <p>These conditions can be further combined using <code>and</code>, <code>or</code> and <code>not</code> to create complex conditional expressions.</p>"},{"location":"topics/python/08_selection.html#further-examples","title":"Further Examples","text":""},{"location":"topics/python/08_selection.html#example-1-basic-if-statement","title":"Example 1: Basic <code>if</code> Statement","text":"<pre><code>age = 16\nif age &gt;= 18:\n    print(\"You can vote!\")\n</code></pre>"},{"location":"topics/python/08_selection.html#example-2-if-elif-else-statement","title":"Example 2: <code>if-elif-else</code> Statement","text":"<pre><code>score = 85\nif score &gt;= 90:\n    print(\"A\")\nelif score &gt;= 80:\n    print(\"B\")\nelse:\n    print(\"C\")\n</code></pre>"},{"location":"topics/python/08_selection.html#activity","title":"Activity","text":"<p>Using the following program, make the changes suggested: </p><pre><code>print(\"Welcome to the Advanced Climate Data Analyzer\")\n\ntemperature = float(input(\"Enter the temperature in Celsius: \"))\nhumidity = int(input(\"Enter the humidity percentage: \"))\n\nif temperature &lt; 0:\n    print(\"It's freezing cold!\")\nelif temperature &gt;= 0 and temperature &lt;= 20:\n    if humidity &gt; 80:\n        print(\"The weather is cool and humid.\")\n    else:\n        print(\"The weather is cool.\")\nelif temperature &gt; 20 and temperature &lt;= 30:\n    if humidity &gt; 60:\n        print(\"The weather is warm and humid.\")\n    else:\n        print(\"The weather is warm.\")\nelse:\n    if humidity &gt; 40:\n        print(\"It's hot and humid outside!\")\n    else:\n        print(\"It's hot outside!\")\n</code></pre> <ul> <li>Add a new condition for temperatures above 35 degrees.</li> <li>Change the humidity thresholds and observe the different outputs.</li> </ul>"},{"location":"topics/python/08_selection.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 6 - Selection</p>"},{"location":"topics/python/08_selection.html#summary","title":"Summary","text":"<p>Cheat sheet for selection (and iteration)<sup>1</sup></p>"},{"location":"topics/python/08_selection.html#questions","title":"Questions","text":"1. What is the purpose of selection (conditional statements) in programming?To execute statements in sequenceTo repeat a block of codeTo make decisions and execute different statements based on conditionsTo define functions and classesConditional statements allow programs to make decisions and execute different code based on whether conditions evaluate to True or False.Submit 2. What is the correct syntax for an <code>if</code> statement in Python?<code>if (condition) {}</code><code>if condition:</code><code>if condition then:</code><code>if: condition</code>The correct syntax for an <code>if</code> statement in Python is to use <code>if condition:</code> followed by an indented block of code.Submit 3. Which relational operator checks if two values are not equal in Python?<code>==</code><code>!=</code><code>&gt;</code><code>&lt;</code>The <code>!=</code> operator checks if two values are not equal.Submit 4. What will the program output if the temperature is 25?<pre><code>temperature = 25\nif temperature &lt; 0:\n    print(\"It's freezing cold!\")\nelif temperature &gt;= 0 and temperature &lt;= 20:\n    print(\"The weather is cool.\")\nelif temperature &gt; 20 and temperature &lt;= 30:\n    print(\"The weather is warm.\")\nelse:\n    print(\"It's hot outside!\")</code></pre>\"It's freezing cold!\"\"The weather is cool.\"\"The weather is warm.\"\"It's hot outside!\"The temperature 25 falls within the range of 20 &lt; temperature &lt;= 30, so the program prints 'The weather is warm.'Submit 5. What is the role of the <code>elif</code> statement in Python?To execute a block of code if an initial <code>if</code> condition is false and its own condition is trueTo execute a block of code regardless of any conditionsTo terminate the programTo loop through a block of code multiple timesThe <code>elif</code> statement is used to check additional conditions if the previous <code>if</code> or <code>elif</code> conditions were false.Submit 6. Which of the following conditions will check if a value is both greater than 10 and less than 20?<code>value &gt; 10 or value &lt; 20</code><code>value &gt; 10 and value &lt; 20</code><code>value &gt; 10 and value &gt; 20</code><code>value &lt; 10 and value &lt; 20</code>The condition <code>value &gt; 10 and value &lt; 20</code> correctly checks if a value is greater than 10 and less than 20.Submit 7. What will the following code output if <code>score = 85</code>?<pre><code>score = 85\nif score &gt;= 90:\n    print(\"A\")\nelif score &gt;= 80:\n    print(\"B\")\nelse:\n    print(\"C\")\n</code></pre>\"A\"\"B\"\"C\"\"None\"The score 85 falls within the range of 80 &lt;= score &lt; 90, so the program will print 'B'.Submit 8. Which of the following conditions will always evaluate to <code>True</code>?<code>5 &gt; 10</code><code>10 == 10</code><code>20 &lt; 15</code><code>8 != 8</code><code>10 == 10</code> is always true because the two values are equal.Submit 9. What does the <code>else</code> statement do in Python?It checks if a condition is trueIt provides an alternative block of code to execute if the preceding <code>if</code> and <code>elif</code> conditions are falseIt repeats a block of code multiple timesIt defines a new functionThe <code>else</code> statement in Python provides a fallback block of code that is executed if none of the preceding <code>if</code> or <code>elif</code> conditions are true.Submit 10. What is the output of the following code if <code>temperature = -5</code>?<pre><code>if temperature &lt; 0:\n    print(\"It's freezing cold!\")\nelif temperature &gt;= 0 and temperature &lt;= 20:\n    print(\"The weather is cool.\")\nelse:\n    print(\"It's hot outside!\")\n</code></pre>\"It's freezing cold!\"\"The weather is cool.\"\"It's hot outside!\"\"None\"Since the temperature is -5, which is less than 0, the program will print 'It's freezing cold!'.Submit"},{"location":"topics/python/08_selection.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Grade Calculator<p>Write a Python program that takes a test score as input and prints the corresponding letter grade ('A', 'B', 'C', 'D', or 'F') based on the following grading scale A:  90 or above, B:  80-89, C: 70-79, D: 60-69, F: Below 60</p>Read more ...Leap Year Checker<p>Write a Python program that checks if a given year is a leap year. A leap year is divisible by 4 but not divisible by 100 unless it is divisible by 400. Print 'Leap year' or 'Not a leap year' accordingly.   Use the following pseudocode to help with the logic:</p>Read more ...Rock, Paper, Scissors<p>Write a Python program that lets a user play the game of Rock, Paper, Scissors against the computer. Implement the game logic and provide instructions for the user to input their choice.</p>Read more ...BMI Calculator<p>Write a Python program to calculate the Body Mass Index BMI or a user given a height and a weight.  The formula to use: bmi = weight / (height ** 2). Output the result 'Underweight' if the BMI &lt; 18.5; 'Obese' if the BMI is &gt; 30.5; 'Normal Weight' if the BMI is between 18.5 and &lt; 25; 'Overweight' if the BMI is between 25 and 30.</p>Read more ... <ol> <li> <p>[https://ehmatthes.github.io/pcc_3e/cheat_sheets/(https://ehmatthes.github.io/pcc_3e/cheat_sheets/)]\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/python/09_iteration.html","title":"Iteration","text":""},{"location":"topics/python/09_iteration.html#iteration","title":"Iteration","text":"<p>Objectives</p> <ul> <li>Define iteration in programming and its importance.</li> <li>Recognize the concept of loops as a fundamental element of iteration.</li> <li>Differentiate between for and while loops in Python.</li> <li>Explain when to use a for loop and when to use a while loop.</li> <li>Describe the purpose of the <code>range()</code> function in for loops.</li> <li>Illustrate the use of for loops to iterate over sequences like lists, tuples, and strings.</li> <li>Explain the concept of nested for loops, and demonstrate the use of nested for loops with examples.</li> <li>Understand the structure of a while loop in Python.</li> <li>Compare and contrast for loops and while loops.</li> </ul> <p>Iteration is a fundamental concept in programming that allows you to execute a block of code repeatedly. Think of \"iteration\" is a word that simply means \"loop\", doing something over and over again.  </p> <p>Iteration allows certain sections of our program to be repeated.  We just have to be careful not repeat these statements for ever!</p> <p>Consider, if wanted to print a list of all values between 1 and 10 we could do the following:</p> <pre><code>print(1)\nprint(2)\nprint(3)\nprint(4)\nprint(5)\n# etc..\n</code></pre> <p>Clearly this gets tedious and the loop constructs in Python makes this so much easier.</p>"},{"location":"topics/python/09_iteration.html#example-7","title":"Example 7","text":"<pre><code># Example program with for and while loops\nprint(\"Counting using for loop:\")\nfor i in range(1, 6):\n    print(i)\n\nprint(\"\\nCounting using while loop:\")\ncount = 1\nwhile count &lt; 6:\n    print(count)\n    count += 1\n</code></pre> <p>Predict what the output of the program will be for the following:</p> <ul> <li>What will be printed by the <code>for</code> loop?</li> <li>What will be printed by the <code>while</code> loop?</li> </ul> <p>Run the program in a Python environment and compare the actual output with your predictions.</p> <p>Python provides two main types of loops: <code>for</code> and <code>while</code> loops.</p>"},{"location":"topics/python/09_iteration.html#the-for-loop","title":"The <code>for</code> loop","text":"<p>A <code>for</code> loop is sometimes call a counted loop because, simply, it repeats a set number of times effectively counting as it goes.  For this we need to provide a starting value and a stopping value:</p> <pre><code>for i in range(1,11):\n    print(i)            # print values from 1 to 10\n</code></pre> <p>The <code>range()</code> function generates a sequence of numbers.  In this example, the <code>range()</code> function has two arguments, the first is the start value, \\(1\\), the second is the stop value, \\(11\\).  Why \\(11\\)?  This may seem confusing at first but it means that when the control variable, <code>i</code>, has the value \\(11\\) the loop will end and the following <code>print()</code> statement will not be executed.</p> <p>There are two variations on the <code>range()</code> function:</p> <ul> <li><code>for i in range(10)</code>: only the stop value has been specified.  The start value defaults to \\(0\\).</li> <li><code>for i in range(1,20,2)</code>: an additional parameter, a skip value.  Here <code>i</code> will start with \\(1\\) and when the loop is repeated the skip value is added making \\(3\\) and the \\(5\\) and so on.</li> </ul> <p>A <code>for</code> loop can also used to iterate over a sequence (such as a list, tuple, string) and execute a block of code for each item in the sequence.</p> <p>Note</p> <p>We've not yet met lists but they are useful when we have a collection of items that share a common name e.g. <code>colours = [\"red\", \"brown\", \"white\", \"black]</code>.  A <code>for</code> loop is excellent for moving over each of the items in the list.</p> <pre><code>colours = [\"red\", \"brown\", \"white\", \"black\"]\nfor item in colours:\n    print(item)\n</code></pre> <p>A <code>string</code> is actually a list of characters.  Try the following code in your IDE:</p> <pre><code>phrase = \"Hello, World!\"\nfor ch in phrase:\n    print(ch)\n</code></pre>"},{"location":"topics/python/09_iteration.html#nested-for-loops","title":"Nested <code>for</code> Loops","text":"<p>A loop can be placed inside another loop:</p> <pre><code>for i in range(0,2):\n    for j in range(1,3):\n        print(i, j)\n</code></pre> <p>This will output:</p> <pre><code>0 1\n0 2\n1 1\n1 2\n</code></pre> <p>Check that you understand why this output is as it is.</p>"},{"location":"topics/python/09_iteration.html#the-while-loop","title":"The <code>while</code> Loop","text":"<p>Python offers an alternative construct for iteration, the conditional loop.  This uses the keyboard <code>while</code> and the code in this loop will execute as long as a specified condition is <code>True</code>.  It can be a little more tricky to handle than the <code>for</code> loop as we, the programmer, have to control how many times the loop will execute.  </p> <pre><code>i = 1\nwhile i &lt;= 10:\n    print(i)\n    i = i + 1\n</code></pre> <ul> <li>We need to give the control variable an initial value, <code>i = 1</code>.</li> <li>The condition is checked using a relational operator against our desired stop value.</li> <li>The control variable needs to be updated in the body of the loop</li> </ul> <p>The <code>for</code> loop and the <code>while</code> loop are interchangeable, it matters little which you use as long you keep the logic correct.  Sometimes it is just a matter of personal preference.</p> <p>Note</p> <p>The <code>while</code> loop is also known as a top-tested loop as the condition is placed at the top of the loop and if that condition is not satisfied  it may never be executed.  An alternative form is the <code>do ... while</code> or <code>repeat ... until</code> loops.  These are bottom-tested loop constructs.  the condition comes at the bottom of the loop so the code in the loop will be executed at least once.  Python does not have a bottom-tested loop but you will encounter it in other programming languages.</p>"},{"location":"topics/python/09_iteration.html#examples","title":"Examples","text":""},{"location":"topics/python/09_iteration.html#example-1-for-loop","title":"Example 1: <code>for</code> Loop","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(f\"I like {fruit}\")\n</code></pre>"},{"location":"topics/python/09_iteration.html#example-2-while-loop","title":"Example 2: <code>while</code> Loop","text":"<pre><code>count = 1\nwhile count &lt;= 5:\n    print(f\"Count: {count}\")\n    count += 1\n</code></pre>"},{"location":"topics/python/09_iteration.html#activity","title":"Activity","text":"<p>Using the following program, amend the code to:</p> <ul> <li>change the range of the multiplication table</li> <li>iterate over a list of numbers rather than a string</li> <li>use a while loop to count from 1 through to 5</li> <li>amend the while loop to print all the even numbers between 1 and 100</li> </ul> <pre><code># Modified example with nested loops and sequence iteration\nprint(\"Multiplication table using nested for loops:\")\nfor i in range(1, 4):\n    for j in range(1, 4):\n        print(i * j, end=' ')\n    print()\n\nprint(\"\\nIterating over a string with for loop:\")\ntext = \"Python\"\nfor char in text:\n    print(char)\n\nprint(\"\\nCounting down using while loop:\")\ncount = 5\nwhile count &gt; 0:\n    print(count)\n    count -= 1\n</code></pre>"},{"location":"topics/python/09_iteration.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 7 - Iteration</p>"},{"location":"topics/python/09_iteration.html#summary","title":"Summary","text":"<p>Cheat sheet for iteration (and selection)<sup>1</sup></p>"},{"location":"topics/python/09_iteration.html#questions","title":"Questions","text":"1. What is the primary purpose of iteration in programming?To execute a block of code onceTo execute a block of code repeatedlyTo skip a block of codeTo define variablesIteration allows a section of a program to be executed multiple times, enabling repeated actions or calculations.Submit 2. Which of the following is a key difference between a <code>for</code> loop and a <code>while</code> loop?A <code>for</code> loop repeats indefinitely, while a <code>while</code> loop does not.A <code>while</code> loop is used for a fixed number of iterations, while a <code>for</code> loop depends on a condition.A <code>for</code> loop runs for a set number of times, while a <code>while</code> loop runs as long as a condition is true.A <code>while</code> loop does not require a condition to run.A <code>for</code> loop is typically used when the number of iterations is known, while a <code>while</code> loop continues to execute as long as a specified condition remains true.Submit 3. What will be the output of the following <code>for</code> loop?<pre><code>for i in range(1, 6):\n    print(i)</code></pre>1 2 3 4 51 2 3 4 5 60 1 2 3 4 50 1 2 3 4The <code>for</code> loop iterates from 1 to 5, printing each number on a new line. The range function stops before the second argument.Submit 4. In Python, what does the <code>range()</code> function do when used in a <code>for</code> loop?It generates a sequence of floating-point numbers.It generates a sequence of integers.It creates a list of strings.It defines the condition for the loop.The <code>range()</code> function generates a sequence of integers, which is often used to control the number of iterations in a 'for' loop.Submit 5. What will the following nested <code>for</code> loops output?<pre><code>for i in range(2):\n    for j in range(1, 3):\n        print(i, j)</code></pre>0 1, 0 2, 1 1, 1 20 0, 1 1, 2 21 2, 1 3, 2 31 1, 2 2The outer loop runs twice (i = 0 and i = 1), and for each iteration of the outer loop, the inner loop runs twice (j = 1 and j = 2).Submit 6. When is a <code>while</code> loop preferred over a <code>for</code> loop?When the number of iterations is known.When the loop should execute at least once.When the loop's continuation depends on a condition that is not tied to a fixed number of iterations.When you want to iterate over a sequence like a list or string.A <code>while</code> loop is preferred when the number of iterations is not known in advance and depends on a condition that may change during the loop's execution.Submit 7. What is the output of the following code?<pre><code>count = 1\nwhile count &lt;= 3:\n    print(count)\n    count += 1</code></pre>1 2 31 2 3 42 3 40 1 2 3The <code>while</code> loop increments the <code>count</code> variable from 1 to 3, printing each value before exiting the loop when <code>count</code> exceeds 3.Submit 8. Which statement about the <code>for</code> loop in Python is correct?It can only be used with lists.It cannot iterate over strings.It always requires a <code>range()</code> function.It can iterate over any sequence, such as lists, tuples, and strings.The <code>for</code> loop in Python is versatile and can be used to iterate over any sequence, including lists, tuples, and strings.Submit 9. Why is it important to update the control variable in a <code>while</code> loop?To ensure the loop runs indefinitely.To prevent the loop from running indefinitely.To increase the speed of the loop.To make the loop execute fewer times.Updating the control variable ensures that the condition of the <code>while</code> loop will eventually become false, preventing an infinite loop.Submit 10. What does the following <code>for</code> loop do?<pre><code>for ch in 'Python':\n    print(ch)</code></pre>Prints the word 'Python' six timesPrints each character of the string 'Python' on a new linePrints 'ch' six timesPrints the ASCII values of the characters in 'Python'The <code>for</code> loop iterates over each character in the string <code>Python</code>, printing each character on a new line.Submit"},{"location":"topics/python/09_iteration.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Multiplication Table<p>The text demonstrated how to program a multiplication table using two `for` loops.  Rewrite that program, replacing the `for` loops with `while` loops</p>Read more ...Factorial Calculator<p>Write a Python program that uses a for loop to calculate and print the factorial of a given number.  Remember, 5! = 5 x 4 x 3 x 2 x 1</p>Read more ...Number Guessing Game<p>Write a Python program that generates a random number between 1 and 100 and asks the user to guess it using a `while` loop. Provide hints (higher or lower) and count the number of guesses until the user guesses correctly.  Your output should be:</p>Read more ... <ol> <li> <p>[https://ehmatthes.github.io/pcc_3e/cheat_sheets/(https://ehmatthes.github.io/pcc_3e/cheat_sheets/)]\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/python/10_turtle.html","title":"Turtle Programming","text":""},{"location":"topics/python/10_turtle.html#turtle-programming","title":"Turtle Programming","text":"<p>Objectives</p> <ul> <li>Define Turtle graphics and its role in introducing programming concepts.</li> <li>Understand the canvas, screen, and the turtle itself in the context of Turtle graphics.</li> <li>Explain the basic movements of the turtle using functions like <code>forward()</code>, <code>backward()</code>, <code>right()</code>, <code>left()</code>, <code>goto()</code>, and <code>home()</code>.</li> <li>Use loops and functions to draw basic shapes such as squares, triangles, and circles with the Turtle library.</li> <li>Demonstrate the use of functions to modularize code and avoid code duplication, especially when drawing repetitive shapes like rectangles.</li> </ul> <p>The turtle library in Python is a great way to introduce beginners to programming concepts like sequence, selection, iteration, and functions while also creating visual outputs. </p> <p>The turtle library is a pre-installed Python library (also in replit) that is used to create pictures and shapes by providing a virtual canvas. The onscreen pen that you use for drawing is called the turtle and this is what gives the library its name. </p> <p>To get started we need the canvas, the screen, and we need the turtle:</p> <pre><code>import turtle\ns = turtle.getscreen()\nt = turtle.Turtle()    # note case, and don't forget the brackets\ns.exitonclick()           # stop the screen from closing\n</code></pre>"},{"location":"topics/python/10_turtle.html#moving-the-turtle","title":"Moving the turtle","text":"<p>The turtle can move in four directions:</p> <pre><code>t.right(90)         # or t.rt(90)\nt.forward(100)      # or t.fd(100)\nt.left(90)          # or t.lt(90)\nt.backward(100)     # or t.bk(100)\n</code></pre> <p>Or provide coordinates, (0,0) is in the centre of the screen:</p> <pre><code>t.goto(50,200)\nt.home()            # return it to the centre\n</code></pre> <p></p>"},{"location":"topics/python/10_turtle.html#exercise-1","title":"Exercise 1:","text":"<p>Create a program that uses the turtle library to draw basic shapes such as squares, triangles, and circles. Use loops for repetitive actions and functions to modularize code.</p> <p>Note</p> <p>The Turtle library has a <code>circle()</code> function; <code>t.dot(20)</code> will draw a filled in circle of given diameter</p>"},{"location":"topics/python/10_turtle.html#exercise-2","title":"Exercise 2:","text":"<p>Combine those shapes to draw a picture of say a house with a door, windows, roof, walls etc.</p> <p>Tip</p> <p>Can a function, or several functions be used to avoid duplication of code when e.g. drawing a rectangle?</p>"},{"location":"topics/python/10_turtle.html#changing-the-screen-colour","title":"Changing the screen colour","text":"<p>The default background is white, this can be changed:</p> <pre><code>t.bgcolor(\"blue\")\n</code></pre> <p>Lots of other colours are available, or can be defined using hex codes e.g. </p> <pre><code>turtle.bgcolor(\"#336699\")\n</code></pre>"},{"location":"topics/python/10_turtle.html#changing-the-turtle","title":"Changing the turtle","text":"<p>The size of the turtle can be changed:</p> <pre><code>t.shapesize(10,1,5)\n</code></pre> <p>The parameters are length, width and outline width.</p> <p>The pen size and colour can also be changed:</p> <pre><code>t.pensize(5)\nt.forward(100)\n</code></pre> <p>The colour of both the turtle and the pen can be changed:</p> <pre><code>t.fillcolor(\"red\")\nt.pencolor(\"green\")\n</code></pre> <p>Many of these properties can be given a one-liner, with the pen attributes being specified in the parameters:</p> <pre><code>t.pen(pencolor=\"purple\", fillcolor=\"orange\", pensize=10, speed=9)\n</code></pre>"},{"location":"topics/python/10_turtle.html#picking-the-pen-up-and-down","title":"Picking the pen up and down","text":"<p>To move the turtle without drawing on the canvas, the pen must be picked up, and then put down to continue drawing:</p> <pre><code>t.fd(100)\nt.rt(90)\nt.penup()\nt.fd(100)\nt.rt(90)\nt.pendown()\nt.fd(100)\nt.rt(90)\nt.penup()\nt.fd(100)\nt.pendown()\n</code></pre>"},{"location":"topics/python/10_turtle.html#python-commands-are-still-available","title":"Python commands are still available!","text":"<p>Using standard Python statements for <code>if</code> and <code>for</code> and <code>while</code> are still available and can be used with the turtle and the drawing commands.</p> <pre><code> n=10\nwhile n &lt;= 40:\n    t.circle(n)\n    n = n+10\n</code></pre>"},{"location":"topics/python/10_turtle.html#exercise-3","title":"Exercise 3:","text":"<p>Create a colorful spiral pattern using the turtle library. Experiment with changing colors, angles, and distances to create an interesting visual effect. </p> <p>Tip</p> <p>To select a random colour use a list e.g. colours = [\"red\", \"blue\", \"green\"]</p>"},{"location":"topics/python/10_turtle.html#exercise-4","title":"Exercise 4:","text":"<p>Create a race program.  Two turtles move across the screen to an end point.  Each moves a random distance each time so either one could be the winner of the race.</p> <p></p>"},{"location":"topics/python/10_turtle.html#a-final-example","title":"A final example","text":"<p>A random walk is a random process that describes a path that consists of a succession of random steps on some mathematical space (see Wikipedia).  An interesting theory with applications in various domains including stock market analysis.  We can illustrate this process using our humble turtle:</p> <p>Tip</p> <p>Leave it running for a while (perhaps a long while) and see the effect.</p> <pre><code>import turtle\nimport random\n\n# Initialize Turtle\nwn = turtle.Screen()\nwn.title(\"Turtle Random Walk\")\nwn.setup(width=200, height=100)\nwn.bgcolor(\"white\")\n\n# Create a turtle for drawing\nt = turtle.Turtle()\nt.speed(0)  # Fastest drawing speed\n\n# Start in the middle of the screen\nx, y = 0, 0\nt.goto(x, y)\n\n# Function to handle screen boundaries\ndef check_boundaries():\n    global x, y\n    if x &lt; -wn.window_width() / 2:\n        x = wn.window_width() / 2\n    elif x &gt; wn.window_width() / 2:\n        x = -wn.window_width() / 2\n    if y &lt; -wn.window_height() / 2:\n        y = wn.window_height() / 2\n    elif y &gt; wn.window_height() / 2:\n        y = -wn.window_height() / 2\n\n# Draw loop\nwhile True:\n    t.color(\"black\")\n\n    # Randomly move\n    x += random.uniform(-1, 1)\n    y += random.uniform(-1, 1)\n\n    # Check boundaries\n    check_boundaries()\n\n    # Update the turtle's position\n    t.goto(x, y)\n\n    # Draw the point\n    t.dot(1)\n\n    # Refresh the screen\n    wn.update()\n\n# Close the window on click\nwn.exitonclick()\n</code></pre> <p></p>"},{"location":"topics/python/10_turtle.html#summary-of-commands","title":"Summary of commands","text":"<ol> <li> <p>Basic Movement:</p> <ul> <li><code>import turtle</code>: Import the turtle module.</li> <li><code>turtle.forward(distance)</code>: Move the turtle forward by the specified distance.</li> <li><code>turtle.backward(distance)</code>: Move the turtle backward by the specified distance.</li> <li><code>turtle.right(angle)</code>: Turn the turtle to the right by the specified angle (in degrees).</li> <li><code>turtle.left(angle)</code>: Turn the turtle to the left by the specified angle.</li> </ul> </li> <li> <p>Pen Control:</p> <ul> <li><code>turtle.penup()</code>: Lift the pen off the paper (turtle doesn't draw).</li> <li><code>turtle.pendown()</code>: Place the pen on the paper (turtle draws).</li> <li><code>turtle.pensize(width)</code>: Set the width of the turtle's pen.</li> <li><code>turtle.pencolor(color)</code>: Set the color of the turtle's pen.</li> </ul> </li> <li> <p>Color Control:</p> <ul> <li><code>turtle.bgcolor(color)</code>: Set the background color of the drawing window.</li> <li><code>turtle.fillcolor(color)</code>: Set the fill color for shapes.</li> <li><code>turtle.begin_fill()</code>: Begin filling a shape.</li> <li><code>turtle.end_fill()</code>: End filling a shape.</li> </ul> </li> <li> <p>Turtle Positioning:</p> <ul> <li><code>turtle.goto(x, y)</code>: Move the turtle to the specified coordinates.</li> <li><code>turtle.setx(x)</code>: Set the turtle's x-coordinate.</li> <li><code>turtle.sety(y)</code>: Set the turtle's y-coordinate.</li> </ul> </li> <li> <p>Loops:</p> <ul> <li><code>for</code> loop: Create a loop that iterates a specific number of times.</li> <li><code>while</code> loop: Create a loop that continues as long as a condition is true.</li> </ul> </li> <li> <p>Functions:</p> <ul> <li><code>def function_name(arguments)</code>: Define a new function.</li> <li><code>turtle.reset()</code>: Reset the turtle's position, heading, and pen settings.</li> </ul> </li> <li> <p>Other:</p> <ul> <li><code>turtle.speed(speed)</code>: Set the turtle's drawing speed.</li> <li><code>turtle.clear()</code>: Clear the drawing window.</li> <li><code>turtle.done()</code>: Finish the drawing and display it.</li> </ul> </li> </ol>"},{"location":"topics/python/10_turtle.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Basic shapes<p>Create a program that uses the turtle library to draw basic shapes such as squares, triangles, and circles. Use loops for repetitive actions and functions to modularize code.</p>Read more ...Combining shapes<p>Combine those shapes to draw a picture of say a house with a door, windows, roof, walls etc.</p>Read more ...Spiral<p>Create a colorful spiral pattern using the turtle library. Experiment with changing colors, angles, and distances to create an interesting visual effect. </p>Read more ...Race Game<p>Create a race program.  Two turtles move across the screen to an end point.  Each moves a random distance   each time so either one could be the winner of the race.</p>Read more ..."},{"location":"topics/python/11_lists.html","title":"Lists","text":""},{"location":"topics/python/11_lists.html#lists","title":"Lists","text":"<p>Objectives</p> <ul> <li>Define what a list is in Python and explain its usefulness in storing and managing collections of data.</li> <li>Demonstrate how to create lists in Python, including examples of empty lists and lists containing various data types.</li> <li>Explain the concept of indexing in Python lists and understand 0-based indexing.</li> <li>Retrieve elements from a list using positive and negative indices.</li> <li>Understand the use of a for loop to iterate over the elements of a list.</li> <li>Introduce list operations like <code>append()</code>, <code>insert()</code>, <code>remove()</code>, and <code>clear()</code>.</li> <li>Use the <code>in</code> keyword to check if an item is present in a list.</li> <li>Employ the <code>index()</code> method to get the position of an item in a list.</li> </ul> <p>Consider we need a program that processes capital cities of the world, we could store the names of these cities:</p> <pre><code>capital1 = \"London\"\ncapital2 = \"New York\"\ncapital3 = \"Paris\"\ncapital4 = \"Canberra\"\n# etc ...\n</code></pre> <p>Of course, the problem here is the <code># etc...</code>.  For each new city we need a new variable.</p> <p>Lists provide the solution, we can gather together the collection of cities under the one name:</p> <pre><code>capital_cities = [\"London\", \"New York\", \"Paris\", \"Canberra\"]\n</code></pre> <p>The list is a fundamental data structure in Python that allows us to store and manage such collections of data. The <code>capital_cities</code> list contains a list of strings, but the list can contain any type of data.  Their contents can be changed during the run of the program, items can be added, changed or removed i.e. they are mutable.</p>"},{"location":"topics/python/11_lists.html#example-8","title":"Example 8","text":"<pre><code># Example program with basic list operations\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"Original list:\", fruits)\n\nfruits.append(\"orange\")\nprint(\"List after appending 'date':\", fruits)\n\nmixed_list = [\"text\", 42, 3.14, True]\nprint(\"Mixed type list:\", mixed_list)\n\nfor item in mixed_list:\n    print(item)\n\nnested_list = [[1, 2, 3], [\"a\", \"b\", \"c\"]]\nprint(\"Nested list:\", nested_list)\n</code></pre> <p>Predict what the output of the program will be:</p> <ul> <li>What will the list look like after appending 'orange', line 5?</li> <li>Can you identify the data types of the items in <code>mixed_list</code>, line 9?</li> <li>What will be printed on line 12</li> <li>What will be printed for <code>nested_list</code>, line 15?</li> </ul> <p>Run the program in a Python environment and check your predictions, were they the same?</p>"},{"location":"topics/python/11_lists.html#creating-lists","title":"Creating Lists","text":"<p>To create a list we give it a name followed by the assignment operator and then a comma-separated sequence of items within square brackets <code>[]</code>.</p> <pre><code>empty_list =[]                              # an empty list\nfruits = [\"apple\", \"banana\", \"cherry\"]\nnumbers = [1, 2, 3, 4, 5]\nmixed_list = [1, \"hello\", 3.14]\nnested_list = [1,2,3, ['a','b'], 90]             # a nested list\n</code></pre> <p>Note</p> <p><code>mixed_list</code> has items of mixed data types, this is allowed, it can also contains lists as in <code>nested_list</code>.  The nested list here, <code>['a','b']</code> still counts as one item in this list, the number of elements in <code>nested</code> is 5.</p>"},{"location":"topics/python/11_lists.html#accessing-items-in-a-list","title":"Accessing Items in a list","text":"<p>Individual elements of the list can be accessed by using indexing. Python uses 0-based indexing, so the first element is at index 0.</p> <pre><code>first_element = my_list[0]  # Access the first element\n</code></pre> <p>To retrieve \"Cherry\" from the list of fruits we would use:</p> <pre><code>favourite_fruit = fruits[2]\n</code></pre> <p>Warning</p> <p>Make sure you understand why the index used here is 2 and not 3</p> <p></p> <p>Thinks of this processing as mapping where each index \"maps\" to an item in the list.  Any integer expression can be used as the index e.g.</p> <p></p><pre><code>count = 3\nprint(fruits[count])\nprint(fruits[count+1])\n</code></pre> The index can also be negative, in which case it starts to count from the end of the list."},{"location":"topics/python/11_lists.html#iterating-over-a-list","title":"Iterating over a list","text":"<p>The easiest way to iterate over the list (visit every item) is to use a <code>for</code> loop:</p> <pre><code>for fruit in fruits:\n    print(fruit)        # =&gt; \"apple\", \"banana\", \"cherry\"\n</code></pre> <p>This is fine when we need to do something with every item in the list.  If we want to modify particular items then we have to use the index for that item, usually combined with a function such as <code>range()</code> or <code>len()</code>:</p> <pre><code>for i in range(len(fruits)):\n    fruits[i] = fruits[i].upper()\n</code></pre> <p>Remember, <code>len()</code> returns the number of items in the list, and <code>range()</code> handles the indices from \\(0\\) to \\(n-1\\) (where \\(n\\) is the number of items in the list).</p>"},{"location":"topics/python/11_lists.html#modifying-lists","title":"Modifying Lists","text":"<ul> <li>Lists are 'mutable', so you can change their content by assigning new values to elements.</li> <li>This can be done by using the index:</li> </ul> <pre><code># Modifying list elements using the index\nfruits[0] = \"orange\"\n</code></pre> * Or by using a list operation: <pre><code>numbers.append(6)     # Adds 6 to the end of the list\nnumbers.insert(2, 99)  # Inserts 99 at index 2\nnumbers.remove(4)     # Removes the element with value 4\n</code></pre>"},{"location":"topics/python/11_lists.html#list-slicing","title":"List Slicing","text":"<ul> <li>You can extract a portion of a list using slicing, which involves specifying a start and end index, separated by the slice operator, a colon <code>:</code>:</li> </ul> <pre><code># Slicing a list\nsublist = numbers[1:4]  # Extracts elements at indices 1, 2, and 3\npartial = fruits[:2]    # Extracts elements at indices 0 and 1\n</code></pre> <p>Hint</p> <p>The same slicing approach can be used when extracting sections of a string as a sub-string</p> <ul> <li>If the first index in the slice is omitted, the slice starts at the beginning of the list; if the second is omitted it will go through to the end of the list. (Omitting both returns the whole list.)</li> </ul>"},{"location":"topics/python/11_lists.html#list-operations","title":"List Operations","text":"<p>There are a number of useful operations, we can perform on the list, including appending, extending, and removing elements.</p> <pre><code>my_list.append(4)        # Add an element to the end\nmy_list.extend([5, 6])   # Extend the list with another list\nmy_list.remove(\"apple\")  # Remove a specific element\nmy_list.clear()          # remove all elements from the list\nmy_list.sort()           # sort the list\nmy_list.pop()            # removes the element at the back of the list\n</code></pre> <p>Most of these list operations act on the list but return <code>None</code>, e.g. it looks like <code>b</code> will be assigned the sorted list <code>a</code> but it does not:</p> <pre><code>a = [9,3, 0, 2]\na.sort()            # OK, a is now [0,2,3,9]\na = [9,3, 0, 2]\nb = a.sort()        # b is None\n</code></pre> <p>Lists can be joined together, concatenated, using the <code>+</code> operator:</p> <pre><code>listA = [1,2,3]\nlistB = [4,5,6]\nlistC = listA + listB           # =&gt; [1,2,3,4,5,6]\n</code></pre> <p>Note</p> <p>Similarly the multiplication operator, <code>*</code>, can be used to repeat the list a number of times in a new list</p>"},{"location":"topics/python/11_lists.html#list-functions","title":"List Functions","text":"<p>Also, Python provides built-in functions for working with lists, such as <code>len()</code>, <code>max()</code>, and <code>min()</code>.</p> <pre><code>length = len(my_list)    # Get the length of the list\nmax_value = max(my_list)  # Find the maximum value in the list\nmin_value = min(my_list)  # Find the minimum value in the list\nsum_of_list = sum(my_list)  # sums the values in the list (only works with numbers)\n</code></pre>"},{"location":"topics/python/11_lists.html#checking-for-list-membership","title":"Checking for List Membership","text":"<ul> <li>You can check if an item is present in a list using the <code>in</code> keyword.</li> </ul> <pre><code># Checking for list membership\nif \"apple\" in fruits:\n    print(\"Found apple in the list\")\n</code></pre> <ul> <li>To get the position of an item in a list we use the <code>index()</code> method:</li> </ul> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits.index(\"cherry\"))                   # prints 2\n</code></pre>"},{"location":"topics/python/11_lists.html#lists-and-strings","title":"Lists and strings","text":"<p>A string is a sequence of characters and often behaves like a list but note the following code:</p> <pre><code>str = \"hello\"\nstr_list = list(str)\nprint(str_list)         # ['h','e','l','l','o']\n</code></pre> <p>The <code>list()</code> function breaks the string into its individual characters.</p>"},{"location":"topics/python/11_lists.html#example","title":"Example","text":"<pre><code># Creating a list of numbers\nmy_numbers = [10, 20, 30, 40, 50]\n\n# Accessing and modifying list elements\nmy_numbers[2] = 35\nmy_numbers.append(60)\n\n# Slicing the list\nsubset = my_numbers[1:4]  # [20, 35, 40]\n\n# Using list comprehension to create a new list\nsquared_numbers = [x**2 for x in my_numbers]\n\n# Checking for list membership\nif 25 in my_numbers:\n    print(\"25 is in the list\")\n\n# Displaying the modified list and squared numbers\nprint(my_numbers)\nprint(squared_numbers)\n</code></pre>"},{"location":"topics/python/11_lists.html#activity","title":"Activity","text":"<p>Modify the example code to:</p> <ul> <li>Insert a new fruit into the second position of the <code>fruits</code> list.</li> <li>Remove an element from the <code>mixed_list</code>.</li> <li>Add a new element to one of the sublists in the <code>nested_list</code>.</li> </ul>"},{"location":"topics/python/11_lists.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 8 - Lists</p>"},{"location":"topics/python/11_lists.html#summary","title":"Summary","text":"<ul> <li>Lists are ordered, meaning they maintain the order in which items were added.</li> <li>Lists can contain elements of different types.</li> <li>Lists are versatile and can be used to implement various data structures like stacks and queues.</li> <li>Lists can be nested, meaning you can have lists within lists.</li> </ul> <p>Cheat sheet for lists)<sup>1</sup></p>"},{"location":"topics/python/11_lists.html#questions","title":"Questions","text":"1. What is a list in Python?A collection of unique itemsA collection of items stored in a key-value pairAn ordered collection of items that can contain elements of different data typesA collection of immutable itemsA list in Python is an ordered collection of items that can contain elements of different data types and can be modified during the program's execution.Submit 2. How can you create an empty list in Python?empty_list = []empty_list = {}empty_list = ()empty_list = ''An empty list in Python is created using square brackets with nothing inside, like this: <code>empty_list = []</code>.Submit 3. What will the following code output?<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[1])</code></pre>applebananacherryIndexErrorPython uses 0-based indexing, so <code>fruits[1]</code> refers to the second element in the list, which is 'banana'.Submit 4. What does the <code>append()</code> method do in Python?Removes an element from the listAdds an element to the end of the listInserts an element at a specific position in the listClears all elements from the listThe <code>append()</code> method is used to add an element to the end of a list in Python.Submit 5. Given the list <code>my_list = [10, 20, 30, 40]</code>, what does the expression <code>my_list[-2]</code> return?10203040Negative indexing starts from the end of the list, so <code>my_list[-2]</code> returns the second-to-last element, which is 30.Submit 6. Which of the following methods would you use to check if an item exists in a list?exists()find()contains()inThe <code>in</code> keyword is used in Python to check if an item exists in a list, e.g., <code>'apple' in fruits</code>.Submit 7. What will the following code output?<pre><code>mixed_list = [\"text\", 42, 3.14, True]\nprint(mixed_list.index(42))</code></pre>012IndexErrorThe <code>index()</code> method returns the position of the first occurrence of the specified value. Here, 42 is at index 1.Submit 8. What will be the result of the following code?<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.insert(1, \"orange\")\nprint(fruits)</code></pre>[\"apple\", \"banana\", \"cherry\", \"orange\"][\"orange\", \"apple\", \"banana\", \"cherry\"][\"apple\", \"orange\", \"banana\", \"cherry\"][\"apple\", \"banana\", \"orange\", \"cherry\"]The <code>insert()</code> method adds an element at the specified index. In this case, 'orange' is inserted at index 1.Submit 9. What does the <code>remove()</code> method do in a Python list?<pre><code>numbers = [1, 2, 3, 4]\nnumbers.remove(3)\nprint(numbers)</code></pre>Removes the last element from the listRemoves the first occurrence of a specified value from the listRemoves all elements from the listRemoves the element at a specified indexThe <code>remove()</code> method removes the first occurrence of the specified value from the list. In this case, the number 3 is removed, resulting in <code>[1, 2, 4]</code>.Submit 10. What is the output of the following code?<pre><code>numbers = [1, 2, 3, 4]\nnumbers.extend([5, 6])\nprint(numbers)</code></pre>[1, 2, 3, 4, 5, 6][1, 2, 3, 4, [5, 6]][5, 6, 1, 2, 3, 4][1, 2, 3, 4]The <code>extend()</code> method adds the elements of the specified list to the end of the current list, so the result is <code>[1, 2, 3, 4, 5, 6]</code>.Submit"},{"location":"topics/python/11_lists.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Shopping List<p>Write a Python program that allows a user to create and manage a shopping list. Implement features to add, remove, and display items in the list.</p>Read more ...Gradebook<p>Write a Python program that keeps track of student grades. Implement a list to store student names and another list to store their corresponding grades. Allow the user to add and remove students and their grades, and calculate the average grade.</p>Read more ...To-Do List*<p>Write a Python program that simulates a to-do list. Allow the user to add, remove, and display tasks in the list. Include an option to mark tasks as completed.  The list will be a list of lists where each item in the list will contain a string for the to-do item and a boolean variable for whether the task has been completed or not e.g. `to-do = [['Finish questions for homework', False],['Make the supper', True']]`.   Use the following code as your starting point:</p>Read more ... <ol> <li> <p>[https://ehmatthes.github.io/pcc_3e/cheat_sheets/(https://ehmatthes.github.io/pcc_3e/cheat_sheets/)]\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/python/12_2D-lists.html","title":"2D Lists","text":""},{"location":"topics/python/12_2D-lists.html#2d-lists","title":"2D Lists","text":"<p>Objectives</p> <ul> <li>Define what a 2D list is in Python and explain its usefulness in representing tabular data with rows and columns.</li> <li>Recognize the relationship between 2D lists and tables.</li> <li>Demonstrate how to create a 2D list by encapsulating multiple lists within square brackets.</li> <li>Understand the structure of a 2D list with examples.</li> <li>Explain how to access elements in a 2D list using two indices, one for the row and one for the column.</li> <li>Emphasize the need for two indices when working with 2D lists.</li> <li>Use nested loops to iterate through the elements of a 2D list.</li> </ul> <p>The examples thus far have only considered lists of one dimension but we can also create lists that look more like tables, with rows and columns, which give us two dimensions. Each element in a 2D list can be accessed using two indices: one for the row and one for the column.  More dimensions are possible but not recommended as they can get tricky to handle.</p>"},{"location":"topics/python/12_2D-lists.html#example-10","title":"Example 10","text":"<pre><code># Example program with a 2D list\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(\"Original matrix:\")\nfor row in matrix:\n    print(row)\n\nelement = matrix[1][2]\nprint(\"Element at row 2, column 3:\", element)\n\nmatrix[0][0] = 10\nprint(\"Modified matrix:\")\nfor row in matrix:\n    print(row)\n</code></pre> <p>Predict what the output of the program will be:</p> <ul> <li>What will be printed for the original matrix?</li> <li>What will be the value of the element at row 2, column 3?</li> <li>How will the matrix look after modifying the first element?</li> </ul> <p>Run the program in a Python environment and check your predictions, were they the same?</p>"},{"location":"topics/python/12_2D-lists.html#creating-2d-lists","title":"Creating 2D Lists","text":"<p>You can create a 2D list by enclosing multiple lists within square brackets <code>[]</code>. Each inner list represents a row in the 2D list.</p> <pre><code>matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n</code></pre> <p>This is a list of lists! Think of it as being organised as a series of rows and columns, like a table.</p>"},{"location":"topics/python/12_2D-lists.html#accessing-elements","title":"Accessing Elements","text":"<p>To access an element in a 2D list, use two indices: one for the row and one for the column. Remember that Python uses 0-based indexing.</p> <pre><code>element = matrix[row_index][column_index]\n</code></pre>"},{"location":"topics/python/12_2D-lists.html#modifying-2d-lists","title":"Modifying 2D Lists","text":"<p>You can change the values of elements in a 2D list by assigning new values using the indices just as you would with 1D lists but now we need two indices.</p> <pre><code>matrix[1][2] = 42\n</code></pre>"},{"location":"topics/python/12_2D-lists.html#looping-through-2d-lists","title":"Looping Through 2D Lists","text":"<p>You can use nested loops to iterate through the elements of a 2D list.  The outer loop will work through each row, the inner loop will work through the columns in that row.</p> <pre><code>for row in matrix:\n    for element in row:\n        # code to process each element\n</code></pre>"},{"location":"topics/python/12_2D-lists.html#activity","title":"Activity","text":"<p>Using the example program above, copy and paste into a Python IDE and make the following modifications:</p> <ul> <li>Change element at row 3, column 1 to 11</li> <li>Add a new row to the matrix</li> <li>Remove the second row</li> </ul>"},{"location":"topics/python/12_2D-lists.html#example","title":"Example","text":"<p>We've been asked to create a simple address book of our friends with their name, email address and phone number.  Our table of friends might look like this:</p> Name Phone Email Alice 09876 444555 alice@example.com Bob 01287 655444 bob@hotmail.co.uk Charlie 09998 666555 charlie_is_great_@gmail.com Davina 06667 543213 d_khan@myspace.tv Edward 08889 765432 edward_davies@gmail.com <p>We currently have 5 rows and 3 columns, but will want to add more friends later.</p> <p>First we initialise our empty table (2D list)</p> <pre><code>address_book = [][]\n</code></pre> <p>Or, we could initialise the table with the data we have already:</p> <pre><code>address_book = [\n    [\"Alice\", \"09876 444555\",\"alice@example.com\"],\n    [\"Bob\",\"01287 655444\",\"bob@hotmail.co.uk\"],\n    [\"Charlie\",\"09998 666555\",\"charlie_is_great_@gmail.com\"],\n    [\"Davina\",\"06667 543213\",\"d_khan@myspace.tv\"],\n    [\"Edward\",\"08889 765432\",\"edward_davies@gmail.com\"]\n]\n</code></pre> <p>Our program will keep running, presenting us with the menu of options, until we enter quit (one of options):</p> <pre><code>while True:\n    print(\"\\nOptions:\")\n    print(\"1. Find friend's information\")\n    print(\"2. Add a new friend\")\n    print(\"3. Quit\")\n\n    choice = input(\"Enter your choice (1/2/3): \")\n\n    if choice == \"1\":\n        # find a friend\n    elif choice == \"2\":\n        # add a new friend\n    elif choice == \"3\":\n        print(\"Goodbye\")\n        break\n    else:\n        print(\"Invalid choice.  please enter 1,2 or 3\")\n</code></pre> <p>Let's tackle option 2.  We could create a separate function for this, which would be preferable if we had to consider validation and other factors such as saving and reading from  file etc., but here we're only dealing with three items of data:</p> <pre><code># previous code\nelif choice == \"2\":\n    name = input(\"Enter name: \")\n    phone = input(\"Enter phone: \")\n    email = input(\"Enter email: \")\n    address_book.append([name, phone, email])   # add the list of data as a new row\n</code></pre> <p>Warning</p> <p>Be careful with the <code>append()</code> operation, we have to append the list and not each individual item of data</p> <p>Option 1, finding the friend, is suitable for a function.  Here we could write a function that iterates through our table looking for a given name and then return the row when found or an error if not found.  This could then be passed to another function to display.  This would be best practice so that both functions e.g. <code>find_friend(name)</code> and <code>display_friend(friend)</code> would only be handling one task.  However, here we'll combine the two for simplicity:</p> <pre><code># Function to find and display friend information\ndef find_friend_info(name):\n    for friend in address_book:                     # iterate over the list\n        if friend[0] == name:\n            print(f\"Name: {friend[0]}\")             # only need 1 index as it's the column we need\n            print(f\"Phone Number: {friend[1]}\")\n            print(f\"Email: {friend[2]}\")\n            return\n    print(f\"{name} not found in your friends list.\")\n</code></pre> <p>In our main program loop we add the call to that function, once we're got the name to find from our user:</p> <pre><code># previous code\nif choice == \"1\":\n    friend_name = input(\"Enter the name of your friend: \")\n    find_friend_info(friend_name)\n# subsequent code\n</code></pre>"},{"location":"topics/python/12_2D-lists.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 9 - 2D Lists</p>"},{"location":"topics/python/12_2D-lists.html#questions","title":"Questions","text":"1. What is a 2D list in Python?A list containing other lists as its elements, representing rows and columns.A list containing only numbers and strings.A list where all elements must be of the same data type.A list that can only hold two elements.A 2D list in Python is a list of lists, where each inner list represents a row, allowing you to store data in a tabular format.Submit 2. Which of the following represents the correct way to access the element in the second row and third column of a 2D list named 'matrix'?matrix[2][3]matrix[1, 2]matrix[1][2]matrix(1)(2)In Python, indexing starts at 0. To access the element in the second row and third column, use 'matrix[1][2]'.Submit 3. Given the following code, what will be the output?<pre><code>matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nelement = matrix[2][0]\nprint(element)</code></pre>2479The code accesses the first element (index 0) of the third row (index 2), which is 7.Submit 4. What will be the output after running the following code?<pre><code>matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nmatrix[0][0] = 10\nfor row in matrix:\n    print(row)</code></pre>[10, 2, 3] [4, 5, 6] [7, 8, 9][1, 2, 3] [4, 5, 6] [7, 8, 9][10, 2, 3] [4, 5, 10] [7, 8, 9][1, 2, 10] [4, 5, 6] [7, 8, 9]The code modifies the first element of the first row from 1 to 10, resulting in the updated matrix being printed.Submit 5. How would you correctly initialize an empty 2D list in Python?matrix = [[]]matrix = []matrix = [[], []]matrix = [(), ()]An empty 2D list is initialized as an empty list '[]'. However, to prepare for a 2D structure, additional lists can be added later.Submit 6. What is the purpose of using nested loops when working with 2D lists?To initialize the list.To iterate over each element in the 2D list, row by row.To print the list in reverse order.To add new rows to the list.Nested loops allow you to iterate through each element of a 2D list by iterating over each row in the outer loop and each column in the inner loop.Submit 7. Which of the following code snippets correctly modifies the element at the third row, first column, in the 2D list 'matrix'?matrix[3][1] = 11matrix[2][0] = 11matrix[1][2] = 11matrix[2, 0] = 11The correct way to modify the element in the third row and first column is to use 'matrix[2][0] = 11', as indexing starts at 0.Submit 8. What is the correct output of the following code snippet?<pre><code>address_book = [\n    [\"Alice\", \"09876 444555\", \"alice@example.com\"],\n    [\"Bob\", \"01287 655444\", \"bob@hotmail.co.uk\"],\n    [\"Charlie\", \"09998 666555\", \"charlie_is_great_@gmail.com\"]\n]\naddress_book.append([\"Davina\", \"06667 543213\", \"d_khan@myspace.tv\"])\nfor friend in address_book:\n    print(friend)</code></pre>[\"Alice\", \"09876 444555\", \"alice@example.com\"] [\"Bob\", \"01287 655444\", \"bob@hotmail.co.uk\"][\"Davina\", \"06667 543213\", \"d_khan@myspace.tv\"][\"Alice\", \"09876 444555\", \"alice@example.com\"] [\"Bob\", \"01287 655444\", \"bob@hotmail.co.uk\"] [\"Charlie\", \"09998 666555\", \"charlie_is_great_@gmail.com\"][\"Alice\", \"09876 444555\", \"alice@example.com\"] [\"Bob\", \"01287 655444\", \"bob@hotmail.co.uk\"] [\"Charlie\", \"09998 666555\", \"charlie_is_great_@gmail.com\"] [\"Davina\", \"06667 543213\", \"d_khan@myspace.tv\"]The code appends Davina's information to the 'address_book', so all four friends' information will be printed.Submit"},{"location":"topics/python/12_2D-lists.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Seating Plan<p>Write a Python program to manage a simple seating plan.  Initialise the seating plan as a 2D list with the first name of the student.  Write code (using functions where necessary) to: print the initial seating plan, swap 2 students from one place to another and add a new row of students.</p>Read more ...Matrix Addition<p>Write a Python program that adds two 2D matrices. Allow the user to input the dimensions and elements of the matrices and display the result.</p>Read more ...Transpose a Matrix<p>Write a Python program that calculates and displays the transpose of a given 2D matrix. The transpose of a matrix swaps its rows and columns.</p>Read more ...Matrix Multiplication<p>Write a Python program that multiplies two matrices and displays the result. Allow the user to input the dimensions and elements of the matrices.</p>Read more ..."},{"location":"topics/python/13_dictionaries.html","title":"Dictionaries","text":""},{"location":"topics/python/13_dictionaries.html#dictionaries","title":"Dictionaries","text":"<p>Objectives</p> <ul> <li>Differentiate between dictionaries and lists in Python, emphasizing the key-value pair structure of dictionaries.</li> <li>Define a dictionary using curly braces {} or the dict() constructor.</li> <li>Understand the uniqueness and immutability of keys in a dictionary.</li> <li>Create an empty dictionary using curly braces and the dict() constructor.</li> <li>Initialize a dictionary with key-value pairs using identifiers and colons.</li> <li>Access values in a dictionary by specifying the key in square brackets.</li> <li>Use built-in methods such as keys(), values(), and items() to retrieve information from dictionaries.</li> </ul> <p>A dictionary is similar to a list but rather than using integers to index the elements in the list the indices can be of any type.  In other programming languages the dictionary might be known as a map or an associative array.  Think od a conventional English to French dictionary, if you want to know the French word for say 'house', your would look up in the dictionary for the item (key) 'house', the read back the French equivalent (value) as 'la maison'.  The notion of the key being associated with, or mapped to, a value is the essence of how the dictionary operates.</p>"},{"location":"topics/python/13_dictionaries.html#example-11","title":"Example 11","text":"<pre><code># Example program with a dictionary\nclimate_data = {\n    \"temperature\": 22,\n    \"humidity\": 45,\n    \"wind_speed\": 15\n}\nprint(\"Original climate data:\", climate_data)\n\ntemp = climate_data[\"temperature\"]\nprint(\"Temperature:\", temp)\n\nclimate_data[\"temperature\"] = 25\nprint(\"Updated climate data:\", climate_data)\n\nkeys = climate_data.keys()\nvalues = climate_data.values()\nitems = climate_data.items()\n\nprint(\"Keys:\", keys)\nprint(\"Values:\", values)\nprint(\"Items:\", items)\n</code></pre> <p>Predict the output of the program for the highlighted lines in the example program:</p> <ul> <li>What will be printed for the original climate data?</li> <li>What will the temperature variable contain?</li> <li>How will the climate data look after updating the temperature?</li> <li>What will be printed for keys, values, and items?</li> </ul> <p>Run the program in a Python environment to confirm or correct your predictions</p>"},{"location":"topics/python/13_dictionaries.html#dictionary-basics","title":"Dictionary Basics","text":"<ul> <li>A dictionary is defined using curly braces <code>{}</code> or the <code>dict()</code> constructor.</li> <li>Each item in a dictionary consists of a key and its corresponding value, separated by a colon <code>:</code>.</li> <li>Keys are unique within a dictionary, and they must be immutable objects (e.g., strings, numbers, or tuples).</li> <li>Values can be of any data type, including numbers, strings, lists, other dictionaries, and more.</li> <li>Some similarity to a list, but the index used will be the key rather than a numerical position</li> </ul>"},{"location":"topics/python/13_dictionaries.html#creating-a-dictionary","title":"Creating a Dictionary","text":"<pre><code># Creating an empty dictionary\nempty_dict = {}\n\n# Creating a dictionary with key-value pairs\nclimate_data = {\n    \"temperature\": 22,\n    \"humidity\": 45,\n    \"wind_speed\": 15\n}\n</code></pre> <p>We can also use the function <code>dict()</code>, which creates an empty dictionary:</p> <pre><code>climate_data = dict()\nprint(climate_data)         # =&gt; {}\n</code></pre> <p>Note the output from the <code>print()</code> statement: <code>{}</code>.  The curly braces signify the data type as being a dictionary.</p>"},{"location":"topics/python/13_dictionaries.html#accessing-values","title":"Accessing Values","text":"<ul> <li>You can access the values in a dictionary by specifying the key in square brackets <code>[]</code>.</li> <li>If the key is not found, it raises a <code>KeyError</code>.</li> </ul> <pre><code># Accessing values\nprint(climate_data[\"temperature\"])  # Output: 22\n</code></pre> <p>Recall the similarity with a list, we could have used a list to hold the climate data but this data would be 'keyed' by their position in the list e.g.<code>climate_data[0]</code>.  For the dictionary we use the identifier for the key, here being \"temperature\" in the square brackets.  Using the identifier makes the code easier to read.</p>"},{"location":"topics/python/13_dictionaries.html#modifying-and-adding-entries","title":"Modifying and Adding Entries","text":"<ul> <li>You can modify the value associated with a key or add new key-value pairs to an existing dictionary.</li> </ul> <pre><code># Modifying values\nclimate_data[\"humidity\"] = 41\n\n# Adding a new key-value pair\nclimate_data[\"rainfall\"] = 37\n</code></pre> <p>Note</p> <p>When adding elements to a dictionary the order is not known, the dictionary is not automatically sorted.  However, this is not that significant as we use the key to access the associated element and the key must be unique.  If the key does not exist in the dictionary we get a <code>KeyValueError</code> returned as an exception.</p>"},{"location":"topics/python/13_dictionaries.html#dictionary-methods-and-functions","title":"Dictionary Methods and Functions","text":"<ul> <li>Python provides several built-in methods and functions to work with dictionaries, such as <code>keys()</code>, <code>values()</code>, <code>items()</code>, <code>get()</code>, <code>pop()</code>, and more.</li> <li>These methods allow you to retrieve keys, values, key-value pairs, and manipulate dictionary contents.</li> </ul> <pre><code># Getting keys and values\nkeys = climate_data.keys()\nvalues = climate_data.values()\n\n# Getting key-value pairs\nitems = climate_data.items()\n</code></pre> <p>The return type from the <code>keys()</code> and <code>values()</code> functions are of type <code>dict_keys()</code> and <code>dict_values</code> respectively.  To make them a little easier to handle it is recommended to convert them to a list first:</p> <pre><code>keys = list(climate_data.keys())\nvalues = list(climate_data.values())\nprint(keys)                     # -&gt; ['temperature', 'humidity', 'wind-_speed']\nprint(values)                   # -&gt; [22, 45, 15]\n</code></pre> <p>In addition functions such as <code>len()</code> can be used to return the number of items in the dictionary.</p> <pre><code>print(len(climate_data))        # -&gt; 3\n</code></pre>"},{"location":"topics/python/13_dictionaries.html#iterating-through-a-dictionary","title":"Iterating Through a Dictionary","text":"<ul> <li>You can iterate through a dictionary using a <code>for</code> loop, which by default iterates over keys.</li> <li>The <code>in</code> operator can be applied which works on the keys in the dictionary</li> </ul> <pre><code># Iterating through a dictionary using the key\nfor key in climate_data:\n    print(key, climate_data[key])\n\n# Iterating through key-value pairs\nfor key, value in student.items():\n    print(key, value)\n</code></pre> <p>Note</p> <p>The algorithm used by the <code>in</code> operator is different for lists and dictionaries.  For a list it uses a linear search and thus the search time is dependent on the length of the list.  For the dictionary it uses a hash table which means it takes the same amount of time for any item irrespective of the number of items in the dictionary.</p> <p>You might also try:</p> <pre><code>for n in climate_data.items():\n    print(n)            \n</code></pre> <p>The output is:</p> <pre><code>('temperature', 22)\n('humidity', 45)\n('wind-_speed', 15)\n</code></pre> <p>These are tuples and will be looked at in a later section.</p>"},{"location":"topics/python/13_dictionaries.html#checking-for-key-existence","title":"Checking for Key Existence","text":"<p>You can use the <code>in</code> keyword or the <code>get()</code> method to check if a key exists in a dictionary.</p> <pre><code># Checking for key existence\nif \"humidity\" in climate_data:\n    print(\"Humidity:\", climate_data[\"humidity\"])\n\n# Using get() to check for key existence\nrainfall = climate_data.get(\"rainfall\", \"Not found\")\n</code></pre> <p>For line 6, there is no key for \"rainfall\" in the original dictionary therefore the variable <code>rainfall</code> will be assigned \"Not found\".  If it was present in the dictionary the variable would contain the key's value.</p> <p>Note</p> <ul> <li>Dictionaries are unordered collections, which means the order of key-value pairs may not be preserved in older versions of Python (prior to 3.7).  </li> <li>Starting from Python 3.7+, dictionaries maintain the insertion order of items.</li> </ul>"},{"location":"topics/python/13_dictionaries.html#activity","title":"Activity","text":"<p>Using the example code, make the following changes:</p> <ol> <li>Add a new key-value pair for precipitation</li> <li>Remove a key-value pair</li> <li>Update an existing value</li> <li>Iterate through the dictionary and print each key-value pair</li> </ol> <p>Copy the following into your Python environment and modify the code as indicated by the comments.</p> <pre><code># Modified example with dictionary manipulations\nclimate_data = {\n    \"temperature\": 22,\n    \"humidity\": 45,\n    \"wind_speed\": 15\n}\n\n# Q1: Add a new key-value pair for precipitation\n# Answer: \n\nprint(\"Climate data after adding precipitation:\", climate_data)\n\n# Q2: Remove a key-value pair\n# Answer: \n\nprint(\"Climate data after removing humidity:\", climate_data)\n\n# Q3: Update an existing value\n# Answer:\n\nprint(\"Climate data after updating wind_speed:\", climate_data)\n\n# Q4: Iterate through the dictionary and print each key-value pair\n# Answer:\n</code></pre>"},{"location":"topics/python/13_dictionaries.html#further-example","title":"Further Example","text":"<pre><code># Creating a dictionary to store information about a book\nbook = {\n    \"title\": \"Python Crash Course\",\n    \"author\": \"Eric Matthes\",\n    \"pages\": 544,\n    \"year\": 2015\n}\n\n# Accessing and printing book details\nprint(\"Title:\", book[\"title\"])\nprint(\"Author:\", book[\"author\"])\nprint(\"Pages:\", book[\"pages\"])\nprint(\"Year:\", book[\"year\"])\n</code></pre>"},{"location":"topics/python/13_dictionaries.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 10 - Dictionaries</p>"},{"location":"topics/python/13_dictionaries.html#summary","title":"Summary","text":"<p>Cheat sheet for dictionaries <sup>1</sup></p>"},{"location":"topics/python/13_dictionaries.html#questions","title":"Questions","text":"1. What is the correct syntax to create an empty dictionary in Python?empty_dict = []empty_dict = {}empty_dict = dict[]empty_dict = {dict}The correct syntax to create an empty dictionary in Python is <code>empty_dict = {}</code>. Square brackets <code>[]</code> are used for lists, and <code>dict[]</code> or <code>{dict}</code> are invalid syntax.Submit 2. How do you access the value associated with the key 'name' in a dictionary called 'person'?person.nameperson['name']person(name)person{'name'}To access the value associated with a key in a dictionary, you use square brackets with the key as a string: <code>person['name']</code>.Submit 3. What will be the output of the following code?<pre><code>my_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(my_dict['d'])</code></pre>1NoneKeyError3The code will raise a <code>KeyError</code> because the key 'd' does not exist in the dictionary.Submit 4. Which method would you use to get a list of all the keys in a dictionary?keys()values()items()get()The <code>keys()</code> method returns a view object that displays a list of all the keys in the dictionary.Submit 5. How can you safely retrieve a value for a key that might not exist in a dictionary?Use the <code>get()</code> methodUse the <code>set()</code> methodAccess the key directly with square bracketsUse a <code>for</code> loopThe <code>get()</code> method allows you to safely retrieve a value for a key that might not exist, without raising a <code>KeyError</code>.Submit 6. What will the following code output?<pre><code>fruit = {'apple': 2, 'banana': 3}\nfruit['apple'] = 5\nprint(fruit['apple'])</code></pre>235ErrorThe code modifies the value associated with the key 'apple' to 5, so <code>fruit['apple']</code> will output 5.Submit 7. How do you remove an entry from a dictionary?del dict['key']remove dict['key']pop dict['key']clear dict['key']The correct way to remove an entry from a dictionary is by using the <code>del</code> statement followed by the dictionary and the key: <code>del dict['key']</code>.Submit 8. What does the following code return?<pre><code>my_dict = {'x': 10, 'y': 20}\nprint('z' in my_dict)</code></pre>TrueFalseNoneKeyErrorThe code checks if the key 'z' exists in <code>my_dict</code>. Since it doesn't, it returns <code>False</code>.Submit 9. Which of the following will convert all keys of a dictionary into a list?list(my_dict.keys())my_dict.keys().tolist()list(my_dict.values())keys(my_dict)The correct way to convert all keys of a dictionary into a list is by using <code>list(my_dict.keys())</code>.Submit 10. What will the following code print?<pre><code>car = {'brand': 'Toyota', 'year': 2010}\ncar['model'] = 'Camry'\nprint(car)</code></pre>{'brand': 'Toyota', 'year': 2010, 'model': 'Camry'}{'brand': 'Toyota', 'year': 2010}Error: 'model' key doesn't existNoneThe code adds a new key-value pair to the dictionary <code>car</code>, so the final dictionary includes the new key 'model' with the value 'Camry'.Submit"},{"location":"topics/python/13_dictionaries.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Names and grades<p>Write a Python function that takes a dictionary of student names and their corresponding grades and returns the names of all students who received an 'A' grade.</p>Read more ...English to French<p>Create a Python program that simulates a simple English-to-French dictionary. Allow the user to input an English word, and your program should return the French translation if it exists in the dictionary.</p>Read more ...Book titles<p>Write a Python function that takes a list of dictionaries, where each dictionary represents a book with attributes like title, author, pages, and year. The function should return a list of book titles published in a specific year provided as an argument to the function.</p>Read more ... <ol> <li> <p>https://ehmatthes.github.io/pcc_3e/cheat_sheets/ \u21a9</p> </li> </ol>"},{"location":"topics/python/14_tuples.html","title":"Tuples","text":""},{"location":"topics/python/14_tuples.html#tuples","title":"Tuples","text":"<p>Objectives</p> <ul> <li>Differentiate between tuples and lists in Python, emphasizing the immutability of tuples.</li> <li>Recognize the use of tuples to group related data together.</li> <li>Learn how to create tuples</li> <li>Access elements in a tuple using indexing, similar to lists.</li> <li>Understand 0-based indexing and the slicing operator for tuples.</li> <li>Identify scenarios where tuples are useful, especially when dealing with collections of related data that should not change.</li> <li>Apply relational operators to tuples, which compare elements in a pairwise manner.</li> </ul> <p>Similar to a list, a tuple is a sequence of values which can be of any type and are indexed by integers.  The key difference however is that a tuple is immutable meaning their contents cannot be changed after creation.  Tuples are typically used to group related data together.</p>"},{"location":"topics/python/14_tuples.html#example-12","title":"Example 12","text":"<pre><code># Example program with tuples\nclimate_info = (\"Sunny\", 25, 45)\nprint(\"Original climate info:\", climate_info)\n\nweather = climate_info[0]\nprint(\"Weather:\", weather)\n\ntemperature = climate_info[1]\nprint(\"Temperature:\", temperature)\n\nhumidity = climate_info[2]\nprint(\"Humidity:\", humidity)\n\nsub_tuple = climate_info[1:]\nprint(\"Sub-tuple:\", sub_tuple)\n\ncomparison = (25, 45) == (25, 45)\nprint(\"Comparison result:\", comparison)\n</code></pre> <p>Using the example code above, predict the output for the following:</p> <ul> <li>What will be printed for the original climate info (line 3)?</li> <li>What will the weather, temperature, and humidity variables contain (lines 6, 9 and 12)?</li> <li>What will be printed for the sub-tuple (line 15)?</li> <li>What will the comparison result be (line 18)?</li> </ul> <p>Copy the code into a Python environment and run the program.  Were you right?</p>"},{"location":"topics/python/14_tuples.html#creating-tuples","title":"Creating Tuples","text":"<p>You create a tuple by enclosing a comma-separated sequence of elements within parentheses <code>()</code>.</p> <pre><code>climate_info = (\"Sunny\", 25, 45)\n</code></pre> <p>Alternatively a tuple can be created by calling the function <code>tuple()</code>:</p> <pre><code>empty_tuple = tuple()           # -&gt; an empty tuple\nmy_tuple = tuple(\"sunny\")       # -&gt; ('s','u','n','n','y')\n</code></pre> <p>The <code>tuple()</code> function takes only one argument, so best to think of it as converting another type into a tuple type.  As in the example above that takes the string \"apple\" and returns a tuple with the elements of that string.  </p> <p>Similarly, if we give <code>tuple()</code> a list:</p> <pre><code>my_tuple = tuple([1,2,3])\nprint(my_tuple)             # -&gt; (1,2,3)\n</code></pre>"},{"location":"topics/python/14_tuples.html#accessing-elements","title":"Accessing Elements","text":"<p>Elements in a tuple are accessed using indexing, just like in lists. Python uses 0-based indexing.</p> <pre><code>first_element = climate_info[0]  # Access the first element -&gt; \"sunny\"\n</code></pre> <p>The slicing operator will also work on tuples:</p> <pre><code>my_tuple = ('s','u','n','n','y')\nprint(my_tuple[1:4])                # -&gt; ('u','n','n')\n</code></pre> <p>But, if you try to modify any element in a tuple you will get an error:</p> <pre><code>my_tuple = ('s','u','n','n','y')\nmy_tuple[0] = 'S'                   # -&gt; TypeError: 'tuple' object does not support item assignment\n</code></pre>"},{"location":"topics/python/14_tuples.html#use-cases","title":"Use Cases","text":"<p>Tuples are useful when you have a collection of related data that should not change. For example, coordinates (x, y), date and time (year, month, day, hour, minute), and more.</p>"},{"location":"topics/python/14_tuples.html#comparing-tuples","title":"Comparing tuples","text":"<p>Relational operators can be applied to tuples.  They start by comparing the first element of each tuple and then move to the second and so on:</p> <pre><code>&gt;&gt;&gt; (3, 7, 9) &lt; (3, 6, 8)\nFalse\n&gt;&gt;&gt; (2, 8, 100) &lt; (20, 8, 200)\nTrue\n</code></pre>"},{"location":"topics/python/14_tuples.html#tuple-assignment","title":"Tuple assignment","text":"<p>There is a unique Python feature that can be used as a tuple can be on the left of an assignment statement.  This is easier to show in an example than explain!</p> <pre><code>&gt;&gt;&gt; a = ['Hello', 'World']\n&gt;&gt;&gt; (b, c) = a   # the brackets are optional but make the tuple assignment clearer\n&gt;&gt;&gt; b\n'Hello'\n&gt;&gt;&gt; c\n'World'\n</code></pre> <p>A neat use of this feature is to swap the values of two variables:</p> <pre><code>&gt;&gt;&gt; b, c = c, b\n&gt;&gt;&gt; b\n'World'\n&gt;&gt;&gt; c\n'Hello'\n</code></pre> <p>We can go further and use it, for example to split an email address into the username and domain:</p> <pre><code>&gt;&gt;&gt; email = 'peter.davies@gmail.com'\n&gt;&gt;&gt; username, domain = email.split('@')\n&gt;&gt;&gt; username\n'peter.davies'\n&gt;&gt;&gt; domain\n'gmail.com'\n</code></pre>"},{"location":"topics/python/14_tuples.html#dictionaries-and-tuples","title":"Dictionaries and tuples","text":"<p>Recall the example for the section on dictionaries:</p> <pre><code>for n in climate_data.items():\n    print(n)            \n</code></pre> <p>The output is:</p> <pre><code>('temperature', 22)\n('humidity', 45)\n('wind-_speed', 15)\n</code></pre> <p>If we call the <code>items()</code> function on our dictionary, it returns a list of tuples as <code>dict_items()</code>.  Each item in the list is a tuple with key value pairs:</p> <pre><code>&gt;&gt;&gt; climate_data = {'temperature': 22, 'humidity': 45, 'wind-_speed': 15, 'rainfall': 37}\n&gt;&gt;&gt; climate_data.items()\ndict_items([('temperature', 22), ('humidity', 45), ('wind-_speed', 15), ('rainfall', 37)])\n</code></pre> <p>It helps to first convert the in-built <code>dict_items()</code> form to a list:</p> <pre><code>&gt;&gt;&gt; c = list(climate_data.items())\n&gt;&gt;&gt; c\n[('temperature', 22), ('humidity', 45), ('wind-_speed', 15), ('rainfall', 37)]\n</code></pre> <p>As this is now a list of tuples, they can be sorted.</p> <p>Similarly, we saw the following used when looking at dictionaries:</p> <pre><code># Iterating through key-value pairs\nfor key, value in climate_data.items():\n    print(key, value)\n\n# output:\n# temperature 22\n# humidity 45\n# wind-_speed 15\n</code></pre> <p>The <code>key</code> and <code>value</code> here is a tuple (without the brackets, as brackets are optional).</p>"},{"location":"topics/python/14_tuples.html#tuples-as-return-values","title":"Tuples as return values","text":"<p>Another neat feature of the Python tuple is when we might want to return more than one value from a function.  Consider the following example:</p> <pre><code>def get_name_and_age():\n    name = \"Alice\"\n    age = 25\n    return name, age\n\nresult = get_name_and_age()\nprint(result)  # Output: ('Alice', 25)\n</code></pre> <p>The function <code>get_name_and_age()</code> returns a tuple containing two values: the <code>name</code> and <code>age</code>. The caller of the function can then unpack the tuple into separate variables or use it as-is:</p> <pre><code>name, age = get_name_and_age()\nprint(name)  # Output: 'Alice'\nprint(age)   # Output: 25\n</code></pre>"},{"location":"topics/python/14_tuples.html#activity","title":"Activity","text":"<p>Modify the example program to make the following changes:</p> <ol> <li>Attempt to change an element in the tuple.  What happens?</li> <li>Create a new tuple with updated values.</li> <li>Combine tuples to form a new tuple.</li> <li>Iterate through the tuple and print each element.</li> </ol>"},{"location":"topics/python/14_tuples.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>There is no additional task for tuples for the Climate Quest project.  USe the time to continue the refactoring exercise from the previous task.</p>"},{"location":"topics/python/14_tuples.html#questions","title":"Questions","text":"1. What is the key difference between a tuple and a list in Python?Tuples are mutable, while lists are immutable.Tuples are immutable, while lists are mutable.Tuples can only contain numbers, while lists can contain any data type.Tuples can be of any length, while lists have a fixed length.The key difference is that tuples are immutable, meaning their contents cannot be changed after creation, while lists are mutable and can be modified.Submit 2. How do you create an empty tuple in Python?empty_tuple = []empty_tuple = ()empty_tuple = {}empty_tuple = tuple[]The correct way to create an empty tuple is with empty parentheses: <code>empty_tuple = ()</code>. Square brackets create a list, and curly braces create a dictionary.Submit 3. Given the tuple <code>coordinates = (10, 20, 30)</code>, how would you access the second element?coordinates[1]coordinates[2]coordinates['20']coordinates(2)Python uses 0-based indexing, so <code>coordinates[1]</code> accesses the second element, which is 20.Submit 4. What will happen if you try to modify an element in a tuple?<pre><code>my_tuple = (1, 2, 3)\nmy_tuple[0] = 10</code></pre>The tuple will be modified.A TypeError will be raised.The first element will be changed to 10.The code will run without any changes.Tuples are immutable, so trying to modify an element will raise a <code>TypeError</code>.Submit 5. What will be the output of the following code?<pre><code>tuple1 = (3, 5, 7)\ntuple2 = (3, 5, 7)\nprint(tuple1 == tuple2)</code></pre>TrueFalseNoneErrorThe comparison <code>tuple1 == tuple2</code> returns <code>True</code> because both tuples contain the same elements in the same order.Submit 6. Which of the following methods can be used to convert a list to a tuple?tuple()list()convert()set()The <code>tuple()</code> function can be used to convert a list to a tuple. For example, <code>tuple([1, 2, 3])</code> would return <code>(1, 2, 3)</code>.Submit 7. What is the result of slicing the tuple <code>numbers = (0, 1, 2, 3, 4)</code> with <code>numbers[1:3]</code>?(1, 2)(1, 2, 3)(0, 1)(2, 3)Slicing <code>numbers[1:3]</code> returns the elements from index 1 up to, but not including, index 3, resulting in <code>(1, 2)</code>.Submit 8. In which scenario is it most appropriate to use a tuple instead of a list?When you need to store data that will change frequently.When you have a collection of related data that should not change.When you need to use functions like append() and remove().When you need to create a dynamic and mutable collection.Tuples are best used when you have a collection of related data that should remain unchanged, such as coordinates, dates, or other constants.Submit 9. What will the following code output?<pre><code>a = ['Hello', 'World']\nb, c = a\nprint(b)\nprint(c)</code></pre>'Hello' 'World''World' 'Hello'['Hello', 'World']('Hello', 'World')The code demonstrates tuple unpacking, where the list <code>a</code> is unpacked into variables <code>b</code> and <code>c</code>. The output will be <code>Hello</code> and <code>World</code>.Submit 10. What is the output of the following code?<pre><code>def get_name_and_age():\n    name = 'Alice'\n    age = 25\n    return name, age\n\nresult = get_name_and_age()\nprint(result)</code></pre>('Alice', 25)['Alice', 25]'Alice', 25ErrorThe function <code>get_name_and_age()</code> returns a tuple containing two values: the <code>name</code> and <code>age</code>. The output will be <code>('Alice', 25)</code>.Submit"},{"location":"topics/python/14_tuples.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Tuple Slicing<p>Write a Python program that takes a string as input and converts it into a tuple of individual characters. Then, display a slice of the tuple containing the characters from the 2nd to the 5th position.</p>Read more ...Email Splitter<p>Write a Python program that prompts the user to enter an email address and then splits it into a tuple containing the username and domain. Display both parts separately.</p>Read more ...Temperature Records<p>Create a program that stores daily temperature records as tuples. Allow the user to input the temperature for each day of a week (e.g., Monday to Sunday). Then, find and display the maximum and minimum temperatures for the week using tuple operations.</p>Read more ..."},{"location":"topics/python/15_exceptions.html","title":"Exceptions","text":""},{"location":"topics/python/15_exceptions.html#exceptions","title":"Exceptions","text":"<p>Objectives</p> <ul> <li>Define exceptions as events that occur during program execution, disrupting the normal flow.</li> <li>Recognize common reasons for exceptions, such as invalid input, file not found, and division by zero.</li> <li>Identify specific types of exceptions in Python, including <code>ValueError</code>, <code>TypeError</code>, <code>IndexError</code>, <code>NameError</code>, and <code>ZeroDivisionError</code>.</li> <li>Understand the circumstances that lead to each type of exception.</li> <li>Describe the structure of a <code>try...except</code> block and its role in managing exceptions.</li> <li>Demonstrate how to catch and handle exceptions using generic and specific <code>except</code> blocks.</li> </ul>"},{"location":"topics/python/15_exceptions.html#what-are-exceptions","title":"What are Exceptions?","text":"<ul> <li>Exceptions are events that occur during the execution of a program, which disrupt the normal flow of the program.  </li> <li>They can be caused by various reasons such as invalid input, file not found, division by zero, etc.</li> </ul>"},{"location":"topics/python/15_exceptions.html#example-13","title":"Example 13","text":"<pre><code>def divide_numbers(a, b):\n    return a / b\n\ndef get_element(lst, index):\n    return lst[index]\n\ndef convert_to_int(value):\n    return int(value)\n\nprint(divide_numbers(10, 0))\nprint(get_element([1, 2, 3], 5))\nprint(convert_to_int(\"abc\"))\n</code></pre> <p>Using the example code above, predict the output for the following:</p> <ul> <li>What will happen when dividing 10 by 0, line 10?</li> <li>What do you think will occur when trying to access an index that doesn\u2019t exist, line 11?</li> <li>What will happen when trying to convert the given string to an integer, line 12?</li> </ul> <p>Copy and paste the code into a Python environment, run the code and check your predictions against the actual results.</p> <p>In each case an error occurred, these errors are so extreme the program cannot continue and it crashes out with an error message:</p> <ul> <li>In the first instance we're trying to divide by zero, which triggers the ZeroDivisionError exception</li> <li>Then we try to access an item in a list using an index value that does nor exist, triggering an IndexError exception</li> <li>Finally, <code>abc</code> cannot be converted into an integer thus triggering a ValueError</li> </ul> <p>There are other types of exceptions that can occur including NameError and TypeError.  You can find others here</p> <p>These errors are known as exceptions and to avoid the error, and program crashing out, we need to insert code that handles these exceptions.</p>"},{"location":"topics/python/15_exceptions.html#handling-exceptions","title":"Handling exceptions","text":"<p>In Python, <code>the try...except...finally</code> block is a powerful construct used for exception handling, allowing a program to handle errors gracefully and ensure that important cleanup actions are always executed. </p> <ul> <li>The <code>try</code> block contains the code that may trigger, or raise an exception</li> <li>The <code>except</code> block allows you to catch and manage specific or general exceptions that occur. </li> <li>The <code>finally</code> block, which is optional, runs regardless of whether an exception was raised or not, making it ideal for tasks like closing files or releasing resources. This ensures that necessary final actions, such as closing a file or cleaning up resources, are always performed, even if an error occurs during the execution of the try block.</li> </ul> <p>For example, in the <code>divide_numbers()</code> function, we can check for the divisor being passed in.  Should it be a \\(0\\) the error can be handled:</p> <pre><code>def divide_numbers(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        print(\"Error: Division by zero is not allowed.\")\n        return None\n    finally:\n        print(\"Execution of divide_numbers() completed.\")\n</code></pre> <ul> <li>Line 3: the function will attempt to return the result of dividing <code>a</code> by <code>b</code>.  If this raises an exception control is then passed to ...</li> <li>... Line 4: which prints a helpful message and returns from the function</li> <li>Line 7: this is optional and here just provides a message acknowledging safe completion of the function</li> </ul>"},{"location":"topics/python/15_exceptions.html#activity","title":"Activity","text":"<p>Following this pattern, modify the following code to capture an exceptions that might be raised in our example program:</p> <pre><code>def divide_numbers(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError:\n        print(\"Error: Division by zero is not allowed.\")\n        return None\n\ndef get_element(lst, index):\n    # insert a try..except block to catch and handle an out-of-range index.\n    return lst[index]\n\ndef convert_to_int(value):\n    # insert a try..except block to manage invalid string-to-integer conversions.\n    return int(value)\n\nprint(divide_numbers(10, 2))\nprint(divide_numbers(10, 0))\nprint(get_element([1, 2, 3], 5))\nprint(convert_to_int(\"abc\"))\nprint(convert_to_int(\"123\"))\n</code></pre>"},{"location":"topics/python/15_exceptions.html#types-of-exception","title":"Types of Exception","text":""},{"location":"topics/python/15_exceptions.html#valueerror","title":"ValueError","text":"<p>We saw this type of exception in the previous example.  The value error is raised when an operation or a function receives an argument of the correct type but with an inappropriate value.  Typically when trying to convert a string to an integer or float, but the string doesn't represent a valid number or using an argument that is out of the acceptable range for a function or method.</p>"},{"location":"topics/python/15_exceptions.html#typeerror","title":"TypeError","text":"<p>A <code>TypeError</code> is raised when an operation or function is applied to an object of inappropriate type.  For example, trying to add an integer to a string, using the wrong number of arguments when calling a function, or trying to call a function on an object (such as a list) that does not support that function.</p> <p>E.g.</p> <pre><code>x = 5 + \"2\"         # Raises a TypeError because you can't add an int to a str.\nresult = len(42)    # Raises a TypeError because you can't find the length of an int.\n</code></pre>"},{"location":"topics/python/15_exceptions.html#indexerror","title":"IndexError","text":"<p>An <code>IndexError</code> occurs when you attempt to access an element at an index that is not valid for the given sequence or collection. It's a common error when working with lists, tuples, strings, or similar data structures in Python. </p> <p>E.g.</p> <pre><code>my_list = [1, 2, 3]\nprint(my_list[5])  # Raises an IndexError because there is no element at index 5.\n\nmy_string = \"hello\"\nprint(my_string[10])  # Raises an IndexError because there is no character at index 10.\n\nempty_list = []\nprint(empty_list[0])  # Raises an IndexError because the list is empty.\n</code></pre>"},{"location":"topics/python/15_exceptions.html#nameerror","title":"NameError","text":"<p>A <code>NameError</code> occurs when Python encounters a name (identifier for a variable, function, or module) that it cannot find, it's often caused by typos, incorrect variable names etc..</p> <p>E.g.</p> <pre><code>print(variable_name)  # Raises a NameError if 'variable_name' is not defined.\n\ndef my_function():\n    print(x)  # Raises a NameError if 'x' is not defined globally.\n\nimport math\nprint(math.pi)  # No NameError because 'math' module is imported.\n\nprint(non_existent_module.some_function())  # Raises a NameError if 'non_existent_module' doesn't exist.\n</code></pre>"},{"location":"topics/python/15_exceptions.html#zerodivisionerror","title":"ZeroDivisionError","text":"<p>As the name implies, when we try to divide by \\(0\\) this exception will be raised.</p>"},{"location":"topics/python/15_exceptions.html#generic-exceptions","title":"Generic Exceptions","text":"<p>The following is valid:</p> <pre><code>def divide_numbers(a, b):\n    try:\n        return a / b\n    except:\n        print(\"Error: Division by zero is not allowed.\")\n        return None\n</code></pre> <ul> <li>The <code>try</code> block contains the code that might raise an exception.</li> <li>The <code>except</code> block contains the code to handle the exception when it occurs.</li> </ul> <p>In the example the <code>except</code> block was generic, i.e. it would catch anything.  It is usually better to specify the type of exception we're trying to catch as it helps with debugging.  </p> <p>The types of error can be provided as a tuple:</p> <pre><code>try:\n    # code that may raise an exception\nexcept IndexError, ValueError, TypeError:\n    # code to handle the exception raised\n</code></pre> <p>Or provide multiple <code>except</code> blocks:</p> <pre><code>try:\n    # Code that may raise an exception\nexcept ExceptionType1:\n    # Code to handle ExceptionType1\nexcept ExceptionType2:\n    # Code to handle ExceptionType2\n</code></pre>"},{"location":"topics/python/15_exceptions.html#the-finally-block","title":"The <code>finally</code> Block","text":"<p>The <code>try ... except</code> block can also take a <code>finally</code> section.  This is used to execute code regardless of whether an exception was raised or not. It is often used for cleanup tasks, like closing files or releasing resources.</p>"},{"location":"topics/python/15_exceptions.html#raising-an-exception","title":"Raising an exception","text":"<p>Sometimes we need to raise an exception when there is a potential issue that needs to be handled, perhaps not covered by any of the exceptions seen thus far.  For example, the age of a student will be within a certain range (depending on their phase of study).  e.g. a secondary school student would normally be between 11 and 18 years old.  Should the user provide an age outside of that range we can raise an exception to handle that data.</p> <p>The syntax to use is:</p> <pre><code>raise ExceptionType(\"Error message\")\n</code></pre> <p>We can create our own <code>ExceptionType</code>.  This involves creating a class in Python.  Classes are beyond the requirements for GCSE, but the following illustrates the principle:</p> <pre><code>class AgeError(Exception):\n    pass\n\ntry:\n    age = int(input(\"Enter your age: \"))\n    if age &lt; 11 or age &gt; 18:\n        raise AgeError(\"Invalid age entered!\")\n    else:\n        print(\"Age is valid.\")\nexcept AgeError as e:\n    print(f\"Error: {e}\")\n</code></pre> <p>We can also raise an exception for a built-in exception.  E.g. in a temperature conversion program we might ask the user for the units, either a <code>C</code> or an <code>F</code> (for Celcius and Fahrenheit), we can raise an exception if the value entered is not correct:</p> <pre><code>if unit == \"C\":\n    converted_temperature = (temperature * 9/5) + 32\n    converted_unit = \"Fahrenheit\"\nelif unit == \"F\":\n    converted_temperature = (temperature - 32) * 5/9\n    converted_unit = \"Celsius\"\nelse:\n    # Handle invalid unit\n    raise ValueError(f\"Invalid unit '{unit}' entered.\")\n</code></pre>"},{"location":"topics/python/15_exceptions.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>There is no additional task for the Climate Quest project.  Use the time to continue working on your game</p>"},{"location":"topics/python/15_exceptions.html#summary","title":"Summary","text":"<p>Cheat sheet for exceptions (and files)<sup>1</sup></p>"},{"location":"topics/python/15_exceptions.html#questions","title":"Questions","text":"1. What is an exception in Python?A block of code that executes repeatedly.An event that occurs during the execution of a program, disrupting the normal flow.A statement that always runs, regardless of whether an error occurs.A keyword that is used to declare variables.An exception is an event that occurs during the execution of a program, which disrupts the normal flow.Submit 2. Which of the following exceptions is raised when you try to divide a number by zero?ValueErrorIndexErrorTypeErrorZeroDivisionErrorA ZeroDivisionError is raised when a number is divided by zero.Submit 3. What will happen when the following code is executed? <code>python print(int('abc')) </code><code></code>It will print 'abc'.It will raise a TypeError.It will raise a ValueError.It will convert 'abc' to an integer.The code will raise a ValueError because 'abc' cannot be converted to an integer.Submit 4. Which type of exception is raised when you try to access an element at an invalid index in a list?NameErrorIndexErrorKeyErrorTypeErrorAn IndexError is raised when you try to access an element at an index that does not exist in a list.Submit 5. What is the purpose of the <code>try</code> block in Python?To declare variables.To contain the code that might raise an exception.To print the error message.To ensure the code runs without errors.The <code>try</code> block contains the code that may raise an exception.Submit 6. What does the <code>finally</code> block do in Python?It runs only if an exception occurs.It runs regardless of whether an exception occurs or not.It catches all exceptions.It is used to define custom exceptions.The <code>finally</code> block runs regardless of whether an exception was raised or not.Submit 7. Which of the following exceptions is raised when a function is called with an argument of the wrong type?TypeErrorValueErrorKeyErrorNameErrorA TypeError is raised when an operation or function is applied to an object of inappropriate type.Submit 8. What will the following code output? <code></code><code>python my_list = [1, 2, 3] print(my_list[5]) </code><code></code>It will print 'None'.It will print 5.It will raise an IndexError.It will print the last element in the list.The code will raise an IndexError because index 5 is out of range for the list.Submit 9. Which of the following is true about a generic <code>except</code> block?It catches all exceptions, regardless of their type.It catches only specific types of exceptions.It only executes if no exceptions are raised.It must always be followed by a <code>finally</code> block.A generic <code>except</code> block catches all exceptions, regardless of their type.Submit 10. What will the following code output?<pre><code>try:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print('Division by zero is not allowed.')\nfinally:\n    print('Done.')\n</code></pre>An error message will be printed, then 'Done.''Division by zero is not allowed.' will be printed, then 'Done.''Done.' will be printed only.Nothing will be printed.The code will print 'Division by zero is not allowed.' followed by 'Done.' because the <code>finally</code> block always executes.Submit"},{"location":"topics/python/15_exceptions.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Calculator with Error Handling<p>Create a simple calculator program that takes two numbers and an operation (addition, subtraction, multiplication, division) from the user. Handle both ValueError and ZeroDivisionError exceptions</p>Read more ...Data Validation<p>Write a program that prompts the user to enter their age. Handle both ValueError and AgeError exceptions.  For the second of these create a custom exception 'AgeError' and raise it if the age is less than 0 or greater than 150. Handle this exception and display an appropriate message.</p>Read more ... <ol> <li> <p>[https://ehmatthes.github.io/pcc_3e/cheat_sheets/(https://ehmatthes.github.io/pcc_3e/cheat_sheets/)]\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/python/16_files.html","title":"Working with files","text":""},{"location":"topics/python/16_files.html#working-with-files","title":"Working with files","text":"<p>Objectives</p> <ul> <li>Differentiate between text files and binary files.</li> <li>Define text files as composed of plain, human-readable text with specific character encoding.</li> <li>Identify the line-based structure of text files, including the role of newline characters.</li> <li>Explain the process of opening a file using the <code>open()</code> function.</li> <li>Understand file modes (<code>r</code>, <code>w</code>, <code>a</code>, <code>b</code>) and their purposes (reading, writing, appending, binary).</li> <li>Recognize the association of file handles with resource management and the importance of closing files.</li> <li>Use the <code>write()</code> method to write a string to a text file.</li> <li>Append data to an existing file using the 'a' mode.</li> </ul> <p>Thus far all the programs we have written have been working with data stored in main memory, once the program finishes all the data we have been using is lost.  Here we look into how we can read and write data to a storage device thus making it available for any subsequent runs of our program.</p> <p>Files can either be text files, where the data is stored as plain text; or binary, where the data is encoded in binary.  </p>"},{"location":"topics/python/16_files.html#text-files-vs-binary-files","title":"Text files vs binary files","text":"<p>A text file is a type of computer file that contains plain, human-readable text. It is a simple and commonly used file format for storing textual data in a structured or unstructured manner. Text files are typically composed of characters from a specific character encoding, such as ASCII or UTF-8, which represent alphanumeric characters, symbols, and control characters (e.g., newline and tab).</p> <p>Text files are:</p> <ul> <li> <p>Human-Readable: they can be opened with a text editor.</p> </li> <li> <p>Unformatted: Text files usually do not contain any formatting information. They consist of plain text without styles, fonts, colors, or any other layout-related attributes. This simplicity makes them versatile for a wide range of applications.</p> </li> <li> <p>Line-Based: Text files are often organized into lines or rows of text, with each line terminated by a newline character (e.g., '\\n' in Unix-based systems or '\\r\\n' in Windows). Lines in text files are often used to separate records or pieces of information.</p> </li> <li> <p>Character Encoding: Text files use a specific character encoding scheme to represent characters. Common character encodings include ASCII, UTF-8, and ISO-8859-1. The choice of encoding determines which characters can be represented in the file.</p> </li> </ul> <p>In contrast to text files, binary files store data in a non-human-readable format, often in a way that is optimized for efficient storage and processing by a computer. Binary files can contain a wide range of data, including images, audio, video, executable programs, and more. Text files are primarily used for storing textual information and are easier for humans to work with and understand.</p> <p>We'll mainly focus on how to handle text files.</p>"},{"location":"topics/python/16_files.html#example-14","title":"Example 14","text":"<pre><code>file = open(\"example.txt\", \"w\")\nfile.write(\"Hello, World!\")\nfile.close()\n\nfile = open(\"example.txt\", \"a\")\nfile.write(\"\\nThis is a new line.\")\nfile.close()\n\nfile = open(\"example.txt\", \"r\")\ncontent = file.read()\nprint(content)\nfile.close()\n</code></pre> <p>Review the example and predict what will happen when:</p> <ul> <li>What do you think the <code>open()</code> function does in this code, line 1?</li> <li>Why are there different characters inside the quotes, such as <code>\"w\"</code>, <code>\"a\"</code>, and <code>\"r\"</code>, lines 1, 5, 9?</li> <li>What might happen when we write to a file and then append more text to it?</li> <li>Why is it important to close the file, line 12?</li> </ul> <p>Copy and paste the code into a Python environment, run the code and check the results against your predictions.</p>"},{"location":"topics/python/16_files.html#further-tasks","title":"Further tasks","text":"<ul> <li>Modify the file name in the code and see what happens when you try to read from a file that doesn\u2019t exist.</li> <li>Experiment with different file modes, such as <code>\"b\"</code> for binary files, and discuss how this would change the data handling.</li> <li>Test what happens if you forget to close the file. Discuss how this can affect file integrity and resource management.</li> </ul>"},{"location":"topics/python/16_files.html#key-concepts-and-explanations","title":"Key Concepts and Explanations","text":"<ol> <li>Text Files vs. Binary Files:</li> <li>Text Files: Contain plain, human-readable text with specific character encoding (e.g., UTF-8).</li> <li> <p>Binary Files: Consist of data in binary format, typically not human-readable, such as images or executables.</p> </li> <li> <p>File Modes in Python:</p> </li> <li><code>\"r\"</code>: Read mode (default). Opens the file for reading.</li> <li><code>\"w\"</code>: Write mode. Creates a new file or truncates an existing one.</li> <li><code>\"a\"</code>: Append mode. Opens the file for writing and appends data to the end.</li> <li> <p><code>\"b\"</code>: Binary mode. Used with <code>\"r\"</code>, <code>\"w\"</code>, or <code>\"a\"</code> to handle binary files.</p> </li> <li> <p>File Handles and Resource Management:</p> </li> <li>Opening a file returns a file handle, a reference to the file.</li> <li> <p>It's crucial to close files after operations to release system resources and avoid data corruption.</p> </li> <li> <p>Writing to a File:</p> </li> <li> <p>The <code>write()</code> method allows writing strings to a file. When in <code>\"w\"</code> mode, it overwrites existing content; in <code>\"a\"</code> mode, it appends new content.</p> </li> <li> <p>Appending Data:</p> </li> <li>Using <code>\"a\"</code> mode, you can add new content to the end of the file without erasing the existing content.</li> </ol>"},{"location":"topics/python/16_files.html#files-are-line-based","title":"Files are line-based","text":"<p>Structurally a text file consists of a number of lines.  To break the file into lines we need the end of line character, sometimes called the newline character.  We've seen how we can force a string to go across two lines by using  <code>\\n</code> in the string:</p> <pre><code>&gt;&gt;&gt; print('Hello\\nWorld')\nHello\nWorld\n&gt;&gt;&gt; my_string = 'a\\nc'\n&gt;&gt;&gt; print(my_string)\na\nc\n&gt;&gt;&gt; len(my_string)          # the new line character counts towards the count\n3\n</code></pre> <p>When we look at the lines in a text file we have to remember there will be a new line character at the end of each line.</p>"},{"location":"topics/python/16_files.html#opening-a-file","title":"Opening a File","text":"<p>Before you can read from or write to a file, you need to open it using the <code>open()</code> function. The <code>open()</code> function takes two arguments: the file name and the mode in which you want to open the file.</p> <ul> <li>r: Read (default mode) - Opens the file for reading.</li> <li>w: Write - Opens the file for writing. If the file already exists, it will be truncated; if not, a new file will be created.</li> <li>a: Append - Opens the file for writing, but appends data to the end of the file. If the file does not exist, it will be created.</li> <li>b: Binary mode - Used in conjunction with other modes to indicate that the file should be treated as binary.</li> </ul> <p>When we are opening a file Python has to interact with the operating system.  It's the operating system that 'knows' where the data for the requested file is stored.  We're asking the operating system to find the file (using the name of the file) and to make sure the file exists in that location.</p> <p>If the request to open the file is successful the operating system will return a file handle.  It's not the actual data in the file but a pointer to where that data is stored.</p> <p>Note</p> <p>File handles, like pointers, are associated with resource management. When you open a file, the operating system allocates resources to maintain the file's state, and the file handle is responsible for managing those resources. This includes closing the file handle when you're done to release those resources.</p> <p>If the request is not successful an exception will be raised: <code>FileNotFoundError</code>.  It is always good practice to wrap any calls to open a file within a <code>try ... except</code> block (though my be omitted to save space in examples here).</p>"},{"location":"topics/python/16_files.html#reading-from-text-files","title":"Reading from Text Files","text":"<p>To read from a text file, you can use various methods, but the most common one is <code>read()</code>.</p> <pre><code># Opening a text file for reading\nfile = open('example.txt', 'r')\n# Reading the entire file\ncontent = file.read()           # it's now one big string\n# Closing the file\nfile.close()                    # Do not forget to close the file\n# Printing the content\nprint(content)\n</code></pre> <p>We can iterate over each line of the file:</p> <pre><code># Opening a text file for reading\nfile = open('example.txt', 'r')\nline_count = 0\nfor line in file:\n    print(line)\n    line_count += 1\nfile.close()                    # Do not forget to close the file\n# Printing the content\nprint(f'{line_count} lines)\n</code></pre> <p>Note</p> <p>To remove the new line character from the end of each line use <code>rstrip()</code>, where the 'r' here stands for 'right'.  Any trailing or preceding whitespace can also be stripped off using <code>strip()</code></p> <p>In the examples above the filename has been hardcoded but it's more usual to ask the user for the name of the file to use.  Of course this is better but also fraught as the user might make a typo, or misremember the name of the file and an exception error, <code>FileNotFoundError</code> will be returned.    In such cases we must wrap this request in a <code>try ... except</code> block.  It is best to always assume the request to <code>open()</code> the file will fail.  E.g.</p> <pre><code># Opening a text file for reading\nfilename = input('Enter filename: ')\ntry:\n    file = open(filename, 'r')\nexcept:\n    print(f'File, {filename}, cannot be opened')\n    exit()                      # quits the program\nline_count = 0\nfor line in file:\n    print(line)\n    line_count += 1\nfile.close()                    # Do not forget to close the file\n# Printing the content\nprint(f'{line_count} lines)\n</code></pre>"},{"location":"topics/python/16_files.html#reading-a-file-using-with-open","title":"Reading a file using <code>with open()</code>","text":"<p>In the previous examples we explicitly closed the file we had opened using the <code>close()</code> method on that file.  This is good practice and recommended but we can take a shortcut as it's so easy to forget to close the file:</p> <pre><code>filename = input(\"Enter filename: \")\nwith open(filename, 'r') as file:\n    contents = file.read()\nprint(contents)\n</code></pre> <p>When using the <code>with</code> statement the file will be automatically closed when it is no longer needed.  This assumes the file with that filename exists and can be found so it is good rpacticec to also wrap this statement in a <code>try ...except</code> block as before:</p> <pre><code>try:\n    # Open the file in a 'with' statement for automatic closing\n    with open('filename.txt', 'r') as file:\n        # Perform operations on the file\n        content = file.read()\n        # ... other file operations ...\n\nexcept IOError as e:\n    # Handle IOErrors, such as file not found or permission issues\n    print(f\"An IOError occurred: {e}\")\n    # Additional error handling code can be added here\n</code></pre> <p>Note</p> <p>It is worth getting familiar with these constructs and always using <code>try...except</code> and <code>with open(...)</code> for all file handling operations.</p>"},{"location":"topics/python/16_files.html#writing-to-text-files","title":"Writing to Text Files","text":"<p>To write to a text file, you can use the <code>write()</code> method and the <code>w</code> mode as the second parameter.</p> <pre><code># Opening a text file for writing\nfile = open('example.txt', 'w')\n# Writing data to the file\nfile.write('Hello, World!')\n# Closing the file\nfile.close()\n</code></pre> <p>Note</p> <p>The <code>write()</code> function returns the number of characters that have been written.  In the example above this return value is not being assigned.</p> <p>If the file already exists any existing data will be overwritten - so take care!  If the file has not been closed and subsequent calls to <code>write()</code> are made the new data will be appended to that file.</p> <p>Hint</p> <p>When writing a line of text to a file make sure to include the newline character, <code>\\n</code>.</p>"},{"location":"topics/python/16_files.html#reading-and-writing-binary-files","title":"Reading and Writing Binary Files","text":"<p>For binary files, use the 'b' mode and methods like <code>read()</code>, <code>write()</code>, and <code>readinto()</code> for reading and writing binary data.</p> <pre><code># Reading binary data\nwith open('binary_data.bin', 'rb') as file:\n    data = file.read()\n\n# Writing binary data\nwith open('binary_data.bin', 'wb') as file:\n    file.write(b'\\x48\\x65\\x6c\\x6c\\x6f\\x2c\\x20\\x57\\x6f\\x72\\x6c\\x64')\n</code></pre>"},{"location":"topics/python/16_files.html#summary-of-readingwriting-methods","title":"Summary of reading/writing methods","text":"<p>In Python 3, there are several methods and techniques for reading and writing data to a text file. Here are some commonly used methods:</p>"},{"location":"topics/python/16_files.html#reading-data-from-a-text-file","title":"Reading Data from a Text File:","text":"<ol> <li><code>read()</code> Method:</li> <li>The <code>read()</code> method reads the entire content of the file as a single string.</li> <li> <p>Example:      </p><pre><code>with open('example.txt', 'r') as file:\n    content = file.read()\n</code></pre> </li> <li> <p><code>readline()</code> Method:</p> </li> <li>The <code>readline()</code> method reads one line at a time from the file.</li> <li> <p>Example:      </p><pre><code>with open('example.txt', 'r') as file:\n    line = file.readline()\n    while line:\n        # Process the line\n        line = file.readline()\n</code></pre> </li> <li> <p><code>readlines()</code> Method:</p> </li> <li>The <code>readlines()</code> method reads all lines from the file and returns them as a list of strings.</li> <li> <p>Example:      </p><pre><code>with open('example.txt', 'r') as file:\n    lines = file.readlines()\n</code></pre> </li> <li> <p>Iterating Through File Object:</p> </li> <li>You can iterate directly through the file object itself to read lines one by one.</li> <li>Example:      <pre><code>with open('example.txt', 'r') as file:\n    for line in file:\n        # Process the line\n</code></pre></li> </ol>"},{"location":"topics/python/16_files.html#writing-data-to-a-text-file","title":"Writing Data to a Text File:","text":"<ol> <li><code>write()</code> Method:</li> <li>The <code>write()</code> method is used to write a string to the file.</li> <li> <p>Example:      </p><pre><code>with open('output.txt', 'w') as file:\n    file.write(\"Hello, World!\")\n</code></pre> </li> <li> <p><code>writelines()</code> Method:</p> </li> <li>The <code>writelines()</code> method writes a list of strings to the file, typically after joining them together.</li> <li> <p>Example:      </p><pre><code>lines = [\"Line 1\\n\", \"Line 2\\n\", \"Line 3\\n\"]\nwith open('output.txt', 'w') as file:\n    file.writelines(lines)\n</code></pre> </li> <li> <p>Using the <code>print()</code> Function:</p> </li> <li>You can use the <code>print()</code> function to write text to a file by specifying the <code>file</code> parameter.</li> <li> <p>Example:      </p><pre><code>with open('output.txt', 'w') as file:\n    print(\"Hello, World!\", file=file)\n</code></pre> </li> <li> <p>Appending Data:</p> </li> <li>To append data to an existing file, open it in 'a' (append) mode instead of 'w' (write) mode.</li> <li>Example:      <pre><code>with open('existing.txt', 'a') as file:\n    file.write(\"Appending data to the file.\")\n</code></pre></li> </ol>"},{"location":"topics/python/16_files.html#climate-quest-project","title":"Climate Quest Project","text":"<p>Throughout this topic we'll be working on a large scale project: Climate Quest.  In this project a player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p> <p>Go to task 11 - File Handling</p>"},{"location":"topics/python/16_files.html#summary","title":"Summary","text":"<p>Cheat sheet for exceptions (and files)<sup>1</sup></p>"},{"location":"topics/python/16_files.html#questions","title":"Questions","text":"1. What is a text file?A file that contains formatted, human-readable text with styles and fonts.A file that contains plain, human-readable text with specific character encoding.A file that stores data in binary format, optimized for efficient storage.A file that is specifically designed to store multimedia content.A text file contains plain, human-readable text with specific character encoding like ASCII or UTF-8.Submit 2. Which of the following correctly describes binary files?Files that can be opened and edited using a text editor.Files that store data in a non-human-readable format, optimized for processing by computers.Files that only contain alphanumeric characters and symbols.Files that are only used for storing images and videos.Binary files store data in a non-human-readable format, which is optimized for efficient storage and processing by computers.Submit 3. What does the <code>open()</code> function in Python do?It reads the contents of a file and prints it to the console.It opens a file and returns a file handle, which is used to interact with the file.It creates a new file and immediately closes it.It deletes a file from the filesystem.The <code>open()</code> function opens a file and returns a file handle, which is a reference to the file that allows for further operations like reading or writing.Submit 4. Which file mode should be used to append data to an existing text file without overwriting its contents?rwabThe 'a' mode is used to open a file for writing and append data to the end of the file without overwriting its existing contents.Submit 5. Why is it important to close a file after performing file operations?To free up system resources and avoid data corruption.To prevent the file from being opened again.To automatically delete the file from the filesystem.To convert the file into a binary format.Closing a file after operations is crucial to free up system resources and prevent data corruption.Submit 6. What will the following code output?<pre><code>file = open('example.txt', 'w')\nfile.write('Hello, World!')\nfile.close()\nfile = open('example.txt', 'a')\nfile.write('\\nThis is a new line.')\nfile.close()\nfile = open('example.txt', 'r')\ncontent = file.read()\nprint(content)\nfile.close()</code></pre>It will print an empty string.It will print only 'Hello, World!'.It will print 'Hello, World!' followed by 'This is a new line.'.It will raise a FileNotFoundError.The code will write 'Hello, World!' to the file, then append 'This is a new line.' and finally read and print both lines.Submit 7. Which file mode should be used to open a file for both reading and writing in binary format?rwabThe 'b' mode is used with 'r', 'w', or 'a' to open a file in binary format, allowing for reading or writing of binary data.Submit 8. What is the purpose of using <code>with open()</code> in file handling?To open a file without closing it.To automatically close the file after its operations are done.To handle binary files specifically.To open multiple files simultaneously.Using <code>with open()</code> ensures that the file is automatically closed after the operations are done, even if an exception occurs.Submit 9. Which method is used to write data to a text file in Python?read()write()close()append()The <code>write()</code> method is used to write a string to a text file.Submit 10. What does the <code>read()</code> method return when reading a text file?A list of strings, where each string is a line from the file.An integer representing the number of lines in the file.A single string containing the entire content of the file.A boolean indicating if the file has been read successfully.The <code>read()</code> method returns a single string containing the entire content of the file.Submit"},{"location":"topics/python/16_files.html#programming-tasks","title":"Programming Tasks","text":"<p>For each of the following tasks write a program using Python.</p> Word Counter<p>Write a Python program that reads a text file and counts the number of words in it. Display the word count as output.</p>Read more ...Binary Data Manipulation<p>Write a Python program that reads a binary file containing integers and finds the sum of all the integers in the file.</p>Read more ...File Copy<p>Write a Python program that copies the contents of one text file to another. The program should take two filenames as input and create a copy of the first file into the second file.</p>Read more ... <ol> <li> <p>[https://ehmatthes.github.io/pcc_3e/cheat_sheets/(https://ehmatthes.github.io/pcc_3e/cheat_sheets/)]\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/python/climate_quest/example.html","title":"Example outline","text":""},{"location":"topics/python/climate_quest/example.html#example-outline","title":"Example outline","text":"<p>Here's an example outline for the \"Climate Quest\" text adventure game, focusing on decision-making and its impact on the environment.  </p> <p>The format here is intentionally simple.  </p> <ul> <li>There are five locations to visit.  </li> <li>At each location a decision has to be taken to combat the effect of climate change.  </li> <li>Depending on the choice made the overall score is adjusted.  </li> <li>Having visited each location a final challenge is played.</li> </ul> <p>There are many places where the game can be enhanced and improved both in terms of the functionality of the program e.g. there is no check on whether a player visits the same location more than once, and on the game play itself.  You may make changes as you see fit to this example for your own solution.  </p> <p>You might like to have a look at Survive the Century for additional ideas!</p> <p>Here is the outline of the game with the sample prompts at each location:</p>"},{"location":"topics/python/climate_quest/example.html#introduction","title":"Introduction:","text":"<p>Welcome to Climate Quest! The Earth is in peril as climate change accelerates, leading to devastating environmental consequences. Rising temperatures, melting ice caps, and increasing natural disasters threaten life as we know it. Your mission is to travel across different locations, make crucial decisions, and combat the effects of climate change. The fate of the planet lies in your hands.</p>"},{"location":"topics/python/climate_quest/example.html#location-1-forest","title":"Location 1: Forest","text":"<p>Challenge: Deforestation</p> <p>As you enter a lush forest, you witness large-scale logging operations threatening to clear vast areas of trees. The forest is home to countless species and plays a crucial role in absorbing carbon dioxide.</p> <ul> <li>Choice 1: Confront the loggers and demand they stop.</li> <li>Choice 2: Start a tree-planting initiative with the local community.</li> <li>Choice 3: Ignore the situation and move on.</li> </ul> <p>Consequences:</p> <ul> <li>Choice 1: The loggers refuse to stop, but your protest raises awareness, leading to stricter logging regulations in the future.</li> <li>Choice 2: Your tree-planting initiative is a success, restoring parts of the forest and providing a habitat for wildlife. The forest's health improves.</li> <li>Choice 3: The deforestation continues, resulting in habitat loss and increased carbon emissions.</li> </ul> <p>Inventory:</p> <ul> <li>Collect a recycling bin if best choice is made</li> </ul>"},{"location":"topics/python/climate_quest/example.html#location-2-ocean","title":"Location 2: Ocean","text":"<p>Challenge: Coral Bleaching</p> <p>You arrive at a coral reef, once vibrant with life, now turning pale due to rising ocean temperatures and pollution. Marine life is dwindling, and the reef's ecosystem is on the brink of collapse.</p> <ul> <li>Choice 1: Launch a clean-up campaign to remove pollutants from the water.</li> <li>Choice 2: Advocate for stricter regulations on carbon emissions.</li> <li>Choice 3: Harvest the remaining coral for commercial purposes.</li> </ul> <p>Consequences:</p> <ul> <li>Choice 1: The clean-up helps restore water quality, allowing some corals to recover. Marine life slowly returns.</li> <li>Choice 2: Your advocacy leads to international agreements to reduce carbon emissions, contributing to a gradual cooling of ocean temperatures.</li> <li>Choice 3: The coral is harvested, leading to the complete destruction of the reef and loss of biodiversity.</li> </ul> <p>Inventory:</p> <ul> <li>Collect a reusable water bottle if best choice is made</li> </ul>"},{"location":"topics/python/climate_quest/example.html#location-3-city","title":"Location 3: City","text":"<p>Challenge: Urban Pollution</p> <p>In a bustling city, smog fills the air, and trash litters the streets. The city\u2019s energy consumption is skyrocketing, with fossil fuels being the primary source.</p> <ul> <li>Choice 1: Implement a city-wide recycling program.</li> <li>Choice 2: Promote the use of public transportation and electric vehicles.</li> <li>Choice 3: Do nothing and let the city continue on its current path.</li> </ul> <p>Consequences:</p> <ul> <li>Choice 1: The recycling program reduces waste and pollution, making the city cleaner and more sustainable.</li> <li>Choice 2: Encouraging public transportation and electric vehicles reduces the city's carbon footprint and improves air quality.</li> <li>Choice 3: Pollution worsens, leading to health problems for the city's residents and further environmental degradation.</li> </ul> <p>Inventory:</p> <ul> <li>Collect an electric vehicle if best choice is made</li> </ul>"},{"location":"topics/python/climate_quest/example.html#location-4-arctic","title":"Location 4: Arctic","text":"<p>Challenge: Melting Glaciers</p> <p>You travel to the Arctic, where glaciers are melting at an alarming rate, threatening to raise sea levels and displace millions of people.</p> <ul> <li>Choice 1: Invest in renewable energy projects to reduce global warming.</li> <li>Choice 2: Support indigenous communities in their efforts to protect the land.</li> <li>Choice 3: Ignore the melting glaciers and continue with business as usual.</li> </ul> <p>Consequences:</p> <ul> <li>Choice 1: Renewable energy projects help slow down global warming, reducing the rate of glacier melting.</li> <li>Choice 2: Supporting indigenous communities leads to sustainable land management, preserving some of the Arctic's critical ecosystems.</li> <li>Choice 3: The glaciers continue to melt, leading to severe sea level rise and the displacement of coastal communities.</li> </ul> <p>Inventory:</p> <ul> <li>Collect solar panels if best choice is made</li> </ul>"},{"location":"topics/python/climate_quest/example.html#location-5-desert","title":"Location 5: Desert","text":"<p>Challenge: Drought</p> <p>In a once fertile desert region, prolonged drought has dried up rivers and made farming nearly impossible. Local communities are struggling to survive.</p> <ul> <li>Choice 1: Implement water conservation techniques and build reservoirs.</li> <li>Choice 2: Introduce drought-resistant crops to the area.</li> <li>Choice 3: Abandon the region and relocate the population.</li> </ul> <p>Consequences:</p> <ul> <li>Choice 1: Water conservation efforts help sustain the community, allowing for some recovery of the local ecosystem.</li> <li>Choice 2: Drought-resistant crops thrive, providing food and income for the local population.</li> <li>Choice 3: The region is abandoned, and the desertification spreads, leading to further loss of arable land.</li> </ul> <p>Inventory:</p> <ul> <li>Collect a water purifier if best choice is made</li> </ul>"},{"location":"topics/python/climate_quest/example.html#final-challenge-global-environmental-crisis","title":"Final Challenge: Global Environmental Crisis","text":"<p>Scenario: As you complete your journey, you receive news of a global environmental crisis. Climate change has reached a tipping point, and a major crisis is unfolding: a massive hurricane is approaching a heavily populated coastal city.</p> <ul> <li>Choice 1: Coordinate a massive evacuation and disaster response effort.</li> <li>Choice 2: Focus on long-term solutions by pushing for global climate policies and renewable energy initiatives.</li> <li>Choice 3: Accept the situation as inevitable and do nothing.</li> </ul> <p>You may be able to use an item in the inventory to help with this disaster.</p> <p>Consequences:</p> <ul> <li>Choice 1: The evacuation saves thousands of lives, but without addressing the root causes, similar disasters continue to occur.</li> <li>Choice 2: Your push for global climate policies leads to a united effort to combat climate change, significantly reducing future risks.</li> <li>Choice 3: The hurricane devastates the city, and without any action, similar crises become more frequent and severe.</li> </ul>"},{"location":"topics/python/climate_quest/example.html#endings","title":"Endings:","text":"<ol> <li>Best Ending: Through wise and environmentally conscious decisions, you have significantly mitigated the effects of climate change. The planet is on a path to recovery, with healthier ecosystems and a united global effort to protect the environment.</li> <li>Moderate Ending: Some of your actions have had positive effects, but others have worsened the situation. The environment is in a precarious state, with some areas improving while others deteriorate.</li> <li>Worst Ending: Your decisions have accelerated environmental degradation. The planet is in crisis, with widespread disasters, loss of biodiversity, and little hope for recovery.</li> </ol> <p>Conclusion:</p> <p>Climate Quest highlights the importance of individual actions in addressing climate change. Your journey through forests, oceans, cities, and more has shown that every choice matters. The future of our planet depends on the decisions we make today.</p>"},{"location":"topics/python/climate_quest/example.html#example-game","title":"Example Game","text":"<p>Follow the link to play an example game.  Note, this is just an example and other approaches can be used.  The interface you will develop will, of course, be different as you will be using a text-based console interface but the game play will be more or less the same.</p> <p>Play the example game</p>"},{"location":"topics/python/climate_quest/introduction.html","title":"Climate Quest","text":""},{"location":"topics/python/climate_quest/introduction.html#climate-quest","title":"Climate Quest","text":"<p>Can you write the program that will help our scientists and engineers tackle the growing threat of climate change?</p> <p>During the Programming with Python topic we'll gradually build a project that includes the concepts covered in the course building week-by-week into a fully functioning application.  Each week a new stage will be added building on the previous.</p> <p>The outline scenario is:</p>"},{"location":"topics/python/climate_quest/introduction.html#title-climate-quest","title":"Title: Climate Quest","text":"<p>The player embarks on a journey to combat the effects of climate change by making decisions that impact the environment. Each choice affects the outcome of the game, emphasizing the importance of individual actions in addressing climate change.</p>"},{"location":"topics/python/climate_quest/introduction.html#game-outline","title":"Game Outline:","text":"<ol> <li> <p>Introduction:</p> <ul> <li>The game starts with an introduction explaining the current state of the environment (e.g., rising temperatures, melting ice caps, natural disasters).</li> <li>The player's mission is to make choices that help mitigate these effects and protect the planet.</li> </ul> </li> <li> <p>Locations:</p> <ul> <li>The game can be divided into different locations representing various environmental settings:<ul> <li>Forest</li> <li>Ocean</li> <li>City</li> <li>Arctic</li> <li>Desert</li> </ul> </li> </ul> </li> <li> <p>Challenges:</p> <ul> <li>At each location, the player faces challenges related to climate change, such as:<ul> <li>Deforestation</li> <li>Pollution</li> <li>Coral bleaching</li> <li>Melting glaciers</li> <li>Drought</li> </ul> </li> </ul> </li> <li> <p>Decisions and Consequences:</p> <ul> <li>The player must make decisions at each stage that impact the environment and the overall progress of the game.</li> <li>Positive decisions (e.g., recycling, planting trees) lead to a healthier environment and better outcomes.</li> <li>Negative decisions (e.g., littering, using fossil fuels) worsen environmental conditions and make the game more challenging.</li> </ul> </li> <li> <p>Resources:</p> <ul> <li>The player can collect resources like:<ul> <li>Solar panels</li> <li>Recycling bins</li> <li>Reusable water bottles</li> <li>Electric vehicles</li> </ul> </li> </ul> </li> <li> <p>Final Challenge:</p> <ul> <li>The game culminates in a final challenge where the player must address a major environmental crisis and make critical decisions to save the planet.</li> </ul> </li> <li> <p>Endings:</p> <ul> <li>The game can have multiple endings based on the player's choices throughout the journey, showcasing the impact of individual actions on the environment.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_1.html","title":"Climate Quest - Task 1","text":""},{"location":"topics/python/climate_quest/task_1.html#climate-quest-task-1","title":"Climate Quest - Task 1","text":""},{"location":"topics/python/climate_quest/task_1.html#objective","title":"Objective","text":"<p>The objective of this task is to introduce you to the basic concepts of programming in Python, including variables, output to the screen using <code>print()</code>, and input from the keyboard using <code>input()</code>. You will create the initial part of the \"Climate Quest\" game, where the game starts with an introduction and displays a simple menu.</p> <p>Learning Outcomes</p> <p>By the end of this task, you should be able to:</p> <ol> <li>Declare and use variables.</li> <li>Use the <code>print()</code> function to output text to the screen.</li> <li>Use the <code>input()</code> function to get user input from the keyboard.</li> </ol>"},{"location":"topics/python/climate_quest/task_1.html#task-description","title":"Task Description","text":"<p>You will write a Python program that:</p> <ol> <li>Welcomes the player to the \"Climate Quest\" game.</li> <li>Asks the player for their name.</li> <li>Stores the player's input in a variable.</li> <li>Displays a welcome message including the name of the player.</li> </ol>"},{"location":"topics/python/climate_quest/task_1.html#steps-to-complete-the-task","title":"Steps to Complete the Task","text":"<ol> <li> <p>Welcome Message:  </p> <ul> <li>Use the <code>print()</code> function to display the title of the game</li> <li>Use the <code>print()</code> function to display a welcome message for the game.</li> </ul> </li> <li> <p>Get User Input:</p> <ul> <li>Use the <code>input()</code> function to ask the player for their name.</li> <li>Store the player's input in a variable.</li> </ul> </li> <li> <p>Display Welcome Message with City Name:</p> <ul> <li>Use the <code>print()</code> function to display a welcome message that includes the name of the player entered by the player.</li> </ul> </li> </ol> Only open this section if really stuck <pre><code># Step 1: Welcome Message\nprint(\"Welcome to Climate Quest!\")\n\n# Step 2: Get User Input\nplayer_name = input(\"What is your name? \")\n\n# Step 3: Display Welcome Message with City Name\nprint(f\"Hello, {player_name}! Your mission is to protect the planet.\")\n</code></pre>"},{"location":"topics/python/climate_quest/task_1.html#exercise","title":"Exercise","text":"<ol> <li> <p>Start a New Python File:</p> <ul> <li>Open your Python editor or an online Python compiler.</li> <li>Create a new file and save it as <code>climate_quest.py</code>.</li> </ul> </li> <li> <p>Write the Code:</p> <ul> <li>Write the code to meet the specification</li> <li>Make sure to test your code after each step to ensure it works correctly.</li> </ul> </li> <li> <p>Enhance the Welcome Message:</p> <ul> <li> <p>Modify the welcome message to include more details about the game. For example:</p> <pre><code>print(\"Welcome to Climate Quest!\")\nprint(\"The environment is facing serious challenges due to climate change.\")\nprint(\"Your mission is to make decisions that help mitigate these effects and protect the planet.\")\n</code></pre> </li> </ul> </li> <li> <p>Test Your Program:</p> <ul> <li>Run your program to ensure that it correctly asks for the name of the player and displays the welcome message with the player's name.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_1.html#questions-for-reflection","title":"Questions for Reflection","text":"<ol> <li>What is the purpose of using variables in a program?</li> <li>How does the <code>input()</code> function work in Python?</li> <li>Why is it important to test your code after writing each part?</li> </ol>"},{"location":"topics/python/climate_quest/task_1.html#extension-activity-optional","title":"Extension Activity (Optional)","text":"<ul> <li>Experiment with different welcome messages and inputs.</li> <li>Try using different variable names and see how it affects your program.</li> </ul>"},{"location":"topics/python/climate_quest/task_10.html","title":"Climate Quest - Task 11","text":""},{"location":"topics/python/climate_quest/task_10.html#climate-quest-task-11","title":"Climate Quest - Task 11","text":"<p>Objectives</p> <p>Your task is to refactor a simple text-based game to improve its data handling by replacing a 2D list with a dictionary. The game, \"Climate Quest,\" presents the player with various environmental challenges at different locations. Each location offers a scenario with multiple choices, and the player's decisions impact the outcome.</p> <ul> <li>Understand the benefits of using dictionaries over 2D lists for organizing related data.</li> <li>Practice accessing and manipulating nested data structures in Python.</li> <li>Enhance code readability, maintainability, and scalability.</li> </ul>"},{"location":"topics/python/climate_quest/task_10.html#instructions","title":"Instructions:","text":"<p>The changes to be made to the program are mainly refactoring.  This means taking some of the original code and making amendments to improve structure, readability and maintainability.  It's a common feature of programming.  Often the first version of code that you write can be improved.  You can choose to refactor the code written for the 2D List challenge or start with a new file.</p>"},{"location":"topics/python/climate_quest/task_10.html#step-1-review-the-existing-code","title":"Step 1: Review the Existing Code","text":"<p>The existing code uses a 2D list to store location data (name, scenario, and options). This can be unwieldy, especially as the game grows. Here's an example of how the data is currently structured:</p> <pre><code>game_map = [\n    [\"Forest\", \"You encounter loggers in a forest. What will you do?\", [\"Confront the loggers\", \"Start a tree-planting initiative\", \"Ignore the situation\"]],\n    [\"Ocean\", \"You see plastic waste polluting the ocean. What will you do?\", [\"Organize a beach cleanup\", \"Campaign against plastic use\", \"Do nothing\"]],\n    [\"City\", \"The city is facing severe air pollution. What will you do?\", [\"Advocate for clean energy\", \"Promote public transportation\", \"Ignore the pollution\"]],\n    [\"Arctic\", \"The Arctic ice is melting rapidly. What will you do?\", [\"Support renewable energy\", \"Research ice preservation methods\", \"Do nothing\"]],\n    [\"Desert\", \"Desertification is threatening the region. What will you do?\", [\"Plant drought-resistant crops\", \"Build water reservoirs\", \"Do nothing\"]]\n]\n</code></pre> <ol> <li>Refactor the <code>game_map</code>: </li> <li>Instead of using a 2D list, reorganize the game map into a dictionary where each key is a location name (e.g., <code>\"Forest\"</code>, <code>\"Ocean\"</code>).</li> <li> <p>The value for each key should be another dictionary that contains:</p> <ul> <li>An <code>\"opening_statement\"</code> key with a string value for the scenario.</li> <li>An <code>\"options\"</code> key with a list of possible choices.</li> </ul> </li> <li> <p>Modify the <code>display_challenge</code> Function:</p> </li> <li>Update the function to retrieve the scenario and options from your newly created dictionary.</li> <li> <p>The function should dynamically display the scenario and options based on the selected location.</p> </li> <li> <p>Update the <code>main</code> Function:</p> </li> <li>Replace references to the old 2D list with the appropriate dictionary keys.</li> <li>Ensure that the menu selection correctly maps to the dictionary.</li> </ol>"},{"location":"topics/python/climate_quest/task_10.html#hints-and-tips","title":"Hints and Tips","text":"<ul> <li> <p>Why Use a Dictionary?</p> <ul> <li>Readability: Dictionaries allow you to use meaningful keys, making the data more intuitive to access and modify.</li> <li>Scalability: Adding new locations or modifying existing ones becomes easier and less error-prone with a dictionary structure.</li> <li>Maintainability: With a dictionary, you avoid the confusion of managing nested lists and indices, making your code easier to maintain.</li> </ul> </li> <li> <p>Dictionary Structure Example:   Here's a simplified example of how you might structure the data for one location in a dictionary:</p> </li> </ul> <pre><code>forest_data = {\n    \"opening_statement\": \"You encounter loggers in a forest. What will you do?\",\n    \"options\": [\"Confront the loggers\", \"Start a tree-planting initiative\", \"Ignore the situation\"]\n}\n</code></pre> <p>You can expand this concept to the entire game map, using the location names as keys in your main dictionary.</p> <ul> <li> <p>Accessing Dictionary Data:</p> <ul> <li>Use the location name to access the scenario and options. For example:</li> </ul> <pre><code>print(game_map[\"Forest\"][\"opening_statement\"])\nprint(game_map[\"Forest\"][\"options\"])\n</code></pre> <ul> <li>To iterate through options, you can use a loop:</li> </ul> <pre><code>for i, option in enumerate(game_map[\"Forest\"][\"options\"], 1):\n    print(f\"{i}. {option}\")\n</code></pre> </li> <li> <p>Think About Edge Cases:</p> <ul> <li>Consider what happens if a player inputs an invalid choice. How will your code handle it? Make sure your refactoring doesn't introduce new bugs.</li> </ul> </li> <li> <p>Test Your Code:</p> <ul> <li>After refactoring, thoroughly test your code. Ensure that each location displays the correct scenario and options, and that the game logic works as expected.</li> </ul> </li> </ul>"},{"location":"topics/python/climate_quest/task_10.html#extra-credit","title":"Extra Credit:","text":"<p>If you're up for a challenge, add a new location to the game. Use your dictionary structure to seamlessly integrate it into the existing code. Describe why it was easier to do this with a dictionary compared to the original</p>"},{"location":"topics/python/climate_quest/task_11.html","title":"Climate Quest - Task 11","text":""},{"location":"topics/python/climate_quest/task_11.html#climate-quest-task-11","title":"Climate Quest - Task 11","text":"<p>In this final task we'll add file handling to the Climate Quest Adventure Game.</p> <p>Objectives</p> <ul> <li>Understand the basics of file handling in Python.</li> <li>Learn how to open, read, write, and close files.</li> <li>Apply file handling to save game progress, load game settings, or store player statistics.</li> <li>Implement exception handling when working with files to manage potential errors (e.g., file not found).</li> </ul> <p>In this challenge, you will take the refactored game from the previous task and further enhance it by storing the game data in a JSON file. This will teach you how to separate your code from the data it operates on, making your program more flexible and easier to maintain.</p>"},{"location":"topics/python/climate_quest/task_11.html#background","title":"Background:","text":"<p>So far, you've stored the game's locations, opening statements, and options directly in a Python dictionary. While this works, hard-coding data within your code can make it difficult to update or expand the game. Instead, by storing this data in a JSON file, you can easily modify the game's content without touching the code itself.</p>"},{"location":"topics/python/climate_quest/task_11.html#what-is-json","title":"What is JSON?","text":"<ul> <li>JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy for humans to read and write, and easy for machines to parse and generate.</li> <li>Advantages:</li> <li>Separation of Concerns: Keeps your game data separate from the logic, making the code cleaner.</li> <li>Flexibility: You can update or add new game data without modifying the code.</li> <li>Portability: JSON is widely used, so your data can be easily shared or reused in other programs.</li> </ul>"},{"location":"topics/python/climate_quest/task_11.html#your-task","title":"Your Task","text":"<ol> <li> <p>Create a JSON File</p> <ul> <li>Move the game data (locations, opening statements, options) from your Python dictionary to a JSON file.</li> <li>Example Structure: <pre><code>{\n    \"Forest\": {\n        \"opening_statement\": \"You encounter loggers in a forest. What will you do?\",\n        \"options\": [\"Confront the loggers\", \"Start a tree-planting initiative\", \"Ignore the situation\"]\n    },\n    \"Ocean\": {\n        \"opening_statement\": \"You see plastic waste polluting the ocean. What will you do?\",\n        \"options\": [\"Organize a beach cleanup\", \"Campaign against plastic use\", \"Do nothing\"]\n    }\n    // Add more locations...\n}\n</code></pre></li> <li> <p>Tip</p> <ul> <li>Save this JSON data in a file named <code>game_data.json</code>.</li> </ul> </li> </ul> </li> <li> <p>Read the JSON File in Python</p> <ul> <li>Use Python\u2019s built-in <code>json</code> module to read the data from your JSON file and load it into a dictionary.</li> <li>Sample Code: <pre><code>import json\n\nwith open('game_data.json', 'r') as file:\n    game_map = json.load(file)\n</code></pre></li> <li> <p>Tip</p> <ul> <li>Place this code at the start of your game logic to load the data before the game begins.</li> </ul> </li> </ul> </li> <li> <p>Modify Your Existing Functions</p> <ul> <li> <p>Ensure that your game functions (e.g., <code>display_challenge</code>) work with the data loaded from the JSON file.</p> </li> <li> <p>Tip</p> <ul> <li>If your previous code was correctly using a dictionary, minimal changes should be required.</li> </ul> </li> </ul> </li> <li> <p>Test Your Game</p> <ul> <li>Run your game to ensure it works with the data loaded from the JSON file.</li> <li>Try adding new locations or updating existing ones in the JSON file to see how the game reacts.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_11.html#hints-tips","title":"Hints &amp; Tips","text":"<ul> <li> <p>Validating JSON: </p> <ul> <li>Make sure your JSON file is properly formatted. Use an online JSON validator to check for errors.</li> </ul> </li> <li> <p>Working with JSON in Python:</p> <ul> <li>Use <code>json.load()</code> to read from a file and <code>json.dump()</code> if you ever need to write back to a JSON file.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Consider what should happen if the JSON file is missing or corrupted. You might want to add error handling to manage these cases gracefully.</li> </ul> </li> </ul>"},{"location":"topics/python/climate_quest/task_11.html#expected-outcome","title":"Expected Outcome","text":"<ul> <li>By the end of this challenge, your game should load its data from a JSON file. This will allow you or anyone else to modify the game\u2019s content without changing the Python code.</li> </ul>"},{"location":"topics/python/climate_quest/task_11.html#benefits-of-using-json-for-game-data","title":"Benefits of Using JSON for Game Data","text":"<ul> <li>Maintainability: Game data is separated from the logic, making it easier to update or expand.</li> <li>Reusability: The JSON file can be reused in other programs or shared easily.</li> <li>Ease of Updates: Non-programmers can edit the game content directly in the JSON file without needing to understand the Python code.</li> </ul>"},{"location":"topics/python/climate_quest/task_11.html#challenge-yourself","title":"Challenge Yourself","text":"<ul> <li>Dynamic Loading: Try dynamically loading different JSON files based on user input, allowing for different game scenarios or levels.</li> <li>Save Progress: Use JSON to save and load the player\u2019s progress, making the game more interactive.</li> </ul>"},{"location":"topics/python/climate_quest/task_2.html","title":"Climate Quest - Task 2","text":""},{"location":"topics/python/climate_quest/task_2.html#climate-quest-task-2","title":"Climate Quest - Task 2","text":""},{"location":"topics/python/climate_quest/task_2.html#objective","title":"Objective\"","text":"<p>The objective of this task is to introduce you to various types of operators in Python, including assignment, mathematical, logical, and comparison operators. You will extend the \"Climate Quest\" game to incorporate these concepts.</p> <p>Learning Outcomes</p> <p>By the end of this task, you should be able to:</p> <ol> <li>Understand the use and application of the assignment operator.</li> <li>Use mathematical operators for simple calculations.</li> <li>Utilize augmented assignment operators.</li> <li>Construct expressions while applying operator precedence.</li> <li>Use logical operators in Python.</li> <li>Understand and use comparison operators.</li> <li>Build expressions combining logical and comparison operators.</li> <li>Apply parentheses to modify the evaluation order of logical expressions.</li> </ol>"},{"location":"topics/python/climate_quest/task_2.html#task-description","title":"Task Description:","text":"<p>You will enhance the \"Climate Quest\" game by adding functionality to calculate and display initial environmental health, perform some basic calculations, and make simple decisions using logical and comparison operators.</p>"},{"location":"topics/python/climate_quest/task_2.html#steps-to-complete-the-task","title":"Steps to Complete the Task:","text":"<ol> <li> <p>Environmental Health Initialization:</p> <ul> <li>Use an assignment operator to set an initial environmental health value.</li> <li>Use a mathematical operator to perform a calculation and update the environmental health.</li> </ul> </li> <li> <p>Augmented Assignment Operators:</p> <ul> <li>Use augmented assignment operators to update the environmental health based on user input.</li> </ul> </li> <li> <p>Logical and Comparison Operators:</p> <ul> <li>Use logical and comparison operators to make a decision in the game.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_2.html#skeleton-code","title":"Skeleton code","text":"<ol> <li> <p>Start a New Python File:</p> <ul> <li>Open your Python editor or an online Python compiler.</li> <li>Create a new file and save it as <code>climate_quest_task2.py</code>.</li> </ul> </li> </ol> <p>Copy the code below into that file and answer all questions in the code to make a working Python program.  There are 4 questions.  Do not make any other changes to the given code.</p> <pre><code># Welcome Message\nprint(\"Welcome to Climate Quest!\")\nprint(\"The environment is facing serious challenges due to climate change.\")\nprint(\"Your mission:\nprint(\"Make decisions that help mitigate these effects and protect the planet.\")\n\n# Get User Input\nplayer_name = input(\"What is your name? \")\nprint(f\"Hello, {player_name}! Your mission is to protect the planet.\")\n\n# Environmental Health Initialization\n# ----------------------------------------------------------------\n# Question 1: assign a variable named \"environment_health\" to an \n# initial value of 100\n                                        # complete this line\n# ----------------------------------------------------------------\nprint(f\"Initial environmental health: {environment_health}\")\n\n# ----------------------------------------------------------------\n# Question 2: The environmental health inspectors have conducted an \n# initial investigation and have reduced the environment_health \n# score by 10%.\n# Make the change to the environment_health score here:\nenvironment_health =                    # complete this line\n# ----------------------------------------------------------------\nprint(f\"Environmental health after initial assessment: {environment_health}\")\n\n# ----------------------------------------------------------------\n# Question 3: Following an internal discussion it was decided to \n# increase the environment_health score by 5 points. Use an \n# augmented assignment operator to update environmental health\n\nenvironment_health                      # Complete this line\n# ----------------------------------------------------------------\nprint(f\"Environmental health after small improvement: {environment_health}\")\n\n# Logical and Comparison Operators\nprint(\"\\nAssessing environmental conditions...\")\ntree_planting = int(input(\"Enter the number of trees you plan to plant: \"))\npollution_level = int(input(\"Enter the current pollution level (0-100): \"))\n\n# Decision making using logical and comparison operators\n# ----------------------------------------------------------------\n# Question 4: Complete the expression below to check if \n# tree_planting is greater than 50 and pollution_level is less than 50\nif (          ) and (          ):       # Complete this line\n    environment_health += 10\n    print(\"Great job! Your efforts are making a positive impact on the environment.\")\nelse:\n    environment_health -= 10\n    print(\"Unfortunately, more effort is needed to improve environmental conditions.\")\n\nprint(f\"Final environmental health: {environment_health}\")\n</code></pre>"},{"location":"topics/python/climate_quest/task_2.html#questions-for-reflection","title":"Questions for Reflection:","text":"<ol> <li>What is the purpose of using assignment and augmented assignment operators?</li> <li>How do logical and comparison operators help in decision-making within a program?</li> <li>Why is it important to understand operator precedence?</li> </ol>"},{"location":"topics/python/climate_quest/task_2.html#extension-activity-optional","title":"Extension Activity (Optional):","text":"<ul> <li>Add more decision points in the game using logical and comparison operators.</li> <li>Try creating more complex expressions and see how parentheses change the evaluation order.</li> </ul>"},{"location":"topics/python/climate_quest/task_3.html","title":"Climate Quest - Task 3","text":""},{"location":"topics/python/climate_quest/task_3.html#climate-quest-task-3","title":"Climate Quest - Task 3","text":"<p>The objective of this task is to introduce you to strings in Python. You will learn how to create, manipulate, and format strings, as well as use common string methods. You will extend the \"Climate Quest\" game to incorporate these string concepts.</p> <p>Learning Outcomes</p> <p>By the end of this task, you should be able to:</p> <ol> <li>Understand the nature and importance of strings as a fundamental data type in Python.</li> <li>Create, manipulate, and format strings using various techniques.</li> <li>Use common string methods and their applications.</li> <li>Index, slice, and find the length of strings.</li> <li>Understand the concept of string immutability.</li> <li>Gain practical experience through programming tasks related to strings.</li> </ol>"},{"location":"topics/python/climate_quest/task_3.html#task-description","title":"Task Description:","text":"<p>You will enhance the \"Climate Quest\" game by adding functionality that involves string manipulation and formatting. You will also learn about string methods and slicing to improve the game's interaction with the player.</p>"},{"location":"topics/python/climate_quest/task_3.html#steps-to-complete-the-task","title":"Steps to Complete the Task:","text":"<ol> <li> <p>String Creation and Concatenation:</p> <ul> <li>Create strings and concatenate them to form messages.</li> </ul> </li> <li> <p>String Methods:</p> <ul> <li>Use common string methods to manipulate and format strings.</li> </ul> </li> <li> <p>Indexing and Slicing:</p> <ul> <li>Use indexing and slicing to extract specific parts of strings.</li> </ul> </li> <li> <p>String Formatting:  </p> <ul> <li>Format strings to display dynamic information.</li> </ul> </li> <li> <p>String Immutability:</p> <ul> <li>Understand and demonstrate the immutability of strings in Python.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_3.html#skeleton-code","title":"Skeleton Code:","text":"<p>Below is a skeleton of the code with questions embedded. Follow the steps to complete your own version.</p> <pre><code># Welcome Message\nprint(\"Welcome to Climate Quest!\")\nprint(\"The environment is facing serious challenges due to climate change.\")\nprint(\"Your mission is to make decisions that help mitigate these effects and protect the planet.\")\n\n# Get User Input\n# ----------------------------------------------------------------\n# Q1: Write code to ask the user for their name\n                                    # complete this line\n\n# Q2: Write code to greet the user with the message:\n# \"Hello, Emma!  Your mission is to protect the planet\"\n# (Replacing the name entered for question 1 and not \"Emma\"!)                                    \nprint(f\"Hello, {player_name}! Your mission is to protect the planet.\")\n# ----------------------------------------------------------------\n\n# Environmental Health Initialization\nenvironment_health = 100\nprint(f\"Initial environmental health: {environment_health}\")\n\n# String Creation and Concatenation\n# ----------------------------------------------------------------\n# Q3: Create a message that includes the player name using concatenation\nwelcome_message =                    # Complete this line\nprint(welcome_message)\n\n\n# String Methods\n# ----------------------------------------------------------------\n# Convert the player's name to uppercase and display it\n# Q4: Convert the player's name to uppercase and display it. \n# What method will you use to convert a string to uppercase?\nuppercase_name =                    # Complete this line\nprint(f\"The name of the player in uppercase: {uppercase_name}\")\n\n# Replace a word in the welcome_message\n# ----------------------------------------------------------------\n# Q5: Using a string method, replace \"Welcome\" with \n# \"Greetings\" in the welcome_message\nwelcome_message =                   # Complete this line\nprint(welcome_message)\n\n# Indexing and Slicing\n# ----------------------------------------------------------------\n# Q6: Display the first and last character of the player's name\nfirst_char =                        # Complete this line\nlast_char =                         # Complete this line\nprint(f\"The first character of your name: {first_char}\")\nprint(f\"The last character of your name: {last_char}\")\n\n# Display the first three characters of the city name\n# ----------------------------------------------------------------\n# Q7: Use slicing to get the first three characters of player's name\nfirst_three_chars =                 # Complete this line\nprint(f\"The first three characters of your name: {first_three_chars}\")\n\n# String Formatting\n# ----------------------------------------------------------------\n# Create a formatted string that includes the player's name and environmental health\n# Q8: Use an f-string to include the player's name and environmental health in a message\nformatted_message =                 # Complete this line\nprint(formatted_message)\n\n# String Immutability\n# Demonstrate that strings are immutable\n# Try to change the first character of the player's name (this should result in an error)\n# Uncomment the next line to see the error\n# player_name[0] = 'X'  # This line should raise a TypeError\n\n# Explain why the above operation is not allowed in Python\n# Q9: Why can't we change a single character in a string directly?\n\n# Final Environmental Health Message\nfinal_message = \"Thank you for playing Climate Quest!\"\nprint(final_message)\n</code></pre>"},{"location":"topics/python/climate_quest/task_3.html#exercises","title":"Exercises","text":"<ol> <li> <p>Start a New Python File:</p> <ul> <li>Open your Python editor or an online Python compiler.</li> <li>Create a new file and save it as <code>climate_quest_task3.py</code>.</li> </ul> </li> <li> <p>Write the Code:</p> <ul> <li>Follow the skeleton code provided above to write your own code.</li> <li>Answer the embedded questions and complete the lines of code where indicated.</li> <li>Make sure to test your code after each step to ensure it works correctly.</li> </ul> </li> <li> <p>Experiment with String Methods:</p> <ul> <li>Try different string methods such as <code>.lower()</code>, <code>.title()</code>, and <code>.find()</code>.</li> <li>Explore how these methods can be used to manipulate strings in the game.</li> </ul> </li> <li> <p>Understand String Immutability:</p> <ul> <li>Try to modify a string directly and observe the resulting error.</li> <li>Understand why strings are immutable in Python.</li> </ul> </li> <li> <p>Test Your Program:</p> <ul> <li>Run your program to ensure that it correctly performs string manipulations and displays the desired output.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_3.html#questions-for-reflection","title":"Questions for Reflection:","text":"<ol> <li>What are some common string methods you used in this task?</li> <li>How does string indexing and slicing work in Python?</li> <li>Why are strings immutable, and what are the implications of this immutability?</li> </ol>"},{"location":"topics/python/climate_quest/task_3.html#extension-activity-optional","title":"Extension Activity (Optional):","text":"<ul> <li>Add more interactive elements to the game using string manipulations.</li> <li>Try creating multi-line strings and formatting them in different ways.</li> </ul>"},{"location":"topics/python/climate_quest/task_4.html","title":"Climate Quest - Task 4","text":""},{"location":"topics/python/climate_quest/task_4.html#climate-quest-task-4","title":"Climate Quest - Task 4","text":""},{"location":"topics/python/climate_quest/task_4.html#objective","title":"Objective:","text":"<p>The objective of this task is to practice creating and using functions to handle different parts of a program. You will extend the \"Climate Quest\" game by adding new functions to manage different locations and challenges. This will help you understand how to modularize code and manage complexity.</p> <p>Learning Outcomes:</p> <p>By the end of this task, you should be able to:</p> <ol> <li>Create and use functions to handle different tasks.</li> <li>Understand how to modularize code to manage complexity.</li> <li>Integrate new functions into an existing program structure.</li> <li>Practice defining and calling functions with arguments and return values.</li> </ol>"},{"location":"topics/python/climate_quest/task_4.html#task-description","title":"Task Description:","text":"<p>You will use a given structure chart to visualise the main processes in the game and then create functions for the \"Climate Quest\" game to handle the various locations and challenges. You will also update the game to use these new functions, helping to manage the complexity of the program and improve its structure.</p>"},{"location":"topics/python/climate_quest/task_4.html#structure-charts","title":"Structure Charts","text":"<p>A structure chart is a type of diagram that shows the organization and relationships between different parts of a program, such as functions and procedures.</p> <ul> <li>Structure charts typically use a hierarchical structure to show the different levels of modules in a program, with the main module at the top and subsequent levels branching out to show lower-level modules.</li> <li>The connections between modules are shown using lines that indicate how data flows between them. This helps programmers understand the dependencies and interactions between different parts of the program.</li> <li>Structure charts are often used in top-down design approaches, where the overall program is first represented at a high level, and then broken down into smaller modules that handle specific tasks.</li> <li>Structure charts serve as a form of documentation for the program, helping programmers, designers, and other stakeholders understand the overall architecture and design of the software.</li> </ul>"},{"location":"topics/python/climate_quest/task_4.html#climate-quest-structure-chart","title":"Climate Quest structure chart","text":"<p>Refer to the specification of the Climate Quest game.  At the top most level we see three main processes:</p> <ul> <li>Introduction/Initialisation: Explaining the purpose of the game to the user and gathering some information such as the player's name etc..</li> <li>The Game loop: The user can select from a number of locations, work through various challenges with the <code>environment_health</code> score being updated each time.</li> <li>End of the game: The game ends and a final score is displayed.</li> </ul> <p>These stages can be represented as a structure chart:</p> <pre><code>graph TD\n    A[CLIMATE QUEST] --&gt; B[Initialize Game]\n    A --&gt; J[Game Loop]\n    A --&gt; D[End Game]</code></pre> <p>The structure chart will need to be developed further as we start to break down each of these processes into smaller tasks (functions)</p>"},{"location":"topics/python/climate_quest/task_4.html#initialize-game","title":"Initialize Game","text":"<p>In the previous task our program started by printing a welcome message to the player:</p> <pre><code>print(\"Welcome to Climate Quest!\")\nprint(\"The environment is facing serious challenges due to climate change.\")\nprint(\"Your mission is to make decisions that help mitigate these effects and protect the planet.\")\n</code></pre> <p>We can wrap this into a function, and call it from the top level process <code>initialise_game()</code>:</p> <pre><code>def print_welcome():\n    \"\"\"\n    Display the welcome message to the user.\n    \"\"\"\n    print(\"Welcome to Climate Quest!\")\n    print(\"The environment is facing serious challenges due to climate change.\")\n    print(\"Your mission is to make decisions that help mitigate these effects and protect the planet.\")\n\ndef initialise_game():\n    print_welcome()\n</code></pre> <pre><code>graph TD\n    A[CLIMATE QUEST] --&gt; B[Initialize Game]\n    A --&gt; J[Game Loop]\n    A --&gt; D[End Game]\n\n    B --&gt; C[Display welcome]</code></pre> <p>We also set the starting value for the <code>environment_health</code> score.  This value will be updated a lot during the course of the program.  To save on duplication we should write a function to set this variable and another to update it (this will be used later).  This can also be called from <code>initialise_game()</code>:</p> <pre><code>def initialize_health(initial_value):\n    \"\"\"\n    Initialize the environmental health with a given value.\n    \"\"\"\n    return initial_value\n\ndef update_health(current_health, change_amount):\n    \"\"\"\n    Update the environmental health by adding or subtracting a value.\n    \"\"\"\n    return current_health + change_amount\n\ndef print_welcome():\n    # omitted\n\ndef initialise_game():\n    print_welcome()\n    environment_health = initialise_health(100)\n</code></pre> <pre><code>graph TD\n    A[CLIMATE QUEST] --&gt; B[Initialize Game]\n    A --&gt; J[Game Loop]\n    A --&gt; Z[End Game]\n\n    B --&gt; C[Display welcome]\n    B --&gt; D[Update health]</code></pre>"},{"location":"topics/python/climate_quest/task_4.html#new-functions-to-implement","title":"New Functions to Implement:","text":"<p>There are many new functions we can now add into our program, as part of the game loop.  We will come onto how these might fit together later and also explore the implementation of these functions.  </p> <p>One approach at this stage is to:</p> <ul> <li>identify the functions needed:  this might change later, it's a \"first stab\"</li> <li>write the header for the functions and a stub comment to just print something useful to the screen for now and returns <code>None</code> (this will be changed later when we have worked out how to implement the function)</li> <li>Include a comment in each function to describe the purpose of the function </li> </ul> <p>For example: our player will need to move from location to location.  We will need a function to choose that location i.e. <code>choose_location()</code>:</p> <pre><code>def choose_location():\n    \"\"\"\n    Allow the player to choose a location for their environmental challenge.\n    \"\"\"\n    print(\"Choose location\")\n    return None\n\ndef game_loop():\n    \"\"\"\n    The main game loop\n    \"\"\"\n    choose_location()\n</code></pre> <pre><code>graph TD\n    A[CLIMATE QUEST] --&gt; B[Initialize Game]\n    A --&gt; J[Game Loop]\n    A --&gt; Z[End Game]\n\n    B --&gt; C[Display welcome]\n    B --&gt; D[Update health]\n\n    J --&gt; K[Choose location]</code></pre>"},{"location":"topics/python/climate_quest/task_4.html#exercises","title":"Exercises","text":"<p>Using this approach:</p> <ul> <li>add the following functions to your code file</li> <li>add the new functions to the structure chart</li> <li> <p>call the functions from the <code>game_loop()</code> function</p> </li> <li> <p><code>choose_location()</code>:</p> <ul> <li>Allows the player to choose a location for their environmental challenge.</li> <li>Returns: str - The chosen location.</li> </ul> </li> <li> <p><code>ocean_challenge(environment_health)</code>:</p> <ul> <li>Handles the environmental challenge for the ocean location.</li> <li>Parameters: <code>environment_health</code> (int) - The current environmental health value.</li> <li>Returns: int - The updated environmental health value.</li> </ul> </li> <li> <p><code>forest_challenge(environment_health)</code>:</p> <ul> <li>Handles the environmental challenge for the forest location.</li> <li>Parameters: <code>environment_health</code> (int) - The current environmental health value.</li> <li>Returns: int - The updated environmental health value.</li> </ul> </li> <li> <p><code>city_challenge(environment_health)</code>:</p> <ul> <li>Handles the environmental challenge for the city location.</li> <li>Parameters: <code>environment_health</code> (int) - The current environmental health value.</li> <li>Returns: int - The updated environmental health value.</li> </ul> </li> <li> <p><code>arctic_challenge(environment_health)</code>:</p> <ul> <li>Handles the environmental challenge for the arctic location.</li> <li>Parameters: <code>environment_health</code> (int) - The current environmental health value.</li> <li>Returns: int - The updated environmental health value.</li> </ul> </li> <li> <p><code>desert_challenge(environment_health)</code>:</p> <ul> <li>Handles the environmental challenge for the desert location.</li> <li>Parameters: <code>environment_health</code> (int) - The current environmental health value.</li> <li>Returns: int - The updated environmental health value.</li> </ul> </li> </ul> <p>Test Your Functions:</p> <ul> <li>Test each function separately to ensure it works as expected.</li> <li>Verify that the functions interact correctly when integrated into the main program.</li> </ul> <p>Understand Function Usage:</p> <ul> <li>Observe how functions help in organizing and managing different parts of the game.</li> <li>Practice using functions to handle specific tasks and integrate them into the overall program.</li> </ul> <p>Test Your Program:</p> <ul> <li>Run your program to ensure that it correctly performs tasks and produces the desired output for different locations and challenges.</li> </ul>"},{"location":"topics/python/climate_quest/task_4.html#questions-for-reflection","title":"Questions for Reflection:","text":"<ol> <li>How do the new functions improve the structure of the game?</li> <li>What is the role of each function in managing different parts of the game?</li> <li>How does modularizing the code into functions help in managing complexity?</li> </ol>"},{"location":"topics/python/climate_quest/task_4.html#extension-activity-optional","title":"Extension Activity (Optional):","text":"<ul> <li>Add more locations and corresponding challenge functions.</li> <li>Implement additional features or enhancements to the game using functions.</li> </ul> <p>NB.  A sample file for this stage can be downloaded from here</p>"},{"location":"topics/python/climate_quest/task_5.html","title":"Climate Quest - Task 5","text":""},{"location":"topics/python/climate_quest/task_5.html#climate-quest-task-5","title":"Climate Quest - Task 5","text":"<p>Objectives</p> <ul> <li>Understand the role of a <code>main()</code> function</li> <li>Understand the concept of built-in functions in Python.</li> <li>Learn how to use some commonly used built-in functions for math, strings, and basic input/output.</li> <li>Explore the purpose and usage of functions like <code>print()</code>, <code>len()</code>, <code>input()</code>, and more.</li> </ul>"},{"location":"topics/python/climate_quest/task_5.html#the-main-function","title":"The <code>main()</code> function","text":"<p>In many programming languages, there is a designated starting point where the program begins execution. In Python, this convention is followed using a special function often called <code>main()</code>, along with a specific conditional statement to ensure that this function runs when the script is executed directly.</p> <p>The <code>main()</code> function serves as the entry point for the program. It organizes the code and provides a clear structure, making the program easier to understand and maintain. </p> <p>For example:</p> <pre><code>def main():\n    # Your main program logic here\n    print(\"Hello, World!\")\n\nmain()\n</code></pre> <p>Tip</p> <p>For this task, and any future tasks, do not forget to include this entry point in your code.</p>"},{"location":"topics/python/climate_quest/task_5.html#task-overview","title":"Task Overview:","text":"<p>In this homework, you will further develop the \"Climate Quest\" adventure game by incorporating several built-in functions, organizing the code with a <code>main()</code> function and writing a function to validate input from the user.</p>"},{"location":"topics/python/climate_quest/task_5.html#questions","title":"Questions","text":"<ol> <li> <p>Create the <code>main()</code> Function:</p> <ul> <li>Refactor your existing code to include a <code>main()</code> function. Move the game initialization and the main gameplay loop into this function.</li> </ul> </li> <li> <p>Enhanced Welcome Message:</p> <ul> <li>Modify the <code>main()</code> function to display a message that includes the length of the player's name entered by the user using the <code>len()</code> function.</li> </ul> </li> <li> <p>Enhanced Environmental Health Check:</p> <ul> <li>Update the <code>ocean_challenge()</code> and <code>forest_challenge()</code> functions to display the absolute value of changes in environmental health using the <code>abs()</code> function.</li> </ul> </li> <li> <p>Validate User Input:</p> <ul> <li>Create a <code>get_valid_input()</code> function that uses <code>str.isdigit()</code> to ensure that numeric inputs are valid. This is used when the user is selecting the location from the menu, and the options presented by each of the challenges.</li> </ul> </li> </ol> If you're stuck, take a look here If you're really stuck ..."},{"location":"topics/python/climate_quest/task_5.html#instructions","title":"Instructions:","text":"<ol> <li> <p>Create the <code>main()</code> Function:</p> <ul> <li>Introduce the <code>main()</code> function as the entry point for the program.</li> <li>Move the game initialisation and the main gameplay loop into the <code>main()</code> function.</li> </ul> </li> <li> <p>Enhanced Welcome Message:</p> <ul> <li>Use the <code>len()</code> function to display the length of the player's name entered by the user.</li> </ul> </li> <li> <p>Enhanced Environmental Health Check:</p> <ul> <li>Use the <code>abs()</code> function to display the absolute value of changes in environmental health.</li> </ul> </li> <li> <p>Validate User Input:</p> <ul> <li>Use the <code>str.isdigit()</code> function to ensure that numeric inputs are valid numbers.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_5.html#detailed-steps","title":"Detailed Steps:","text":"<ol> <li> <p>Create the <code>main()</code> Function:</p> <p>Refactor the existing code to include a <code>main()</code> function. The <code>main()</code> function should initialize the game and handle the main gameplay loop.</p> <pre><code>def main():\n    # Initialize Game\n    display_message(\"Welcome to Climate Quest!\")\n    player_name = get_user_input(\"Enter your name: \")\n    display_message(f\"Hello, {player_name}! Your name has {len(player_name)} characters.\")\n    environment_health = initialize_health(100)\n    display_message(f\"Initial environmental health: {environment_health}\")\n\n    # Gameplay Loop\n    for _ in range(3):  # Example loop for 3 challenges\n        location = choose_location()\n        environment_health = handle_challenge(location, environment_health)\n        display_message(f\"Updated environmental health: {environment_health}\")\n\n    # End Game\n    display_message(\"Thank you for playing Climate Quest!\")\n\n# Run the game\ndisplay_welcome_message()\nplayer_name = get_player_name()\nmain()\n</code></pre> <p>This code will need the following functions, if not already present in your code.</p> <pre><code>def display_message(message):\n    print(message)\n\ndef get_user_input(prompt):\n    return input(prompt)\n\ndef initialize_health(initial_value):\n    return initial_value\n</code></pre> </li> <li> <p>Enhanced Environmental Health Check:</p> <p>Update the challenge functions to use the <code>abs()</code> function when displaying the changes in environmental health.</p> <pre><code>def ocean_challenge(environment_health):\n    display_message(\"You are addressing ocean pollution.\")\n    cleanup_amount = get_valid_input(\"Enter the amount of pollution cleaned (0-100): \")\n    change = -cleanup_amount\n    display_message(f\"Change in environmental health: {abs(change)}\")\n    return update_health(environment_health, change)\n\ndef forest_challenge(environment_health):\n    display_message(\"You are tackling deforestation.\")\n    trees_planted = get_valid_input(\"Enter the number of trees planted: \")\n    change = 20 if trees_planted &gt; 50 else -10\n    display_message(f\"Change in environmental health: {abs(change)}\")\n    return update_health(environment_health, change)\n\n# Repeat this pattern in all challenge functions that require numeric input...\n</code></pre> </li> <li> <p>Validate User Input:</p> <p>Create a helper function <code>get_valid_input()</code> to ensure numeric inputs are valid. Use this function in the challenge functions.</p> <pre><code>def get_valid_input(prompt):\n    while True:\n        user_input = get_user_input(prompt)\n        if user_input.isdigit():\n            return int(user_input)\n        else:\n            display_message(\"Invalid input. Please enter a number.\")\n</code></pre> </li> </ol>"},{"location":"topics/python/climate_quest/task_6.html","title":"Climate Quest - Task 6","text":""},{"location":"topics/python/climate_quest/task_6.html#climate-quest-task-6","title":"Climate Quest - Task 6","text":"<p>Objectives</p> <ul> <li>Understand selection in algorithms and code.</li> <li>Define the purpose of selection (conditional statements) in programming.</li> <li>Learn the syntax of <code>if</code>, <code>elif</code>, and <code>else</code> statements in Python.</li> <li>List and explain the relational operators used in conditions (e.g., <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>).</li> <li>Review examples of conditional statements.</li> <li>Define the role of the <code>elif</code> statement in handling multiple conditions.</li> <li>Differentiate the use of <code>elif</code> from <code>if</code> and <code>else</code>.</li> </ul>"},{"location":"topics/python/climate_quest/task_6.html#task-overview","title":"Task Overview:","text":"<p>In this homework, you will enhance the \"Climate Quest\" project by incorporating selection statements (<code>if</code>, <code>elif</code>, and <code>else</code>) to make decisions within the game. These decisions will impact the gameplay based on the player's choices and environmental conditions.</p> <p>There are two main occasions when a selection is required:</p> <ul> <li>User is presented with the menu of locations and is asked to select one to visit</li> <li>In that location, user is presented with up to 3 actions and to choose one of those actions</li> </ul>"},{"location":"topics/python/climate_quest/task_6.html#instructions","title":"Instructions:","text":"<ol> <li> <p>Process the location selection from the menu</p> <ul> <li>Get the location choice from the user</li> <li>Select the correct location challenge function based on that choice</li> </ul> </li> <li> <p>Add Selection Statements in Challenges:</p> <ul> <li>In each location challenge the user is presented with 3 options to choose from</li> <li>Add functionality to process this choice</li> </ul> </li> <li> <p>Role of <code>elif</code>:</p> <ul> <li>Demonstrate the role of <code>elif</code> in handling multiple conditions.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_6.html#detailed-steps","title":"Detailed Steps:","text":"<ol> <li> <p>Add Selection statements for the main menu</p> <p>Having displayed the main manu of locations, get the user choice and branch to the selected location:</p> <pre><code>def main():\n    display_menu()\n    choice = get_valid_input(\"Choose a challenge (1-6): \")\n\n    if choice == 1:\n        forest_challenge()\n    elif choice == 2:\n        ocean_challenge()\n    # etc..\n</code></pre> </li> <li> <p>Add selection statements for each of the challenges</p> <p>Each challenge contains three options.  Add these options and get the choice made by the user.</p> <pre><code>def forest_challenge():\nprint(\"\\nForest Challenge\")\nprint(f\"{player_name}: You encounter loggers in a forest. What will you do?\")\nprint(\"1. Confront the loggers\")\nprint(\"2. Start a tree-planting initiative\")\nprint(\"3. Ignore the situation\")\n\nchoice = get_valid_input(\"Choose an action (1-3): \")\n\n# add the selection statements here. For each choice print a suitable response about the impact that choice will have on climate change:\n</code></pre> </li> <li> <p>Selection Statements for the final comment</p> <ul> <li>To practice working with relational operators, when the game is complete there will be a final score representing the impact the choices have had on climate change.  </li> <li>Assuming the score starts at 0, this will be added to as the game progresses.  </li> <li>Positive impacts will increase the score, negative impacts will decrease the score.  </li> <li>When the game is complete the final score should be presented to the user and a comment selected based on that final score.  </li> <li>For example, if the score is greater than, say, 10 the comment might be \"Great job!  There has been a major improvement in the state of the climate\".  </li> <li>Write a function <code>display_final_score(score)</code> that displays a different comment based on the final score ```</li> </ul> </li> <li> <p>Define Relational Operators:</p> <p>Explain the relational operators used in the conditions within the function. For example: - <code>&gt;</code>: Greater than - <code>&gt;=</code>: Greater than or equal to - <code>&lt;</code>: Less than - <code>&lt;=</code>: Less than or equal to - <code>==</code>: Equal to - <code>!=</code>: Not equal to</p> </li> <li> <p>Role of <code>elif</code>:</p> <p>The <code>elif</code> statement allows you to check multiple conditions. It stands for \"else if\" and is used when you need to handle more than two conditions.</p> </li> <li> <p>Add the score variable</p> <p>As each challenge is completed, and each choice made in a location a <code>score</code> variable will need to be updated.  Add this variable to the challenge functions.</p> </li> </ol>"},{"location":"topics/python/climate_quest/task_6.html#homework-questions","title":"Homework Questions:","text":"<ol> <li> <p>Add Selection Statements:</p> <ul> <li>Enhance the <code>ocean_challenge()</code> and <code>forest_challenge()</code> functions to use <code>if</code>, <code>elif</code>, and <code>else</code> statements for different scenarios based on user input.</li> </ul> </li> <li> <p>Define Relational Operators:</p> <ul> <li>Identify and explain the relational operators used in your conditions for the final comment.</li> </ul> </li> <li> <p>Role of <code>elif</code>:</p> <ul> <li>Describe the role of the <code>elif</code> statement in handling multiple conditions. How is it different from <code>if</code> and <code>else</code>?</li> </ul> </li> <li> <p>Keeping score</p> <ul> <li>Maintain a score representing the environmental health of the planet that is updated each time the user visits a location and takes a decision</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_7.html","title":"Climate Quest - Task 7","text":""},{"location":"topics/python/climate_quest/task_7.html#climate-quest-task-7","title":"Climate Quest - Task 7","text":"<p>Objectives</p> <ul> <li>Define iteration in programming and its importance.</li> <li>Recognize the concept of loops as a fundamental element of iteration.</li> <li>Differentiate between <code>for</code> and <code>while</code> loops in Python.</li> <li>Explain when to use a <code>for</code> loop and when to use a <code>while</code> loop.</li> <li>Describe the purpose of the <code>range()</code> function in <code>for</code> loops.</li> <li>Illustrate the use of <code>for</code> loops to iterate over sequences like lists, tuples, and strings.</li> <li>Explain the concept of nested <code>for</code> loops and demonstrate their use with examples.</li> <li>Understand the structure of a <code>while</code> loop in Python.</li> <li>Compare and contrast <code>for</code> loops and <code>while</code> loops.</li> </ul>"},{"location":"topics/python/climate_quest/task_7.html#task-overview","title":"Task Overview:","text":"<p>In this homework, you will enhance the \"Climate Quest\" project by incorporating iteration. You will use <code>for</code> and <code>while</code> loops to handle repeated tasks and processes within the game. This will make the code more efficient and introduce the concept of looping through sequences and repeating actions.</p>"},{"location":"topics/python/climate_quest/task_7.html#instructions","title":"Instructions:","text":"<ol> <li> <p>Use <code>for</code> Loops to Iterate Over Sequences:</p> <ul> <li>Implement <code>for</code> loops to handle repeated actions in the game, such as iterating over challenges.</li> </ul> </li> <li> <p>Use <code>while</code> Loops for Repeated Actions:</p> <ul> <li>Implement <code>while</code> loops for conditions where the repetition depends on a condition, such as continuing the game until a certain condition is met.</li> </ul> </li> <li> <p>Nested <code>for</code> Loops:</p> <ul> <li>Use nested <code>for</code> loops where appropriate, for example, when dealing with multiple elements within a challenge.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_7.html#detailed-steps","title":"Detailed Steps:","text":"<p>Experiment with two different approaches to the game:</p> <ul> <li>The user visits a predetermined number of locations, say 3, as part of the game</li> <li>The user has to visit all of the locations before being presented with a final challenge</li> </ul> <p>In both instances the main menu will have to be returned to and presented to the user, either for a set number of times, or until all locations have been visited</p> <ol> <li> <p>Use <code>for</code> Loops to Iterate Over Sequences:</p> <p>Update the main gameplay loop to use a <code>for</code> loop to iterate over a predefined number of challenges provided by the <code>range()</code> function:</p> <pre><code>def main():\n\n    # Gameplay Loop\n    for _ in range(3):  # Example loop for 3 challenges\n        display_menu()\n        location = get_valid_input(\"Choose a challenge (1-6): \")\n        if location == 1:\n            environment_health = ocean_challenge(environment_health)\n        elif location == 2:\n            environment_health = forest_challenge(environment_health)\n        elif location == 3:\n            environment_health = city_challenge(environment_health)\n        # etc..\n        display_message(f\"Updated environmental health: {environment_health}\")\n\n    # End Game\n    display_message(\"Thank you for playing Climate Quest!\")\n</code></pre> </li> <li> <p>Use <code>while</code> Loops for Repeated Actions:</p> <p>Repeat the previous exercise but this time using a <code>while</code> loop.  For this exercise there will be 2 conditions:</p> <ul> <li>while score &gt; 0 and visited_locations &lt; 6:</li> </ul> <p>Adjust the <code>main()</code> function to display the menu while these two conditions are <code>True</code>.</p> </li> </ol>"},{"location":"topics/python/climate_quest/task_7.html#example-homework-questions","title":"Example Homework Questions:","text":"<ol> <li> <p>Use <code>for</code> Loops to Iterate Over Sequences:</p> <ul> <li>Refactor your main gameplay loop to use a <code>for</code> loop to iterate over a predefined number of challenges.</li> </ul> </li> <li> <p>Use <code>while</code> Loops for Repeated Actions:</p> <ul> <li>Modify your main gameplay loop to use a <code>while</code> loop to continue the game until the environmental health drops below a certain threshold.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_8.html","title":"Climate Quest - Task 9","text":""},{"location":"topics/python/climate_quest/task_8.html#climate-quest-task-9","title":"Climate Quest - Task 9","text":"<p>Objectives</p> <ul> <li>Define what a list is in Python and explain its usefulness in storing and managing collections of data.</li> <li>Maintain a list of visited locations for the game</li> <li>Add a simple inventory system to the game</li> </ul>"},{"location":"topics/python/climate_quest/task_8.html#task-overview","title":"Task Overview:","text":"<p>In this homework, you will enhance the \"Climate Quest\" project by incorporating lists to manage collections of data such as locations visited and resources collected during the game.</p>"},{"location":"topics/python/climate_quest/task_8.html#instructions","title":"Instructions:","text":"<ol> <li> <p>Create Lists to Store Data:</p> <ul> <li>Use lists to store player choices, environmental health changes, and resources collected.</li> </ul> </li> <li> <p>Retrieve Elements from Lists:</p> <ul> <li>Retrieve elements from the lists using positive and negative indices.</li> </ul> </li> <li> <p>Iterate Over Lists:</p> <ul> <li>Use <code>for</code> loops to iterate over the elements of the lists and perform actions based on the elements.</li> </ul> </li> <li> <p>List Operations:</p> <ul> <li>Use list operations like <code>append()</code>, <code>insert()</code>, <code>remove()</code>, and <code>clear()</code> to manage the lists.</li> </ul> </li> <li> <p>Check for Item Presence:</p> <ul> <li>Use the <code>in</code> keyword to check if an item is present in a list.</li> </ul> </li> <li> <p>Get Item Index:</p> <ul> <li>Use the <code>index()</code> method to get the position of an item in a list.</li> </ul> </li> </ol>"},{"location":"topics/python/climate_quest/task_8.html#detailed-steps","title":"Detailed Steps","text":"<p>Using the following code, with highlighted questions, complete the code as required by the question.</p> <pre><code>def main():\n    # Initialize Game\n    display_message(\"Welcome to Climate Quest!\")\n    player_name = get_user_input(\"Enter your name: \")\n    display_message(f\"Hello, {player_name}! Your name has {len(player_name)} characters.\")\n    environment_health = initialize_health(100)\n    display_message(f\"Initial environmental health: {environment_health}\")\n\n    # Create lists to store data\n    # Q1: Initialise lists to hold the visited_locations, and resources_collected\n    # Answer:\n\n    # Gameplay Loop\n    while environment_health &gt; 0:\n        for _ in range(3):  # Example loop for 3 challenges\n            location = choose_location()\n            visited_locations.append(location)  # Store player choice\n            if location == 1:\n                environment_health = ocean_challenge(inventory)\n            elif location == 2:\n                environment_health = forest_challenge(inventory)\n            elif location == 3:\n                environment_health = city_challenge(inventory)\n            display_message(f\"Updated environmental health: {environment_health}\")\n\n    # End Game\n    display_message(\"Environmental health has dropped to zero. Game over!\")\n    display_message(\"Thank you for playing Climate Quest!\")\n\n    # Retrieve elements from lists\n    # Q2: For each of the lists, print the whole list and the first and last items in these lists\n    # Answer:\n\n    # 3. Iterate over lists\n    # Q3: For each of the lists, write a for loop to iterate over the list and display each element?\n    # Answer:\n\n\n    # 4. List operations\n    # Q4: For the locations list:\n    # - remove the last choice and display the list\n    # - clear all choices from the list and display the list\n    # For the resources collected list:\n    # - add a new resource to the list and display the list\n    #\n    # Answer:\n\n    # 5. Check for item presence\n    # Q5: How can we check if \"forest\" is in player_choices and if they have collected solar panels for their inventory?\n    # Answer:\n\n    # 6. Get item index\n    # Q6: How can we find the position of \"forest\" in player_choices and solar panels in the inventory?\n    # Answer:\n</code></pre>"},{"location":"topics/python/climate_quest/task_8.html#additional-challenge-1","title":"Additional Challenge 1","text":"<p>The user visits a number of locations, and these are presented 'long-hand' to the user in a menu that has a number of <code>print</code> statements:</p> <pre><code>def display_menu():\n    \"\"\"\n    Display the main menu for user to select their location\n    \"\"\"\n    print(\"1. Forest Challenge\")\n    print(\"2. Ocean Challenge\")\n    print(\"3. City Challenge\")\n    print(\"4. Arctic Challenge\")\n    print(\"5. Desert Challenge\")\n    print(\"6. Quit\")\n</code></pre> <p>Using iteration, a list of locations and the <code>in</code> operator, modify this function to present the menu of locations using the locations defined in the list. </p>"},{"location":"topics/python/climate_quest/task_8.html#additional-challenge-2","title":"Additional Challenge 2","text":"<p>At the moment the user can visit a location more than once.  Using the list of <code>visited_locations</code> how can we ensure the user only visits the location once and once only?</p> <p>There will be a number of possible solutions here, e.g.</p> <ul> <li>Following on from the previous challenge, the menu ONLY displays those locations that have not been visited by the user</li> <li>The menu choice functionality checks against the list of <code>visited_locations</code> and only proceeds when the user selects a location that has not yet been visited.</li> </ul>"},{"location":"topics/python/climate_quest/task_9.html","title":"Climate Quest - Task 9","text":""},{"location":"topics/python/climate_quest/task_9.html#climate-quest-task-9","title":"Climate Quest - Task 9","text":"<p>Objectives</p> <ul> <li>Understand the concept of 2D lists in Python and their usefulness in storing and managing more complex collections of data.</li> <li>Learn how to create, access, and modify 2D lists.</li> <li>Practice iterating over 2D lists using nested loops.</li> <li>Apply these concepts to enhance the Climate Quest game.</li> </ul> <p>Incorporating 2D lists into the Climate Quest text adventure game can add complexity and depth to the game's data structures. For example, we can use 2D lists to manage multiple attributes for various game locations, challenges, or resources.</p> <p>Changing the way in which the data is being held means we can also simplify the challenge functions by removing the functions for each location i.e. <code>forest_challenge()</code>, <code>city_challenge()</code> etc into just one function and use the location as a parameter to that function!</p> <p>Warning</p> <p>This challenge will involve a restructuring of the way the game data has been handled before.  It may be best to start a new game file for your Python code</p> <p>Here are some ways to incorporate 2D lists into the game:</p> <ol> <li>Game Map: Use a 2D list to represent a map of the game world, with different locations having various attributes (e.g., name, environmental health impact).</li> <li>Challenge Outcomes: Store possible outcomes of challenges in a 2D list where each row represents a different challenge and each column represents possible outcomes.</li> <li>Resource Management: Use a 2D list to keep track of resources, where each resource has multiple attributes (e.g., type, quantity, impact).</li> </ol>"},{"location":"topics/python/climate_quest/task_9.html#instructions","title":"Instructions","text":"<ol> <li> <p>Create a 2D List to Represent the Game Map:</p> <ul> <li> <p>Each sublist represents a location with attributes like name, description, and environmental health impact.</p> </li> <li> <p>Create a 2D list where each inner list represents a location. The inner list will contain the following elements:</p> <ul> <li>Location Name: A string representing the name of the location.</li> <li>Opening Statement: A string that describes the scenario at the location.</li> <li>Options: A further list of possible actions the player can take.</li> </ul> </li> </ul> <pre><code>game_map = [\n[\"Forest\", \n \"You encounter loggers in a forest. What will you do?\",\n [\"Confront the loggers\", \"Start a tree-planting initiative\", \"Ignore the situation\"]],\n\n[\"Ocean\", \n \"You see plastic waste polluting the ocean. What will you do?\",\n [\"Organize a beach cleanup\", \"Campaign against plastic use\", \"Do nothing\"]],\n # etc - add for the remaining locations\n</code></pre> <p>Our top-level list is called <code>game_map</code>.  The <code>game_map</code> is a list of locations.</p> </li> <li> <p>Refactor the challenge functions</p> <ul> <li>Instead of having separate functions for each challenge, we can create a generic function that processes any location using the data from the game_map.</li> </ul> <pre><code>def display_challenge(location_data):\n    \"\"\"\n    Display the challenge for the given location.\n\n    Args:\n        location_data (list): A list containing location name, opening statement, and options.\n    \"\"\"\n    print(f\"\\n{location_data[0]} Challenge\")\n    print(f\"{player_name}: {location_data[1]}\")\n    for i, option in enumerate(location_data[2], 1):\n        print(f\"{i}. {option}\")\n\n    choice = get_valid_input(\"Choose an action (1-3): \")\n    # code will continue here\n</code></pre> <ul> <li>The parameter to this function, <code>location_data</code>, will be one of the items in the <code>game_data</code> list.</li> <li>Line 8: pulls out the first item in that list, the title of the location</li> <li>Line 9: pulls out the second item in that list, the location description</li> <li>Line 10: A new loop function <code>enumerate()</code>.  As the title suggests this loop function also provides a number for each of the items in the list it is looping over and this is stored in the <code>i</code> variable.  Really useful!</li> <li>Complete the code for this function by processing the choice and displaying the relevant outcome message to the screen from the <code>location_data</code></li> </ul> </li> <li> <p>Update the main function</p> <ul> <li>When processing the user choice for the location we now only need to call the <code>display_challenge()</code> function and pass in the correct location data from the <code>game_map</code> list:</li> </ul> <pre><code>def main():\n    while True:\n        display_menu()\n        choice = get_valid_input(\"Choose a challenge (1-6): \")\n\n        if 1 &lt;= choice &lt;= 5:\n            display_challenge(game_map[choice - 1])\n        elif choice == 6:\n            print(\"Thank you for playing Climate Quest!\")\n            break\n        else:\n            print(\"Invalid choice. Please choose again.\")\n</code></pre> <ul> <li>Line 6: A more concise way of saying <code>if choice &gt;= 1 and choice &lt;= 5:</code></li> </ul> </li> <li> <p>Other opportunities</p> <ul> <li>This approach can be developed further by keeping a list of the resources gathered by the user in each location, where each resource (if/when) used can have an impact on the <code>environmental_health</code> score.</li> </ul> </li> </ol> <p>Note</p> <p>Notice how, by changing how our data is being stored, we can simplify the algorithm and code needed to process that data.</p>"},{"location":"topics/security/index.html","title":"Security","text":""},{"location":"topics/security/index.html#security","title":"Security","text":"<p>Slidedeck</p>"},{"location":"topics/security/index.html#overview","title":"Overview","text":"<p>As our devices connect to a network we open the possibility of intrusion and bad actors being able to access those networks.  There are a variety of threats and in this section we will look at these threats and the measures that can taken to counteract against them.  We are evermore reliant on these interconnected systems for business, pleasure, shopping etc and there is responsibility on both ourselves as users of these systems and the organisations providing these services to ensure our data is safe.</p> <p>There are two related fields:</p> <ul> <li>Network Security</li> <li>Cyber Security</li> </ul> <p>Network Security encompasses a variety of strategies, technologies, and practices, ranging from firewalls to encryption algorithms with the explicit focus on safeguarding the integrity, confidentiality, and availability of data and resources within a network. It deals with securing the communication and infrastructure components of a network.</p> <p>Cyber Security has a broader scope and involves protecting all aspects of information systems, including networks, computer systems, software, data, and applications. It addresses threats from various sources, such as malware, unauthorized access, social engineering, and more.</p> <p>In an era dominated by digitization and global connectivity, cyber threats have become more sophisticated and pervasive including malware, phishing attacks that seek to exploit vulnerabilities in the digital landscape.</p> <p>Keep in mind that the field of Network Security and Cyber Security is dynamic, yet the challenges and solutions discussed here provide a foundational understanding. Our journey is not merely a snapshot but a continuous exploration into the evolving strategies and technologies that ensure the resilience of digital infrastructures.</p> <p>In particular we will look at:</p> <ul> <li>Threats to computer systems and networks: including malware, social engineering, e.g. phishing, brute-force attacks, denial of service, attacks, data interception and theft and the concept of SQL injection</li> <li>Prevention strategies: including penetration testing, anti-malware software, firewalls, user access levels, MAC Address filtering, biometrics, passwords, encryption and physical security</li> </ul>"},{"location":"topics/security/01_threats.html","title":"Network Threats","text":""},{"location":"topics/security/01_threats.html#network-threats","title":"Network Threats","text":"<p>Objectives</p> <ul> <li>Identify and comprehend the diverse range of threats that pose risks to network security.</li> <li>Understand the significance of password management and avoiding common pitfalls.</li> <li>Understand the role of patches in addressing vulnerabilities and improving system security.</li> <li>Identify the threats associated with the use of removable media in network environments.</li> <li>Define misconfigured access rights and their implications for security.</li> <li>Explain the concept of Denial-of-Service attacks and their objectives.</li> <li>Define brute force attacks and their systematic approach to gaining unauthorized access.</li> <li>Explain the concept of SQL injection and its exploitation of vulnerabilities in applications.</li> </ul> <p>Keeping the network safe from unauthorised access and taking personal responsibility for how we engage with networks is becoming ever more important as we conduct more of our business and leisure activities online.  Network security faces a myriad of threats, ranging from simple nuisances to sophisticated, targeted attacks. Understanding these threats is crucial for developing effective strategies to mitigate against them. Being aware of how these threats work will also make us as individuals more alert.</p> <p>There are a range of threats that both organisations and individuals need to be aware of:</p> <ul> <li>Weak passwords</li> <li>Unpatched or outdated software</li> <li>Removable media</li> <li>Misconfigured access rights </li> <li>Denial-of-service attacks</li> <li>Brute force attacks</li> <li>Data interception and theft</li> <li>SQL injection</li> </ul> <p>Also:</p> <ul> <li>Social engineering</li> <li>Malware</li> </ul> <p>These will be considered in their own sections</p>"},{"location":"topics/security/01_threats.html#weak-passwords","title":"Weak passwords","text":"<p>By \"weak\" we mean passwords that are either easy to guess or crack.  Despite being told about the importance of using strong and unique passwords users continue to use weak passwords.  </p> <p></p> <p>For example, in 2024 the 10 most common passwords (collected from data breaches) were:</p> <ul> <li>123456</li> <li>123456789</li> <li>qwerty</li> <li>password</li> <li>12345</li> <li>qwerty123</li> <li>1q2w3e</li> <li>12345678</li> <li>111111</li> <li>1234567890</li> </ul> <p>Similar analysis can also reveal constituent elements of passwords such as the most common year, name, sports team, food type and even swear word as well as the average length etc..  Such information is a godsend to potential hackers looking for shortcuts to hacking a user's password.</p> <p>The advice is clear when creating a new password:</p> <ul> <li>Use long password combinations</li> <li>Combine numbers, symbols, lowercase, and uppercase letters</li> <li>Avoid popular passwords</li> <li>Use a secure password manager to create and safely store strong passwords</li> <li>Never share a password</li> <li>Change the password regularly</li> </ul>"},{"location":"topics/security/01_threats.html#unpatched-or-outdated-software","title":"Unpatched or outdated software","text":"<p>When software is not regularly updated with security patches, it may contain known vulnerabilities that malicious actors can exploit to gain unauthorized access, launch attacks, or compromise the integrity of a network. Outdated software often has known vulnerabilities that have been addressed by subsequent updates or patches, a \"patch\" is an addition to the existing codebase. Cybercriminals actively target these vulnerabilities to exploit security weaknesses in the system.</p> <p>A report from 2021 highlighted 65 new vulnerabilities that led directly to ransomware attacks (ransomware is a type of malware that permanently block access to the victim's personal data unless a ransom is paid).  This was an increase compared to the number of vulnerabilities in 2020.</p> <p>Attackers can use automated tools to scan for systems with known vulnerabilities, making networks with outdated software more susceptible to widespread attacks. Major data breaches have occurred due to exploitation of vulnerabilities in outdated or unpatched software, for example:</p> <ul> <li> <p>WannaCry ransomware attack in 2017. The ransomware targeted Microsoft Windows systems that had not applied a critical security update (MS17-010). It exploited a vulnerability in the Server Message Block (SMB) protocol, leading to widespread infections and disrupting organizations worldwide.</p> </li> <li> <p>Equifax Data Breach (2017): The Equifax data breach, also in 2017, was attributed to a vulnerability in the Apache Struts web application framework. The breach exposed sensitive personal information of millions of individuals. Equifax failed to patch the known vulnerability promptly, resulting in a significant security incident.</p> </li> </ul> <p>Timely application of security patches is crucial to mitigate the risk of exploitation. Organizations that neglect or delay patching expose themselves to avoidable security threats.</p>"},{"location":"topics/security/01_threats.html#removable-media","title":"Removable media","text":"<p>Removable media, such as USB drives, external hard drives and optical discs, can be carriers for various types of malware, including viruses, worms, Trojans, and ransomware. When an infected removable device is connected to a computer or network, the malware can spread to the connected system, compromising its security.  In environments where removable media is used without proper controls, it becomes an avenue for unauthorized access. An attacker might insert a USB drive with malware or tools designed for privilege escalation, gaining unauthorized access to systems.</p> <p>Malicious software can exploit AutoRun and AutoPlay features present in many operating systems. When a removable device is connected, these features automatically execute specific programs, providing an avenue for malware to initiate without user intervention.</p> <p>Removable media can be used as a means to copy sensitive data from a network. </p> <p>Malicious actors may distribute seemingly innocent or appealing content (e.g., labeled as software updates, games, or documents) on removable media to trick users into inserting the media into their computers. This social engineering tactic can lead to the unwitting introduction of malware.</p> <p>This threat can be mitigated by:</p> <ul> <li>Implementing endpoint protection solutions that include USB device control features.</li> <li>Regularly scanning removable media for malware before allowing access to the network.</li> <li>Enforcing policies that restrict the use of personal removable devices on corporate networks.</li> <li>Educating users about the risks associated with unknown or untrusted removable media.</li> </ul>"},{"location":"topics/security/01_threats.html#misconfigured-access-rights","title":"Misconfigured access rights","text":"<p>All users have access to the internal organisation network but not all users are equal.  Not all users need access to all of the data on a system ane the network administration team can set certain privileges and access rights to either particular users or groups of users.</p> <p>Misconfigured access rights, also known as permissions or privileges, refer to instances where users or entities are granted inappropriate or excessive levels of access to computer systems, networks, or data due to errors or oversights in the configuration. This type of security issue can lead to various risks and vulnerabilities. Here's an expansion on misconfigured access rights:</p> <p>When access rights are not properly configured, sensitive data may be exposed to users who should not have permission to view or modify it. This can lead to data breaches, privacy violations, and compliance issues.  Misconfigurations can allow users to escalate their privileges beyond what is intended for their roles. This is a common target for attackers seeking to gain elevated access and control over a system or network.  This can have severe consequences for the integrity and reliability of information stored within a system.</p> <p>Misconfigurations weaken the overall security posture of a system or network. Attackers actively search for and exploit misconfigured access rights as part of their strategies to compromise systems and launch more extensive attacks.</p> <p>Employees or insiders with misconfigured access rights may pose a significant threat. Disgruntled employees or those seeking financial gain may exploit these misconfigurations to cause harm to the organization.</p> <p>In cloud environments, misconfigured access controls are a prevalent issue. Improperly configured cloud storage, databases, or services can expose sensitive information to the public internet, leading to data leaks.</p>"},{"location":"topics/security/01_threats.html#denial-of-service-attacks","title":"Denial-of-service attacks","text":"<p>A Denial-of-Service (DoS) attack is a malicious attempt to disrupt the normal functioning of a targeted system, service, or network by overwhelming it with a flood of illegitimate requests or traffic. The goal of a DoS attack is to make the target inaccessible to its intended users, causing a denial of service. Here's an expansion on Denial-of-Service attacks:</p> <p>DoS involves overwhelming a network, system, or service with a high volume of traffic. Examples include Ping Flood, SYN Flood, and UDP Flood attacks.  They may also target specific applications or services, attempting to exhaust their resources. Examples include HTTP/HTTPS, DNS, or FTP application layer attacks.</p> <p>In a Distributed Denial-of-Service (DDoS) Attacks multiple compromised computers are used to launch a coordinated assault. DDoS attacks are often more potent than single-source DoS attacks.</p> <p>The primary impact of such an attack is preventing legitimate users accessing these services and making that system, service, or network temporarily or permanently unavailable. Businesses may suffer financial losses due to downtime, loss of customers, and damage to their reputation.  In some cases, a DoS attack may be a diversionary tactic, distracting security teams while attackers attempt to steal or corrupt data.</p>"},{"location":"topics/security/01_threats.html#brute-force-attacks","title":"Brute force attacks","text":"<p>A brute force attack is a straightforward and systematic attempt to gain unauthorized access to a system, account, or data by trying out all possible combinations of passwords or encryption keys. This type of attack relies on the attacker's computational power and persistence to break through security measures. </p> <p>Brute force attacks can be applied to various systems, including user accounts, online services, cryptographic keys, Wi-Fi passwords, and more. Common targets include login pages, email accounts, and encrypted files.</p> <p>In the context of user accounts, attackers attempt to crack passwords by systematically trying every possible combination of characters. This involves trying various combinations of letters, numbers, and symbols until the correct password is found.</p> <p>Instead of trying all possible combinations, attackers may use a precompiled list of commonly used passwords, known as a dictionary. This approach, known as a dictionary attack, is more efficient than a full brute force attack and often yields successful results.</p> <p>In credential stuffing attacks, attackers use previously leaked usernames and passwords from one service to attempt unauthorized access to other online services. Since many users reuse passwords across multiple accounts, attackers can gain access to additional services.</p> <p>The success of a brute force attack depends on the strength of the password or encryption key, the available computational resources of the attacker, and the time required to test each combination. Longer and more complex passwords increase the difficulty of a successful brute force attack.</p> <p>Users should be educated about the importance of using strong, unique passwords for each account. Additionally, awareness about the risks of password reuse and the need for vigilance against phishing attempts can enhance overall security.</p>"},{"location":"topics/security/01_threats.html#data-interception-and-theft","title":"Data interception and theft","text":"<p>Data interception and theft refer to unauthorized access, monitoring, and extraction of sensitive information as it is being carried across a network or is stored on a device. Attackers use various techniques to intercept and steal data, often with the aim of exploiting or monetizing the compromised information. Here's an expansion on data interception and theft:</p> <p>Attackers use packet sniffers to capture and analyze data packets as they move across a network. This method allows them to intercept unencrypted information, including login credentials and sensitive details.</p> <p>Man-in-the-Middle (MitM) attacks are also common. Here, an attacker positions themselves between the communication path of two parties. This enables them to intercept and potentially alter the data being exchanged.</p> <p>Unsecured public Wi-Fi networks are susceptible to interception. Attackers can use Wi-Fi sniffers to capture data transmitted over these networks. Data transmitted over unencrypted websites (HTTP) is more vulnerable to interception than data transmitted over encrypted connections (HTTPS).</p> <p>To prevent data interception:</p> <ul> <li>Encryption: Use strong encryption protocols (such as TLS/SSL) to secure data during transmission. This prevents unauthorized parties from understanding intercepted data.</li> <li>Virtual Private Network (VPN): VPNs create a secure, encrypted tunnel for data transmission, especially useful when accessing public Wi-Fi networks.</li> <li>Secure Sockets Layer (SSL) Certificates: Websites should implement SSL certificates to encrypt data exchanged between users and the web server.</li> <li>Multi-Factor Authentication (MFA): Adding an additional layer of authentication reduces the risk of unauthorized access even if credentials are intercepted.</li> <li>Network Monitoring: Employ intrusion detection systems and network monitoring tools to detect and respond to unusual patterns or signs of data interception.</li> </ul>"},{"location":"topics/security/01_threats.html#sql-injection","title":"SQL injection","text":"<p>SQL injection is a type of cyber attack that occurs when an attacker manipulates a website or application's database by injecting malicious SQL code into the input fields. This technique exploits vulnerabilities in the application's code that improperly handles user-supplied input. Here's an expansion on SQL injection:</p> <p>SQL injection commonly targets input fields, such as login forms, search boxes, and user registration forms, where user input is directly incorporated into SQL queries without proper validation or sanitization.</p> <p>n attacker inserts specially crafted SQL statements or fragments into input fields to manipulate the structure and behavior of SQL queries executed by the application.</p> <p>For example:</p> <p>PHP code to process a web form might use:</p> <pre><code>$enteredUsername = $_POST['username'];\n$enteredPassword = $_POST['password'];\n\n$query = \"SELECT * FROM users WHERE username = '$enteredUsername' AND password = '$enteredPassword'\";\n</code></pre> <p>The user inputs are directly concatenated into the SQL query without any validation or sanitation. An attacker could exploit this vulnerability by manipulating the input fields. Let's consider the following inputs:</p> <ul> <li>Username: admin' OR '1'='1' --</li> <li>Password: (can be anything, as it won't matter due to the injected condition)</li> </ul> <p>When the SQL query is constructed with these inputs, it becomes:</p> <p>user inputs are directly concatenated into the SQL query without proper validation or sanitation. An attacker could exploit this vulnerability by manipulating the input fields. Let's consider the following inputs:</p> <p>Username: admin' OR '1'='1' --</p> <p>Password: (can be anything, as it won't matter due to the injected condition)</p> <p>When the SQL query is constructed with these inputs, it becomes:</p> <pre><code>SELECT * FROM users WHERE username = 'admin' OR '1'='1' --' AND password = 'anything'\n</code></pre> <p>In this case:</p> <ul> <li>The injected <code>OR '1'='1'</code> condition always evaluates to true.</li> <li>The double hyphen <code>--</code> is a SQL comment, which makes the rest of the query (including the original password check) effectively ignored.</li> </ul> <p>As a result, the query returns all rows from the users table, and the attacker can potentially log in as the first user in the database, gaining unauthorized access.</p> <p>To avoid this all SQL queries should be parameterised or use prepared SQl statements, this way the strings entered by the user cannot be injected into the resulting SQL.  The <code>OR '1'='1'</code> would be treated as the string for a username rather than as SQL.  The database would not have a username with these character so would return empty.</p>"},{"location":"topics/security/01_threats.html#questions","title":"Questions","text":"1. What is a common characteristic of weak passwords?They are easy to remember.They are complex with symbols and numbers.They are unique to each account.They are frequently changed.Weak passwords are often easy to guess or remember, making them vulnerable to brute force attacks.Submit 2. Why is it important to regularly apply software patches?Patches slow down system performance.Patches address known security vulnerabilities.Patches are only for adding new features.Patches are optional for most software.Regularly applying patches ensures that known vulnerabilities are fixed, protecting against attacks like ransomware.Submit 3. How can removable media pose a threat to network security?They can cause physical damage to computers.They can carry malware that infects systems when connected.They only allow safe file transfers.They help improve system performance.Removable media can carry malware such as viruses or worms, which can infect connected systems.Submit 4. What is the risk associated with misconfigured access rights?Users gain unauthorized access to sensitive data.Users have no access to any data.Users are unable to log into the system.Users can only access encrypted files.Misconfigured access rights can give users inappropriate levels of access, leading to potential data breaches.Submit 5. What is the main goal of a Denial-of-Service (DoS) attack?To steal sensitive information from a system.To encrypt files and demand ransom for access.To make a service unavailable to legitimate users.To intercept and alter network communications.A DoS attack aims to overwhelm a network or service, making it inaccessible to its intended users.Submit 6. How does a brute force attack work?It scans for vulnerabilities in software.It sends excessive traffic to overwhelm a system.It systematically tries all possible password combinations.It injects malicious code into a system.A brute force attack tries all possible combinations of passwords until the correct one is found.Submit 7. What distinguishes a worm from a virus in the context of malware?A virus spreads without needing user action.A worm spreads on its own without attaching to files.A worm can only infect one device.A virus can replicate without infecting a system.Worms spread independently across networks without needing to attach to other files, unlike viruses.Submit 8. What is the primary purpose of a Trojan in cyberattacks?To replicate and spread like a worm.To gain access by pretending to be legitimate software.To encrypt files and demand a ransom.To launch a Denial-of-Service attack.Trojans disguise themselves as legitimate software to trick users into installing them, often leading to unauthorized access.Submit 9. How does spyware differ from viruses and Trojans?Spyware replicates itself across networks.Spyware monitors user activities without damaging the system.Spyware encrypts data and demands payment.Spyware targets only specific software applications.Spyware is designed to monitor user activities and collect information, without necessarily causing direct damage to the system.Submit 10. What is the main purpose of SQL injection?To manipulate a database using malicious SQL queries.To encrypt a website\u00e2\u20ac\u2122s database for ransom.To overload a system with SQL requests.To scan for vulnerabilities in SQL code.SQL injection occurs when an attacker injects malicious SQL code to manipulate or retrieve sensitive data from a database.Submit"},{"location":"topics/security/02_social_engineering.html","title":"Social Engineering","text":""},{"location":"topics/security/02_social_engineering.html#social-engineering","title":"Social Engineering","text":"<p>Objectives</p> <ul> <li>Define social engineering and its role in exploiting human vulnerabilities for malicious purposes.</li> <li>Identify various social engineering techniques and their impact on network security.</li> <li>Explain the concept of phishing and recognize common characteristics of phishing emails.</li> <li>Define pharming and describe how it manipulates the DNS to redirect users to fraudulent websites.</li> <li>Define shoulder surfing and recognize situations where attackers might employ this low-tech technique.</li> <li>Explain blagging as a form of social engineering without relying on technical means.</li> <li>Define baiting and identify various tactics used by attackers to entice individuals.</li> <li>Provide strategies to verify the legitimacy of requests for sensitive information.</li> <li>Provide practical tips and guidelines for individuals to stay vigilant against social engineering attacks.</li> </ul> <p>One of the weakest points for any network system are the users themselves, us!  we can be easily fooled into activity that leads the attackers into our domestic and business worlds.</p> <p>Social engineering techniques use psychological approaches to manipulate people into giving away confidential and personal information eg passwords and pin numbers.</p> <p>There are many social engineering approaches including: </p> <ul> <li>Phishing </li> <li>Pharming </li> <li>Shoulder surfing</li> <li>Blagging (Pretexting) </li> <li>Baiting</li> </ul>"},{"location":"topics/security/02_social_engineering.html#phishing","title":"Phishing","text":"<p>Phishing is a cyber attack technique that involves tricking individuals into divulging sensitive information, such as login credentials, personal details, or financial information. Attackers use various deceptive methods to appear trustworthy and legitimate, often mimicking reputable entities or services. </p> <p>Phishing attacks commonly occur through emails, but they can also involve other communication channels like text messages, social media messages, or even phone calls. Attackers often use social engineering tactics to create messages that appear urgent, compelling, or trustworthy.</p> <p>They often impersonate well-known and trusted entities, such as banks, government agencies, popular websites, or colleagues and will use branding from that organisation to make them appear legitimate.</p> <p>Phishing emails contain links that direct recipients to fake websites designed to capture sensitive information.</p> <p></p> <p>Spear phishing is a targeted form of phishing where attackers customize their approach for specific individuals or organizations.  Attackers may gather information about the target from public sources or social media to make their messages more convincing.</p> <p>To protect against phishing attacks:</p> <ul> <li>Verify the legitimacy of emails by checking sender addresses and domains.</li> <li>Be cautious of unexpected emails, especially those urging immediate action.</li> <li>Enable multi-factor authentication wherever possible to add an extra layer of security.</li> <li>Provide regular training to users on recognizing phishing attempts and understanding common tactics used by attackers.</li> <li>Simulate phishing attacks internally to raise awareness and test employees' response.</li> <li>Hover over hyperlinks in emails to preview the actual URL before clicking.</li> <li>Avoid clicking on suspicious links, and manually enter URLs when needed.</li> <li>Verify any request for sensitive information through a trusted and known communication channel before responding.</li> <li>Contact the organization or individual directly using official contact details rather than responding to the email.  </li> </ul>"},{"location":"topics/security/02_social_engineering.html#pharming","title":"Pharming","text":"<p>Pharming is a cyber attack that aims to redirect the legitimate website traffic of users to fraudulent websites without their knowledge or consent. Unlike phishing, which relies on deceptive emails or messages to trick individuals into visiting malicious sites, pharming manipulates the Domain Name System (DNS) or uses other methods to misdirect users to fake websites. </p> <p>One common method of pharming involves compromising the DNS, which is responsible for translating human-readable domain names (like www.example.com) into IP addresses that computers use to locate servers on the internet.  Attackers manipulate the DNS records, either on the user's device or on a DNS server, to redirect legitimate domain names to malicious IP addresses.</p> <p>In more sophisticated attacks, attackers compromise routers, which control the flow of data between a user's device and the internet.  By manipulating the router settings, attackers can redirect traffic from multiple devices connected to the compromised network to fraudulent websites.</p> <p>Pharming can also involve session hijacking, where attackers intercept and manipulate the communication between a user's device and a legitimate website. This may allow attackers to impersonate the user and gain unauthorized access to sensitive information.</p>"},{"location":"topics/security/02_social_engineering.html#shoulder-surfing","title":"Shoulder surfing","text":"<p>It's a low form of tech but still significant. Shoulder surfing is a form of visual hacking where an attacker observes another user entering their passwords, PINs, or other confidential data, by directly looking over the shoulder or from a distance. This type of attack does not involve any advanced technology or hacking tools; instead, it relies on the physical proximity of the attacker to the victim. Here's an expansion on shoulder surfing:</p> <p>PINs entered at cash point machines are a common target, similarly passwords input on smartphones, laptops, or desktop computers, and credit card details entered during transactions.</p> <p>The attacker needs to be in close physical proximity to the victim to successfully observe the information, they may engage in another activity or simply appear preoccupied or use accessories like hats, bags, or clothing to partially conceal their actions and maintain a covert approach.</p> <p>While shoulder surfing traditionally involves direct observation, modern technology can enhance this practice.  Small, inconspicuous cameras or smartphone cameras can be used to record the target's actions covertly, allowing the attacker to review the captured information later.</p> <p>To prevent shoulder surfing:</p> <ul> <li>Be cautious when entering sensitive information in locations with limited privacy.</li> <li>When entering PINs or passwords, position the body and device in a way that makes it difficult for others to see the input.</li> <li>Create physical barriers with the body or hand movements to shield the information from prying eyes.</li> <li>Change the way you enter passwords or PINs to make it harder for shoulder surfers to discern the pattern i.e. deliberately press additional keys or move your fingers across the keyboard or keypad.</li> <li>Encourage users to be vigilant and report any suspicious behavior in public places.</li> </ul>"},{"location":"topics/security/02_social_engineering.html#blagging-pretexting","title":"Blagging (Pretexting)","text":"<p>Blagging refers to the act of obtaining sensitive or confidential information by trickery or deception. It's a form of social engineering where an individual attempts to manipulate others into providing information, such as usernames, passwords, or access to secure areas, without using technical means.  It often takes the form of impersonation or pretexting, where the attacker pretends to be someone they are not to gain trust and access.</p> <p>The attacker poses as a trusted authority figure, such as an employee, executive, or service personnel, to gain access to restricted areas or information.  They may create a fabricated scenario or pretext to manipulate individuals into divulging information. </p> <p>Blagging over the phone involves manipulating individuals during a phone conversation to extract sensitive information. This could include pretending to be from a reputable organization or service provider and requesting login credentials or other confidential data.</p> <p>Similar to phishing, blagging via email involves crafting deceptive emails to trick recipients into revealing sensitive information or performing actions that compromise security.</p> <p>To guard against blagging:</p> <ul> <li>Always verify the identity of individuals seeking information, especially in unfamiliar or unexpected situations.</li> <li>Even if information is requested by a seemingly trusted individual, MFA adds an extra layer of protection.</li> <li>Educate employees about social engineering tactics, including blagging, and promote a culture of security awareness.</li> <li>Encourage a healthy level of skepticism, especially when faced with unexpected requests for sensitive information.</li> </ul>"},{"location":"topics/security/02_social_engineering.html#baiting","title":"Baiting","text":"<p>Baiting is a social engineering technique where an attacker offers something enticing to trick individuals into compromising their security. The bait is typically something attractive, such as free software, a download, or a physical device, used to lure victims into taking actions that may lead to a security breach.</p> <p>Attackers may offer seemingly free software, games, or other digital content. When users download and install the offered items, malicious software (malware) is also installed, compromising the user's system.</p> <p>Using enticing headlines or offers in emails, ads, or social media to lure users into clicking on links - known as clickbait. These links may lead to malicious websites or initiate downloads of malware.</p> <p>Attackers may leave infected USB drives or other storage devices in public places. Curious individuals who find and connect these devices to their systems may unintentionally introduce malware.</p> <p>Placing fake hardware devices, such as USB chargers, in public spaces. Unsuspecting individuals who use these devices may expose their devices to security risks.</p> <p>To protect against baiting:</p> <ul> <li>Be skeptical of offers that seem too good to be true, especially if they come from unknown or untrusted sources.</li> <li>Before clicking on links or downloading content, verify the legitimacy of the source.</li> <li>Employ security software to detect and block malicious downloads or activities.</li> <li>Provide security awareness training to educate individuals about the risks associated with accepting unknown or unexpected offers, both online and in physical environments.</li> </ul>"},{"location":"topics/security/02_social_engineering.html#questions","title":"Questions","text":"1. What is social engineering, and how does it exploit human behavior in the context of network security?Using encryption to protect user dataManipulating people into giving away confidential informationHacking into servers using technical vulnerabilitiesCreating firewalls to prevent unauthorized accessSocial engineering relies on exploiting human vulnerabilities, often tricking individuals into revealing sensitive information.Submit 2. Which of the following is a common characteristic of phishing emails?Use of advanced encryption to secure messagesImpersonation of trusted entities to request sensitive informationRequests for recipients to confirm email settingsEmails sent from the victim's contact listPhishing emails often impersonate trusted entities, such as banks or popular websites, to trick individuals into providing sensitive information.Submit 3. How does spear phishing differ from traditional phishing?It targets specific individuals or organizations with personalized attacksIt uses encryption to protect the phishing messageIt focuses on businesses rather than individualsIt is always conducted over social mediaSpear phishing is a more targeted form of phishing that customizes attacks based on specific information gathered about the victim.Submit 4. What is pharming, and how does it differ from phishing?Pharming uses malicious software to steal data, while phishing relies on social mediaPharming manipulates DNS to redirect users to fraudulent websites, while phishing uses deceptive emailsPharming targets financial institutions, while phishing targets individualsPharming involves keylogging, while phishing involves email impersonationPharming manipulates the DNS to redirect users to fraudulent websites, while phishing uses deceptive emails or messages to trick individuals into visiting malicious sites.Submit 5. Which of the following best describes shoulder surfing?Intercepting passwords using malwareObserving someone entering sensitive information in a public placeSending malicious links via emailRedirecting users to a fraudulent websiteShoulder surfing involves directly observing someone entering sensitive information, like passwords or PINs, often in a public place.Submit 6. What is one effective precaution against shoulder surfing in public spaces?Entering passwords using only lowercase lettersPositioning the body to shield the screen or keypadKeeping security software up to dateUsing the same password across multiple accountsPositioning your body or hand in a way that blocks others from seeing your input helps prevent shoulder surfing.Submit 7. What is blagging (pretexting) in the context of social engineering?Installing malware to steal sensitive dataDeceiving individuals by pretending to be someone elseUsing encryption to secure communicationsRedirecting users to fake websitesBlagging involves manipulating individuals by pretending to be someone they trust, such as a service provider or authority figure, to extract sensitive information.Submit 8. Which of the following is a common method used in blagging over the phone?Asking for password resetsPretending to be from a legitimate organization to extract sensitive informationSending fraudulent links via text messageOffering free software downloadsBlagging over the phone often involves impersonating a legitimate organization or service provider to trick individuals into providing confidential information.Submit 9. What is baiting in social engineering?Providing free software to install malware on users' devicesIntercepting users' communications to steal sensitive dataOffering to fix security issues on a user's deviceHacking into servers using brute forceBaiting is a technique where attackers entice individuals with free offers, such as software or storage devices, to trick them into installing malware or compromising their security.Submit 10. Which of the following is an example of a baiting tactic?Offering a free software download that secretly installs malwareUsing public Wi-Fi to intercept passwordsPretending to be a government official to obtain login credentialsSending an email requesting urgent actionBaiting often involves offering free software or downloads that contain hidden malware, tricking users into compromising their own security.Submit"},{"location":"topics/security/03_malware.html","title":"Malware","text":""},{"location":"topics/security/03_malware.html#malware","title":"Malware","text":"<p>Objectives</p> <ul> <li>Define the term \"malware\" and differentiate between various forms of malware, highlighting their potential to harm computer systems, networks, or user data.</li> <li>Explain the characteristics of viruses, including their attachment to host files, methods of spreading, and triggers for activation.</li> <li>Explore the motives behind creating viruses, encompassing profit, political messages, amusement, software vulnerabilities, sabotage, and cyber security exploration.</li> <li>Differentiate between viruses and worms, emphasizing the autonomous replication and rapid spreading capabilities of worms.</li> <li>Define Trojans as a type of malware, emphasizing their deceptive nature and reliance on social engineering tactics.</li> <li>Define spyware and outline its primary goal of secretly monitoring and collecting information without user knowledge.</li> <li>Identify preventive measures against malware, including the use of antivirus and anti-malware software, regular software updates, and the implementation of firewalls.</li> </ul> <p>Malware means malicious software.  Malware refers to any software designed to harm, exploit, or compromise the integrity of computer systems, networks, or user data. Malware comes in various forms, each with its own set of malicious objectives. </p>"},{"location":"topics/security/03_malware.html#virus","title":"Virus","text":"<p>The term was first used back in 1985 (Fred Cohen).  A virus attaches itself to another program file which infects the host computer when the user is tricked into running or opening that file.  Once executed the virus can replicate itself and thus spread through the computer system. </p> <p>In order to be released, or triggered, the virus requires the user to do something such as open a rogue email attachment, run an infected executable etc..</p> <p>There may be many motives for creating a virus e.g. profit (ransomware), sending political messages, amusement, to reveal vulnerabilities in software, sabotage or just to explore cyber security issues.</p> <p>Typical examples of viruses include:</p> <ul> <li>memory-resident virus: installs itself as part of the operating system and sits in RAM;</li> <li>non-memory-resident: when run it scans the system for files to infect, propagates itself to those files and then exits;</li> <li>macro-virus: many programs e.g. Microsoft office, allow macro programs to be written to work inside the main program (MSword document, email/outlook etc), triggered when the user opens the file;</li> <li>boot sector virus: target the Master Boot Record of a hard drive or other storage device;</li> <li>email virus: intentionally use the email system to propagate usually targeting a particular email system (e.g. Microsoft Outlook), harvest addresses, send themselves as attachments and so on.</li> </ul> <p>Viruses can cause havoc and be very expensive to deal with.  Read more about the 10 worst viruses in computer history</p>"},{"location":"topics/security/03_malware.html#worm","title":"Worm","text":"<p>A worm is another kind of malware but differs from a virus in how they spread and they do not attach themselves to host files.  A worm can replicate and spread without requiring any user interaction.  They can propagate rapidly which makes them a significant threat.</p> <p>Worms can access systems by:</p> <ul> <li>Exploiting vulnerabilities in network protocols or software</li> <li>Email attachments</li> <li>Drive-by downloads: a user visits a compromised website and teh worm is automatically downloaded</li> <li>USB drives:  Worms can spread via USB drives and other removable media. If an infected device is connected to a system, the worm may copy itself onto the new device, ready to infect other systems when the device is connected elsewhere.</li> </ul> <p>Once on a system, worms execute autonomously. They don't necessarily need to be triggered by a user action or a specific event to activate and start their propagation.</p> <p>Worms can modify or delete files, inject other malware into the system, replicate itself over and over (recursively) consuming system resources and storage space or overloading network bandwidth.  Worms can steal data, or create a backdoor for hackers to gain control of a computer.</p> <p>Perhaps the most famous worm was Stuxnet (2010) which aimed to sabotage an Iranian power plant and was written to bring down industrialised control systems.  It failed but Stuxnet remains an active threat.  Robert Morris became the first person to be tried and convicted under the 1986 Computer Fraud and Abuse Act following the release of his worm, the Morris worm.</p> <p>Networks of such machines are called botnets and are a common source of junk email (spam).</p> <p>Worms almost always cause some harm to the network if only to consume bandwidth; a virus almost always corrupts files and data on a system.  A worm is usually more contagious than a virus infecting not just local computers but servers and clients on the local computer network.</p> <p>You can minimise risk of worms gaining access to a system via a variety of measures including technical measures, user education, and proactive security practices including:</p> <ul> <li>Use Antivirus and Anti-Malware Software</li> <li>Apply Regular Software Updates and Patches</li> <li>Implement firewalls to monitor and control incoming and outgoing network traffic. </li> <li>Employ email filtering solutions to scan and block emails containing malicious attachments or links and train users to recognize and avoid phishing emails, as they can be a common vector for worm infections.</li> <li>Educate users about safe browsing habits and the risks associated with downloading files or clicking on links from unknown or suspicious sources.</li> <li>Disable unnecessary services, ports, and features to reduce the attack surface of the system.</li> <li>Use device control measures to restrict the use of external devices, such as USB drives, which could introduce worms to the system.</li> <li>Regularly back up critical data and ensure that backup systems are isolated from the main network. In the event of a worm infection, having reliable backups allows for a quicker recovery process.</li> </ul>"},{"location":"topics/security/03_malware.html#trojan","title":"Trojan","text":"<p>A Trojan is short for Trojan Horse, a type of malware that disguises itself as legitimate or desirable software but, in reality, contains malicious code. Unlike viruses or worms, Trojans do not replicate on their own but rely on social engineering tactics to trick users into installing them. </p> <p>Trojans often masquerade as legitimate and trustworthy software to deceive users. They may present themselves as useful applications, games, or files, enticing users to download and install them.</p> <p>Once executed, Trojans typically perform their malicious activities silently without the user's knowledge. Users may believe they are installing a harmless program while, in reality, the Trojan is executing its hidden agenda in the background.</p> <p>Trojans can carry a variety of payloads, enabling them to perform different malicious activities. Common payloads include backdoors for unauthorized access, spyware for data theft, or keyloggers for capturing keystrokes.</p> <p>Trojans do not possess the ability to replicate on their own. Their success relies on social engineering and the user's willingness to install the seemingly harmless software.</p> <p>To prevent against Trojans:</p> <ul> <li>Maintain updated antivirus software to detect and remove Trojans before they can cause harm.</li> <li>Exercise caution when downloading and installing software, especially from untrusted sources. Verify the legitimacy of applications before installation.</li> <li>Keep operating systems, software, and security applications up-to-date to patch vulnerabilities that Trojans may exploit.</li> <li>Provide user education and awareness training to recognize phishing attempts and avoid falling victim to social engineering tactics.</li> <li>Implement firewalls and intrusion detection systems to monitor and block malicious network traffic associated with Trojans.</li> </ul>"},{"location":"topics/security/03_malware.html#spyware","title":"Spyware","text":"<p>Spyware is designed to secretly monitor and collect information about a user's activities, without their knowledge or consent. It can capture keystrokes, log browsing history, record login credentials, and gather sensitive personal information.</p> <p>The primary goal of spyware is to obtain valuable data for malicious purposes, such as identity theft, financial fraud, or unauthorized surveillance. Unlike viruses, worms, or Trojans, spyware is not typically associated with directly damaging or replicating itself.</p> <p>To protect against spyware, users often use dedicated anti-spyware or anti-malware software that can detect and remove these types of threats. Users are advised to practice safe browsing habits, avoid clicking on suspicious links, refrain from downloading software from untrustworthy sources, and regularly update their security software.</p>"},{"location":"topics/security/03_malware.html#questions","title":"Questions","text":"1. What is malware primarily designed to do?Improve the performance of a computer systemProtect sensitive informationHarm, exploit, or compromise the integrity of systems or dataEnhance user experience by providing useful softwareMalware is designed to harm, exploit, or compromise systems, networks, or user data.Submit 2. How does a virus typically spread and infect a computer?By attaching to host files and being triggered by user actionsBy exploiting network vulnerabilities and spreading autonomouslyBy tricking users into downloading legitimate softwareBy passively collecting user data without any interactionA virus attaches to host files and requires a user to execute it, spreading through the infected system.Submit 3. Which of the following best describes a worm?A malicious program that requires user action to spreadA type of malware that autonomously replicates and spreadsA form of social engineering disguised as legitimate softwareA program that monitors user activity in secretA worm can replicate and spread without user interaction, making it more autonomous than a virus.Submit 4. What is the primary goal of spyware?To damage system filesTo secretly monitor and collect information about usersTo encrypt files for ransomTo spread itself across networksSpyware is designed to monitor and collect information about user activities without their knowledge.Submit 5. Which malware type does NOT replicate on its own and relies on social engineering tactics?VirusWormTrojanSpywareTrojans rely on social engineering to trick users into installing them and do not replicate on their own.Submit 6. What was the primary purpose of the Stuxnet worm?To steal financial dataTo disrupt an Iranian power plantTo send spam emailsTo collect sensitive information for espionageStuxnet was designed to sabotage industrial control systems at an Iranian power plant.Submit 7. Which of the following is NOT a type of virus?Memory-resident virusNon-memory-resident virusMacro-virusDrive-by virusThe term 'Drive-by virus' does not exist. The correct term is 'Drive-by download,' which is associated with worms.Submit 8. How does a worm typically enter a system?Through a phishing email requiring user actionBy exploiting software vulnerabilities to spread autonomouslyBy users manually installing it from a suspicious websiteThrough physical access to the deviceWorms often exploit software vulnerabilities or network protocols to spread without requiring user action.Submit 9. What is a key difference between a virus and a worm?Viruses replicate on their own, while worms need user actionWorms replicate autonomously, while viruses need user action to triggerWorms always delete files, while viruses only replicateViruses only spread through email, while worms spread through USB drivesWorms replicate and spread autonomously, whereas viruses need a user action to activate and spread.Submit 10. Which of the following is a common method to protect against Trojans?Keep antivirus software up-to-dateDisable email attachmentsAvoid using USB devicesRegularly change the system passwordsUp-to-date antivirus software helps detect and block Trojans before they can cause harm.Submit"},{"location":"topics/security/04_network_security.html","title":"Network Security","text":""},{"location":"topics/security/04_network_security.html#network-security","title":"Network Security","text":"<p>Objectives</p> <ul> <li>Recognize the significance of safeguarding data integrity, confidentiality, and availability in both organizational and home local area networks (LANs).</li> <li>Define authentication and its role in verifying the identity of users, systems, or devices.</li> <li>Examine the use of biometric authentication methods, such as fingerprint and retina scans.</li> <li>Understand the role of smart cards and tokens as physical devices for enhancing security.</li> <li>Define encryption and its purpose in securing data during transmission or storage.</li> <li>Understand the purpose of firewalls in network security.</li> <li>Understand MAC address filtering as a method for controlling network access.</li> <li>Identify encryption protocols, such as SSL/TLS, used for securing communication over computer networks.</li> <li>Recognize the role of VPNs in creating secure communication channels over public networks.</li> </ul> <p>Your organisation, and home, have a local area network with connection to the Internet.  It's really important to safeguard the integrity, confidentiality, and availability of your data and to ensure the smooth running of an organization that only those with authority to connect to your network are able to do so.  They may be operating in the building inside your LAN but might also be working remotely. Implementing a comprehensive network security strategy involving authentication, encryption, firewalls, and other measures is vital for mitigating cyber threats and protecting valuable assets.  This section will consider each of these.</p> <p>We're considering a number of different problems:</p> <ul> <li>Prevent unauthorised access to our network and devices connected to that network</li> <li>Protect our data to prevent it being stolen especially personal or commercially sensitive data</li> <li>Prevent cyber attacks by nation states or other groups that can potentially disrupt national or local infrastructure and institutions</li> <li>Ensure our organisation is acting according to the laws of the country, compliance</li> <li>Prevent eavesdropping on communication</li> </ul>"},{"location":"topics/security/04_network_security.html#authentication","title":"Authentication","text":"<p>Authentication is the process of verifying the identity of a user, system, or device before allowing access to a network or system. It ensures that only authorized individuals or systems can access the resources.  Unauthorized access to a network can lead to data breaches, unauthorized modifications, or misuse of resources. Authentication helps in preventing these security risks by confirming the identity of users or devices.</p> <p>When considering authentication we might consider using:</p> <ul> <li>something only that person knows e.g. a username and password combination</li> <li>something only that person has in their possession e.g. their phone, or a smart card</li> <li>something only that person has physically e.g. their fingerprint or retina</li> </ul> <p>The most common method is for person to have a unique username and password (and ensuring they adhere to the organisation's policy on using strong, unique passwords).  Additionally, multi factor authentication (MFA) can be used such as a one-time code sent to their mobile phone or other device i.e. something only they will (should) have in their possession.</p> <p>Biometric authentication is beginning to be widely available, frequently built in as a standard in many mobile phones and laptop computers.  Retina scans and facial recognition are also being made available.  These are secure and convenient, a user is unlikely to forget their fingerprint!  However, organisations have to treat such data  with extra care and protection to prevent unauthorized access or misuse.</p> <p></p> <p>Smart cards and tokens are physical devices that users carry with them. They are an extension of MFA.  Smart cards may contain embedded chips, while tokens generate one-time passwords or codes. These devices add an additional layer of security. Smart cards can be combined with a PIN, and tokens can provide dynamic authentication codes, reducing the risk of unauthorized access even if credentials are compromised.</p> <p>A smart card is a credit card-sized plastic card with an embedded microprocessor chip. The chip can store and process data, making it more secure than traditional magnetic stripe cards.  Users insert the smart card into a card reader, and the embedded chip communicates with the system to verify the user's identity. Typically, a Personal Identification Number (PIN) is also required for authentication.  Combining the smart card with a PIN or biometric authentication provides multi-factor authentication, enhancing overall security.</p> <p></p> <p>A token is a physical or virtual device that generates one-time passwords (OTPs) or authentication codes. These codes are used to authenticate a user during the login process.  These tokens might be physical devices that users carry, that generate OTPs based on a time-sensitive algorithm or a software-based solution that generate OTPs on a user's device.</p> <p>Tokens can be used in various scenarios, including remote access, online banking, and secure transactions.</p>"},{"location":"topics/security/04_network_security.html#encryption","title":"Encryption","text":"<p>Encryption involves converting readable data, the plaintext, into a secure format, the ciphertext, using algorithms, making it unreadable without the appropriate decryption key. It protects the confidentiality of data during transmission or storage.  In the absence of encryption, sensitive information can be intercepted and accessed by unauthorized parties during data transfer. Encryption ensures that even if data is intercepted, it remains unreadable without the proper decryption key, enhancing data security.</p> <p>Over the centuries many different encryption algorithms have been implemented.  In programming classes you might have been introduced to this idea with algorithms such as the Caesar Cipher or Vigenere Cipher.  As each algorithm has been \"cracked\" more elaborate and complex algorithms have taken their place.  Given enough time and computational power all encryption algorithms can be cracked but </p> <p>In modern encryption there are two techniques:</p> <ul> <li>Symmetric Encryption: a single key is used for both encryption and decryption. The same key must be shared between the communicating parties.  It is simple and efficient but the challenge is how to share that key with both parties securely.  (If you want to read more about the key distribution problem then read here.)</li> <li>Asymmetric Encryption (Public Key Cryptography): Asymmetric encryption uses a pair of keys \u2013 a public key for encryption and a private key for decryption. The public key is widely distributed, while the private key is kept secret.  This is very secure though computationally more intensive than symmetric encryption.</li> </ul> <p>Hash functions are often used in combination with encryption to ensure data integrity. Digital signatures are an example where a hash of the data is signed using a private key to verify the sender's identity.</p> <p>Some applications will also implement encryption protocols for the transfer of data e.g. Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that secure communication over a computer network. They use asymmetric encryption during the initial handshake to establish a secure channel, and symmetric encryption for the actual data transfer. Web browsers use SSL/TLS to encrypt data during online transactions, ensuring the confidentiality of sensitive information like credit card details.  Check for the padlock symbol in the address bar of the web browser.</p> <p>A Virtual Private Network (VPNs) uses encryption to create a secure and private communication channel over a public network, such as the internet. This protects data as it travels between the user's device and the VPN server.</p> <p>Wireless Encryption (WPA/WPA2/WPA3) Encryption protocols such as WPA (Wi-Fi Protected Access) and its iterations WPA2 and WPA3 are used to secure wireless network communication. These protocols protect Wi-Fi networks from unauthorized access and eavesdropping, ensuring that only authorized users can connect and communicate securely.</p> <p>Email Encryption: ensures the confidentiality of email messages by encrypting their content, preventing unauthorized access during transmission. Organizations, especially in sectors handling sensitive information, may use email encryption to protect the content of their communications.</p>"},{"location":"topics/security/04_network_security.html#firewall","title":"Firewall","text":"<p>A firewall is a network security device that monitors and controls incoming and outgoing network traffic based on predetermined security rules. It acts as a barrier between a trusted internal network and untrusted external networks (such as the internet).  The Firewall prevents unauthorized access to a network by filtering out malicious traffic, blocking unauthorized access attempts, and helping to detect and mitigate security threats. They are crucial for protecting networks from various cyber threats, including malware, hacking attempts, and other malicious activities.</p> <p></p> <p>There are different types of firewalls:</p> <ul> <li>Packet Filtering Firewalls: A packet filtering firewalls inspect packets of data and make decisions to allow or block them based on predefined rules, such as IP addresses, port numbers, and protocols. This is the most basic form of firewall and is effective for simple rule-based access control.</li> <li>Stateful Inspection Firewalls: Stateful inspection firewalls keep track of the state of active connections and make decisions based on the context of the traffic, ensuring that only legitimate connections are allowed.  It is more advanced than packet filtering, providing a higher level of security by considering the state of the connection.</li> <li>Proxy Firewalls: Proxy firewalls act as intermediaries between internal and external networks. They handle requests on behalf of clients and forward the results back to the clients, effectively isolating internal systems from direct external access.  The proxy firewall enhances security by masking internal IP addresses and adding an additional layer of control over the communication between internal and external networks.</li> </ul> <p>Firewalls play a crucial role in protecting the network from various cyber threats, including malware, viruses, and intrusion attempts. They can block known malicious IP addresses, patterns, or behaviors. Some firewalls include intrusion prevention systems (IPS) that actively monitor network traffic for signs of malicious activity and take preventive action to block or mitigate threats.</p> <p>Firewalls generate logs of network activity, which are valuable for monitoring and analyzing potential security incidents. They provide visibility into traffic patterns and help identify anomalies or suspicious behavior.</p> <p>Firewalls with content filtering capabilities can block access to specific websites, applications, or content categories. This helps enforce acceptable use policies and protect against threats originating from malicious websites.</p> <p>Firewalls often support Virtual Private Network (VPN) functionality, allowing secure communication over untrusted networks. This is essential for remote access and secure communication between geographically dispersed locations, ideal for students want to access the college network from home.</p>"},{"location":"topics/security/04_network_security.html#mac-address-filtering","title":"MAC Address Filtering","text":"<p>MAC address filtering is a network security method that involves controlling access to a network based on the Media Access Control (MAC) addresses of devices. A MAC address is a unique identifier assigned to network interfaces for communication on a network. MAC address filtering allows or denies network access to devices based on their MAC addresses. </p> <p>Every network-enabled device, such as computers, smartphones, and networked peripherals, has a unique MAC address assigned to its network interface card (NIC) or wireless interface. The network administrator can configure the router or network access point to maintain a list of permitted or denied MAC addresses. This list is often referred to as an Access Control List (ACL) or MAC address whitelist/blacklist. The filtering rules specified in the ACL determines whether a device is permitted or blocked based on its MAC address. When a device attempts to connect to the network, the router or access point checks the MAC address against the ACL. If the MAC address is on the whitelist, access is granted; if it's on the blacklist, access is denied.</p> <p>MAC address filtering is commonly used as a supplementary method of controlling access to a network. It helps ensure that only devices with specific MAC addresses are allowed to connect.  In scenarios where organizations provide guest Wi-Fi access, MAC address filtering can be used to restrict guest devices' access to only the internet while preventing them from accessing internal resources.</p> <p>While MAC address filtering adds an additional layer of access control, it's not foolproof. Skilled attackers can spoof MAC addresses or use MAC addresses from permitted devices, making it important to use MAC address filtering in conjunction with other security measures.</p> <p>Managing MAC address filtering can become administratively challenging as the number of devices on the network grows. Regular updates to the ACL are necessary to accommodate changes in the network.</p>"},{"location":"topics/security/04_network_security.html#questions","title":"Questions","text":"1. What are the three main goals of safeguarding data in a network?Confidentiality, integrity, and availabilityEncryption, authentication, and authorizationFirewall protection, antivirus, and encryptionBiometrics, tokens, and smart cardsThe primary goals of network security are ensuring data confidentiality, integrity, and availability to protect against unauthorized access and maintain operational continuity.Submit 2. Which of the following describes multi-factor authentication (MFA)?Using a password and username combinationRequiring multiple forms of verification, such as a password and a one-time codeEncrypting data with both symmetric and asymmetric keysRestricting access based on IP addressesMFA enhances security by requiring more than one method of authentication, such as something you know (password) and something you have (one-time code).Submit 3. What is the main challenge associated with symmetric encryption?It is too slow for real-time communicationsThe encryption key must be securely shared between partiesIt cannot be used for long-term data storageIt does not ensure data confidentialityThe primary issue with symmetric encryption is securely sharing the key between the communicating parties, as both need the same key for encryption and decryption.Submit 4. How do smart cards improve network security?By encrypting network trafficBy storing user credentials on a physical deviceBy filtering unauthorized network packetsBy generating one-time passwordsSmart cards are physical devices that store user credentials, providing an extra layer of authentication, especially when combined with a PIN or biometric factor.Submit 5. Which of the following describes the main purpose of a firewall?Encrypting data transmissionsBlocking unauthorized access based on security rulesMonitoring all network traffic for security threatsStoring login credentials securelyA firewall acts as a barrier between trusted and untrusted networks, filtering incoming and outgoing traffic based on predefined security rules.Submit 6. What is the primary difference between symmetric and asymmetric encryption?Symmetric encryption uses two keys, while asymmetric uses oneSymmetric encryption uses one key, while asymmetric uses a public and private key pairSymmetric encryption is only used for emails, while asymmetric encryption is for VPNsSymmetric encryption is faster than asymmetric encryption for large datasetsSymmetric encryption uses a single key for both encryption and decryption, while asymmetric encryption relies on a pair of public and private keys.Submit 7. Which encryption protocol is commonly used to secure communication over the internet?TLS/SSLWPA2MFAAESTLS (Transport Layer Security) and SSL (Secure Sockets Layer) are cryptographic protocols used to secure communication over computer networks, especially for online transactions.Submit 8. Which method is used to restrict access to a network based on device identifiers?MAC address filteringFirewall rulesToken authenticationAsymmetric encryptionMAC address filtering controls access to a network by allowing or denying devices based on their unique MAC address, which is assigned to their network interface.Submit 9. How does biometric authentication enhance security?It allows users to log in with a strong passwordIt relies on unique physical characteristics that are difficult to replicateIt generates a one-time code for authenticationIt filters out network traffic from unauthorized devicesBiometric authentication uses unique physical characteristics, such as fingerprints or retina scans, which are difficult to replicate, providing a secure method of authentication.Submit 10. Which of the following describes a stateful inspection firewall?It inspects each packet based on predefined rules onlyIt keeps track of the state of active connections and inspects traffic in contextIt handles requests on behalf of the client and forwards resultsIt encrypts data passing through the networkA stateful inspection firewall monitors the state of active connections and allows or blocks traffic based on the context, providing enhanced security compared to simple packet filtering.Submit"},{"location":"topics/system/index.html","title":"Systems Architecture","text":""},{"location":"topics/system/index.html#systems-architecture","title":"Systems Architecture","text":"<p>Slide deck</p>"},{"location":"topics/system/index.html#overview","title":"Overview","text":"<p>This module provides a straightforward exploration of the foundational concepts in computing. We'll begin by defining key terms such as hardware, software, and computer systems. From there, we'll delve into system software and application software, understanding the roles of operating systems and utility software.</p> <p>Moving on to programming languages, we'll clarify what they are and differentiate between low-level and high-level languages. The discussion will touch upon machine code and assembly language as low-level languages, and we'll explore the functions of programming translators like assemblers, compilers, and interpreters.</p> <p>The module also covers the hardware components found inside a computer system, including the motherboard, CPU, graphics card, and others. We'll then focus on the CPU's role, breaking down its main functions and understanding performance factors such as clock speed, processor cores, and cache size, along with the Fetch-Decode-Execute Cycle.</p> <p>Memory will be examined, distinguishing between volatile and non-volatile memory, explaining the purpose of RAM, and discussing its impact on a computer's performance. We'll also cover virtual memory and cache memory.</p> <p>Lastly, the module concludes with an exploration of secondary storage, covering types such as optical, magnetic, and solid-state storage. We'll analyze the characteristics and applications of each type, considering factors like capacity, speed, portability, durability, reliability, and cost, to make informed recommendations for specific applications.</p> <p>Notice</p> <p>Using a textbook or internet search engine, look up each of the terms highlighted above and write a 1-2 sentence description/definition of each.</p>"},{"location":"topics/system/01_software.html","title":"Software","text":""},{"location":"topics/system/01_software.html#software","title":"Software","text":"<p>Objectives</p> <ul> <li>Explain what the terms hardware, software and computer system mean</li> <li>Explain what system software and application software are</li> <li>Explain the purpose of the operating system</li> <li>Explain the purpose of utility software</li> </ul> <p>We hear the term system applied to many different situations e.g. an education system, a political system, the digestive system and here a computer system.</p> <p>The goal of any such system is to organize and manage things to make them work together smoothly. It's like a set of rules or a plan that helps different parts or components work together to achieve a common goal. For an education system we have teachers, students, classrooms and school rules.  Each part making their own distinct contribution to an agreed outcome - learning.  A political system aims to ensure a country is well organised and structures and additional internal systems work well together according to the laws and institutions of that country.</p> <p>Your computer or smartphone is a system too. It has hardware (like the physical parts of your device) and software (like the apps and operating system). The system is designed so that when you click on an icon, the right program opens, and everything runs smoothly.  </p> <p>In each example, a system is like a well-thought-out plan that makes sure everything works together efficiently. It's about organizing and coordinating different elements to achieve a specific purpose or goal.  </p> <p>Our purpose in this section is to describe and define some of these fundamental elements that make up a computer system.</p>"},{"location":"topics/system/01_software.html#a-computer-system","title":"A Computer System","text":"<p>Conventionally we describe a computer system as consisting (at a high level) of three elements:</p> <ul> <li>Input</li> <li>Process</li> <li>Output</li> </ul> <p></p> <p>We think of the input elements as things like the keyboard or mouse, and outputs like the screen or printer.  The computer itself being responsible for processing those inputs and delivering the output.  This is, of course, highly simplified.  the smartphone is a powerful computer.  Here the screen acts as both an input and an output device but it's important to distinguish the functionality.</p> <p>Every computer system comprises both hardware and software. The hardware is essential, but without software, it serves little purpose. Likewise, the software needs hardware to run on.</p>"},{"location":"topics/system/01_software.html#hardware","title":"Hardware","text":"<p>The hardware of any computer system are the physical components.  They are tangible, touchable, we can see them and interact with them.  They include the processor (CPU), memory (RAM), storage devices such as hard drives or solid state drives (SSD).  Also input devices such as a keyboard, a mouse or a microphone and output devices such as a screen, a printer or speakers.</p>"},{"location":"topics/system/01_software.html#software_1","title":"Software","text":"<p>The software of any computer system refers to the programs, instructions, and data that make the computer system function. Unlike hardware, which consists of physical components, software is intangible, we cannot touch it, and consists of code or instructions that tell the computer what to do.</p> <p>Software includes operating systems (like Windows, macOS, or Linux), application software (such as word processors, web browsers, and games), and system software that manages and controls the computer's hardware components. It encompasses a wide range of programs and code that enable the computer to perform specific tasks and execute various functions. </p> <p>Software is the virtual, non-physical part of a computer system that makes the hardware operate and perform specific functions.</p>"},{"location":"topics/system/01_software.html#types-of-software","title":"Types of software","text":"<p>Software can be broadly classified into two categories:</p> <ul> <li>Application software</li> <li>System software</li> </ul> <p>System software can be classified into two further categories:</p> <ul> <li>Operating system software</li> <li>Utility software</li> </ul> <p></p>"},{"location":"topics/system/01_software.html#application-software","title":"Application Software:","text":"<p>Application software is designed for the end-users and specific tasks. It's the software that allows users to perform various functions and tasks on a computer. </p> <p>Examples of application software include, amongst many other:</p> <ul> <li>Word Processors: Microsoft Word, Google Docs, and WordPad are examples. They are used for creating, editing, and formatting documents.</li> <li>Web Browsers: Examples include Google Chrome, Mozilla Firefox, and Microsoft Edge. These applications allow users to access and interact with content on the internet.</li> <li>Media Players: Software like VLC Media Player, Windows Media Player, or iTunes fall into this category. They are used to play audio and video files.</li> <li>Graphic Design Software: Adobe Photoshop, CorelDRAW, and GIMP are examples. They are used for creating and editing images and graphics.</li> </ul> <p>All such application software will run, and may interact with, the underlying operating system in order to interact with the hardware.</p>"},{"location":"topics/system/01_software.html#system-software","title":"System Software","text":"<p>System software is a type of software that provides a platform for other software to run on and interacts directly with the computer hardware. It manages and controls the overall operation of the computer system. </p> <p>Examples of system software include:</p> <ol> <li> <p>Operating Systems (OS): The central part of any computer system software.  Examples include Microsoft Windows, macOS, and Linux. These software systems manage hardware resources, provide user interfaces, and facilitate communication between software applications and the computer hardware.  Any computer system is a collection of different resources.  The CPU, memory, storage devices and file systems etc are examples of resources and it is the role of the operating system to manage these disparate resources and present them in a usable form to the end-user.</p> </li> <li> <p>Device Drivers: These are programs that allow the operating system to communicate with and control specific hardware devices, such as printers, graphics cards, or network adapters <sup>1</sup>.</p> </li> <li> <p>Utilities: These are tools that perform specific tasks related to system management and maintenance, such as disk cleanup utilities or antivirus software.</p> </li> </ol>"},{"location":"topics/system/01_software.html#role-of-an-operating-system","title":"Role of an operating system","text":"<p>There are four primary functions for all operating systems whether they be for desktop computers, laptops, tablets, smartphones etc:</p> <ul> <li>Manage resources: Operating systems manage computer hardware resources efficiently, ensuring that multiple programs and processes can run concurrently without conflicts.</li> <li>Provide a user interface: The OS provides a user-friendly interface for users to interact with the computer, enabling them to execute programs, manage files, and control system settings.</li> <li>Hardware Abstraction: The OS hides complex hardware details, providing a standardized interface for software applications. This abstraction allows programs to run on various hardware configurations.</li> <li>Security: Operating systems implement security features to protect the system and data from unauthorized access, viruses, and other threats.</li> </ul>"},{"location":"topics/system/01_software.html#management-of-resources","title":"Management of resources","text":"<ul> <li>Processor Management: Allocation of CPU time to different programs and processes; manages task scheduling to ensure fair and efficient use of the processor.</li> <li>Memory Management: Allocation and deallocation of memory for programs and processes; handles virtual memory, allowing the use of disk space as an extension of RAM.</li> <li>Input/Output (I/O) Management: Manages communication between the computer and external devices like keyboards, printers, and storage devices; handles data transfer between the CPU and peripherals.</li> <li>Application Management: Coordinates the execution of software applications, managing their loading, execution, and termination; provides an environment for applications to run smoothly.</li> <li>Security and Access Control: Implements user authentication and access control mechanisms; ensures data and system security through user permissions and encryption.</li> </ul>"},{"location":"topics/system/01_software.html#provide-a-user-interface","title":"Provide a user interface","text":"<p>The user interface (UI) is a crucial aspect of the operating system (OS) that serves as the bridge between the computer's complex functionalities and the user's need for simplicity and ease of use. The OS offers a user-friendly interface to ensure that individuals, regardless of their technical expertise, can effectively interact with and harness the power of the computer system.</p> <p>Most computer systems provide a Graphical User Interface (GUI) employing elements such as icons, windows, menus, and buttons. This visual representation simplifies complex operations, allowing users to perform tasks intuitively.</p> <p>Alongside the GUI the OS will also provide a Command Line Interface (CLI).  A text-based method of interacting with a computer or software, where users input commands through a terminal or command prompt. In a CLI, users type specific commands to perform tasks, navigate the file system, execute programs, and configure system settings. Unlike graphical user interfaces (GUIs) that use visual elements like icons and buttons, CLIs rely on text-based commands and responses, providing a more direct and efficient way for experienced users to control and manage a computer system.</p> <p>The operating system interface will also include accessibility features to cater to users with diverse needs such as screen readers for the visually impaired, magnification options, and keyboard shortcuts for individuals with motor impairments.</p> <p>Other features will include:</p> <ul> <li>Through the user interface, users can seamlessly launch and manage various software applications. Icons or shortcuts represent programs, providing a convenient way for users to access and execute them.</li> <li>The user interface facilitates file management by presenting a file explorer or file manager. Users can navigate through directories, create folders, copy, paste, and delete files with simple interactions, making the organization of digital content straightforward.</li> <li>Adjusting system settings is made accessible through the user interface. Users can customize preferences related to display settings, sound configurations, network connections, and more. This empowers individuals to tailor the computing environment according to their preferences.</li> <li>The interface supports multitasking by allowing users to run multiple applications simultaneously. Window management features enable users to switch between open programs, minimize or maximize windows, and organize their workspace efficiently.</li> <li>Modern operating systems incorporate notification systems that keep users informed about updates, messages, and system alerts. These notifications are often presented in a non-intrusive manner, ensuring users stay informed without being overwhelmed.</li> <li>Search functionalities within the interface enable users to quickly locate files, applications, or settings. This is particularly useful as storage systems become larger and more complex.</li> </ul> <p>By providing a user interface that is both intuitive and visually appealing, the operating system enhances the overall user experience, making computing accessible to a broad audience. This emphasis on user-friendly design ensures that individuals can harness the full potential of their computer systems without being hindered by technical complexities.</p>"},{"location":"topics/system/01_software.html#utility-software","title":"Utility Software","text":"<p>Utility software includes tools that perform specific tasks related to system management and maintenance. For example:</p> <ul> <li>Disk Cleanup Utilities: Remove unnecessary files and free up disk space</li> <li>Antivirus Software: Detect and remove malware, viruses, and other security threats.</li> <li>Backup and Recovery Tools: Create copies of important data for safeguarding against data loss.</li> <li>Disk Defragmenters: Rearrange fragmented data on a disk to improve performance.</li> <li>System Monitoring Tools: Monitor system performance, resource usage, and troubleshoot issues.</li> </ul>"},{"location":"topics/system/01_software.html#questions","title":"Questions","text":"1. According to the text, what are the three high-level elements that a computer system conventionally consists of?Hardware, software, and usersInput, process, and outputCPU, memory, and storageOperating system, applications, and utilitiesA computer system is conventionally described as consisting of input, process, and output.Submit 2. What is the correct definition of hardware in a computer system?Programs and instructions that make the computer functionThe virtual, non-physical part of a computer systemPhysical components that are tangible and interactableSoftware that manages hardware resourcesHardware refers to the physical components of a computer system that are tangible and can be touched.Submit 3. Which of the following is an example of application software?Operating systems like Windows or macOSDevice drivers for hardware componentsMicrosoft Word or Google DocsAntivirus softwareMicrosoft Word and Google Docs are examples of application software designed for end-users to perform specific tasks.Submit 4. What is the primary purpose of system software?To perform specific user-oriented tasksTo manage and control computer hardware componentsTo create and edit documents and spreadsheetsTo provide entertainment through games and mediaSystem software manages and controls the computer's hardware components and provides a platform for other software to run.Submit 5. Which of the following is NOT a primary function of an operating system?Manage resourcesProvide a user interfaceCompile code into executable programsImplement security featuresCompiling code into executable programs is not a primary function of an operating system.Submit 6. Which of the following best describes utility software?Software designed for end-users to perform specific tasksTools that perform system management and maintenance tasksSoftware that directly interacts with hardware devicesPrograms that provide a user interface for the operating systemUtility software includes tools that perform specific tasks related to system management and maintenance.Submit 7. What role does the operating system play in hardware abstraction?It directly controls hardware without any abstractionIt hides complex hardware details, providing a standardized interfaceIt replaces the need for hardware in a computer systemIt makes hardware components visible and accessible to usersThe OS abstracts complex hardware details, providing a standardized interface for software applications.Submit 8. Which of the following is NOT an example of resource management by an operating system?Allocating CPU time to processesManaging virtual memoryExecuting user application code directlyHandling data transfer between CPU and peripheralsExecuting user application code is the role of applications, not resource management by the OS.Submit 9. What is the difference between system software and application software?System software is tangible, while application software is intangibleSystem software manages hardware resources; application software performs specific user tasksSystem software is user-oriented; application software is hardware-orientedThere is no difference; they are the sameSystem software manages hardware resources and provides a platform for applications, while application software performs specific user tasks.Submit 10. Which of the following is an example of a command line interface (CLI) provided by an operating system?Windows File ExplorerMicrosoft WordTerminal or Command PromptWeb BrowserTerminal or Command Prompt is a text-based method for interacting with the operating system via a command line interface.Submit <ol> <li> <p>Device drivers are rarely required for a GCSE syllabus but always worth being aware of their role in bridging between different hardware devices.\u00a0\u21a9</p> </li> </ol>"},{"location":"topics/system/02_programming_languages.html","title":"Programming Languages","text":""},{"location":"topics/system/02_programming_languages.html#programming-languages","title":"Programming Languages","text":"<p>Objectives</p> <ul> <li>Define a programming language and explain their role software development.</li> <li>Differentiate between low-level and high-level programming languages.</li> <li>Compare and contrast high level and low level programming languages</li> <li>Define machine code and assembly language as low-level languages.</li> <li>Describe the role of programming translators (assembler, compiler and interpreter)</li> </ul>"},{"location":"topics/system/02_programming_languages.html#what-is-a-computer-program","title":"What is a computer program?","text":"<p>A computer program is a set of instructions compiled together in a file to perform some specific task by the CPU (Central Processing Unit). For the machine is is a series of binary numbers (0s and 1s) arranged in a sequence, for the programmer it is a series of instructions written in their chosen programming language.</p> <p></p> <p>To write a computer program we need to use a programming language.  It's an artificial, formal, language that uses a set of statements and rules that provide the instructions for the computer to follow.  There are many different programming languages.  Some designed to solve the needs of particular applications e.g. web development, games, artificial intelligence etc; some to keep pace with the changing needs of technology e.g. mobile applications; or data science applications whilst others may be purely experimental.  Each of these can be broadly categorised as being either:</p> <ul> <li>low level language</li> <li>high level language</li> </ul> <p>Ultimately the computer can only interpret and execute instructions in its on native language, that is binary or machine code.  So, the instructions we write in our chosen programming language have to be converted into the machine code for our target processor.</p> <p>This section explores the difference  between high level and low level languages and the tools we need to convert those languages nto machine code.</p>"},{"location":"topics/system/02_programming_languages.html#low-level-languages","title":"Low level languages","text":""},{"location":"topics/system/02_programming_languages.html#machine-code","title":"Machine code","text":"<p>The computer's native language is binary code, or machine code, that is the series of 0s and 1s.  The earliest computers had to programmed using binary.  </p> <p>A typical instruction might be e.g. '1011111100110101' which to us looks completely meaningless!  Imagine trying to write a program using just binary.  it wold be very time-consuming and so easy to make mistakes.  It's not easy to tell the different between '1011111100110101' and '1011101100110101' but they be instructing the computer to do quite different things.</p> <p>Also the computer we're writing a program for will have its own interpretation of what that instruction might be.  the CPU has its own instruction set so for one CPU the instruction '1011111100110101' might be to add two values together but for another it might be to store a value in memory.  Programs we write for one processor will not run on a different processor with a different instruction set.</p> <p>Clearly, writing programs in raw binary machine code is to be avoided.</p>"},{"location":"topics/system/02_programming_languages.html#assembly-language","title":"Assembly language","text":"<p>A step 'up' from machine code is assembly language.  Here we take a machine code instruction, such as '1011111100110101', and create a shorthand for that instruction e.g. <code>LDA #5</code>.  We would read this as \"Load the accumulator with the value 5\".  The mnemonic <code>LDA</code> means \"load the accumulator\" and <code>#5</code> means the actual integer value 5.</p> <p>It's certainly easier that having to struggle with the binary code but assembly language is still processor specific so still tied to the underlying architecture of the computer.  It remains a time-consuming exercise to write even the simplest of programs using assembly language.</p> <p>Having written our assembly language program we then need to convert it into the underlying machine code and for that we use a tool called an assembler.  Each line of an assembly language program is converted into a single machine code instruction.</p> <p>For example, here is an assembly language program (for an Arm processor) that checks if a value is even or odd:</p> <pre><code>.text\n.global main\n\nmain:\n    mov r0, #23             @ 1, immediate value\n    and r1, r0, #1                  @ Perform a logical AND on the value\n    cmp r1, #1              @ did that set the LSB to 1?\n    blt _isEven             @ branch to the ELSE part\n_isOdd:\n    mov r0, #1              @ value is odd, so print the string\n    ldr r1, =oddStr\n    mov r2, #15\n    mov r7, #4\n    svc 0\n    b _exit                 @ jump over the isEven section and exit\n_isEven:\n    mov r0, #1              @ value is even, so print the string\n    ldr r1, =evenStr\n    mov r2, #15\n    mov r7, #4\n    svc 0\n_exit:\n    mov r0, #0              @ exit gracefully\n    mov r7, #1\n    svc 0\n\n.data\noddStr:   .asciz    \"Number is odd\\n\"\nevenStr:  .asciz    \"Number is even\\n\"\n</code></pre> <p>The assembly language mnemonics are easier to work with than the machine code but it is still a time consuming process.</p> <p>The resulting machine code for this file is seen below.  The second column is the binary instruction, written as hexadecimal, showing how one assembly language instruction maps to one machine code instruction (in the third column):</p> <pre><code>even.o:     file format elf32-littlearm\n\n\nDisassembly of section .text:\n\n00000000 &lt;main&gt;:\n   0:   e3a00017    mov r0, #23\n   4:   e2001001    and r1, r0, #1\n   8:   e3510001    cmp r1, #1\n   c:   ba000005    blt 28 &lt;_isEven&gt;\n\n00000010 &lt;_isOdd&gt;:\n  10:   e3a00001    mov r0, #1\n  14:   e59f102c    ldr r1, [pc, #44]   @ 48 &lt;_exit+0xc&gt;\n  18:   e3a0200f    mov r2, #15\n  1c:   e3a07004    mov r7, #4\n  20:   ef000000    svc 0x00000000\n  24:   ea000004    b   3c &lt;_exit&gt;\n\n00000028 &lt;_isEven&gt;:\n  28:   e3a00001    mov r0, #1\n  2c:   e59f1018    ldr r1, [pc, #24]   @ 4c &lt;_exit+0x10&gt;\n  30:   e3a0200f    mov r2, #15\n  34:   e3a07004    mov r7, #4\n  38:   ef000000    svc 0x00000000\n\n0000003c &lt;_exit&gt;:\n  3c:   e3a00000    mov r0, #0\n  40:   e3a07001    mov r7, #1\n  44:   ef000000    svc 0x00000000\n  48:   00000000    .word   0x00000000\n  4c:   0000000f    .word   0x0000000f\n  ```\n\n## High Level languages\n\nA high level language is close to a human language, consequently is is easier to read, write and understand.  They are also independent of the processor so code written in a high level language can be executed on different processors and systems.  This means the programmer can focus on the problem to be solved without being concerned about the underlying instruction set for the processor.\n\nWhen we think about learning how to program a computer it will be using one of the many high level programming languages.  Examples include Python, Ruby, Javascript, C#, Java, Lua etc..\n\nOur previous assembly language program of checking whether a given value is odd or even can be written in Python as:\n\n```python\ndef check_odd_or_even(value):\n    if value % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage:\nuser_input = int(input(\"Enter a number: \"))\n\nresult = check_odd_or_even(user_input)\nprint(f\"The given number is {result}.\")\n</code></pre> <p>The high level language syntax allows us to provide sensible names for functions and variables making it easy for the reader to understand what is happening.  It also provides us with constructs such as the <code>if</code> statement on line 2.</p> <p>This code then needs to be translated into machine code to be run on a target computer.  Depending on the language we are using we will need with an interpreter or a compiler.  Both will take the high-level instructions and convert them into machine code.</p>"},{"location":"topics/system/02_programming_languages.html#high-level-vs-low-level","title":"High Level vs Low Level","text":"<p>Low-level languages, like machine code and assembly language, are closely tied to hardware and are less human-readable, while high-level languages offer more abstraction and portability, making them preferred for most programming tasks.  The following table provides a useful summary.</p> High Level Language Low Level Language Programmer friendly Machine friendly Easy to read and understand Hard to read and understand Easy to modify and change Hard to make changes Requires less code for the same task Needs a lot of code for even simple tasks Portable (code can be run on different systems) Non-portable Needs a compiler or interpreter for translation Needs an assembler for translation Less memory efficient Makes better use of limited resources Likely to be slower than low level equivalent Likely to be faster than high level equivalent"},{"location":"topics/system/02_programming_languages.html#program-translators","title":"Program translators","text":"<p>Unless the code you are writing is the machine code you will need to use a tool to convert the code into the target machine code.</p> <p></p>"},{"location":"topics/system/02_programming_languages.html#interpreter","title":"Interpreter","text":"<p>An interpreter is a program that reads and executes code written in a high-level programming language directly, without the need for a separate compilation step. It translates and executes the source code line by line or statement by statement, interpreting the instructions in real-time. Interpreters are commonly associated with languages like Python, JavaScript, Ruby, and Lua.</p> <p>Interpreters do not produce a standalone executable file as they translate in real-time.  Code written in this way is usually platform independent as long as there is an interpreter available for the target platform. This simplifies the distribution of code across different operating systems.</p> <p>If you write a program with Python and want your friend to run this code you would have to send them your code and they would need to have a Python interpreter installed on their computer.  As they have your code they could, if they wished, make changes to your source code and return it back to you.</p>"},{"location":"topics/system/02_programming_languages.html#compiler","title":"Compiler","text":"<p>A compiler takes the high level source code and translates it into machine code producing a separate, stand-alone, executable file.  It has to do this even before the program can be run.  To execute, run, the program we only need the executable file, the source code does not need to be shared.</p> <p>Commercial software will be distributed as compiled machine code.  To run the same code on Windows and MacOS or some other target platform will require a different executable file.</p>"},{"location":"topics/system/02_programming_languages.html#assembler","title":"Assembler","text":"<p>an assembler is used to translate assembly code into machine code instructions.  There is a one-to-one mapping from the assembly language instruction to the associated machine code instruction.  Thus the structure of both are the same.</p>"},{"location":"topics/system/02_programming_languages.html#bytecode","title":"Bytecode","text":"<p>Most contemporary programming languages will use a combination of compilation and interpretation.  To address issues of platform independence the source code is converted into bytecode.  Languages including Python, Java and C# (.NET) follow this principle.  </p> <p>For example Java programs are compiled into an intermediate bytecode, which is platform-independent. The same bytecode can be executed on any system that has a compatible Java Virtual Machine (JVM) installed. This helps in creating \"write once, run anywhere\" (WORA) applications.</p> <p>.NET, developed by Microsoft, also follows a similar approach to address platform independence and portability. The key components in the .NET framework that contribute to this are the Common Intermediate Language (CIL) and the Common Language Runtime (CLR).</p> <p>Also Python. When you run a Python script, the source code is first compiled into this intermediate form called \"bytecode.\" This bytecode is a low-level representation of the source code and is not directly executed by the computer's hardware.</p> <p>The compilation step is performed by the Python interpreter, and the resulting bytecode is stored in files with a .pyc extension (for compiled Python files). The bytecode is platform-independent, allowing Python programs to be executed on different operating systems without modification.</p> <p>During runtime, the Python interpreter reads and executes the bytecode using a virtual machine known as the Python Virtual Machine (PVM). The PVM interprets the bytecode and translates it into machine code that is specific to the underlying hardware, facilitating the execution of Python programs.</p> <p>This combination of compilation to bytecode and subsequent interpretation by the virtual machine provides a compromise between the speed of compiled languages and the flexibility of interpreted languages. It allows for portability and ease of development, as well as providing a level of abstraction from the machine-specific details.</p>"},{"location":"topics/system/02_programming_languages.html#questions","title":"Questions","text":"1. What is a computer program?A set of binary instructions executed by the computer.A collection of instructions for a CPU to perform specific tasks.A physical component of the computer used for storage.A type of hardware used to execute tasks.A computer program is a set of instructions compiled together in a file to perform specific tasks by the CPU.Submit 2. Which of the following is true about low-level programming languages?They are easier to understand and write compared to high-level languages.They provide more abstraction and are independent of hardware.They are close to the hardware and difficult to read for humans.They require interpreters for execution.Low-level languages are close to hardware, hard to read for humans, and usually tied to specific architectures.Submit 3. Which of the following is a low-level language?PythonJavaAssemblyJavaScriptAssembly language is considered a low-level language, closer to machine code than languages like Python or Java.Submit 4. Which programming language requires the use of an assembler to translate it into machine code?C++AssemblyPythonJavaAssembly language requires an assembler to translate it into machine code.Submit 5. What is the primary difference between high-level and low-level programming languages?High-level languages are machine-specific while low-level languages are portable.High-level languages are easier for humans to read and write compared to low-level languages.Low-level languages are easier to debug compared to high-level languages.High-level languages execute faster than low-level languages.High-level languages are easier for humans to read, write, and understand, while low-level languages are closer to machine code.Submit 6. Which of the following is a characteristic of high-level languages?They are processor-dependent.They require the use of an assembler.They are easier to read and understand for programmers.They provide direct control over hardware.High-level languages are easier for humans to read and understand, making them more programmer-friendly.Submit 7. Which tool is used to convert high-level code into machine code without producing a separate executable file?CompilerInterpreterAssemblerDebuggerAn interpreter converts high-level code into machine code in real-time without creating an executable file.Submit 8. What is the role of a compiler in programming?To execute code line by line in real-time.To translate high-level language into assembly language.To compile high-level code into machine code, producing a standalone executable.To convert assembly language into machine code.A compiler translates high-level code into machine code, creating a standalone executable.Submit 9. Which of the following is true about machine code?It is the human-readable version of assembly language.It is the most abstract form of code, easy for humans to understand.It is the binary code that the CPU directly executes.It is a language that is platform-independent and can run on any processor.Machine code is the binary code that the CPU directly executes.Submit 10. What is bytecode in modern programming languages?A set of binary instructions for a specific CPU.An intermediate code that is platform-independent and executed by a virtual machine.A high-level code that requires a compiler to execute.A debugging tool used for interpreting assembly language.Bytecode is an intermediate code used by languages like Python and Java to ensure platform independence.Submit"},{"location":"topics/system/03_inside_the_machine.html","title":"Inside the Machine","text":""},{"location":"topics/system/03_inside_the_machine.html#inside-the-machine","title":"Inside the Machine","text":"<p>Objectives</p> <ul> <li>To recognize and name key hardware components found inside a computer system, including the motherboard, CPU, graphics card, sound card, network card, secondary storage devices, and power supply unit.</li> </ul> <p>Inside all computers are a number of components that need to work together.  The way these are organised is known as the system architecture.  In this section we'll review the main components and then dig in a little deeper in subsequent sections in this topic.  </p> <p>Take the lid of your computer and you will find the following:</p> <ul> <li>Motherboard</li> <li>Memory (RAM)</li> <li>Processor (CPU)</li> <li>Graphics card</li> <li>Sound card</li> <li>Network card</li> <li>Secondary storage (Hard drive, solid state drive, CD/DVD)</li> <li>Other components including cables, fan, heatsink, power supply</li> </ul> <p>It's tempting to think we do not need to know about these and how they interact.  It's a bit like saying we don't need to know how an engine works to drive a car.  There is some truth in that but knowing how the hardware of the computer works, how the various components interact with each other will make what we do with software easier to understand.  Also, when something goes wrong it's good to be able to pin down what might be causing the problem.</p> <p>It's a good idea to read the following with the back off the computer so you can have a good look inside.  This is more difficult with a laptop, and even harder with a smartphone.  These devices will have all of the above components but they are usually hard-wired into the motherboard and thus harder to see (assuming you can even get the back off your laptop or smartphone).</p>"},{"location":"topics/system/03_inside_the_machine.html#motherboard","title":"Motherboard","text":"<p>A motherboard, also known as the mainboard or system board, is a central and essential component of a computer system. It is a large, flat circuit board that serves as the primary platform for connecting various hardware components, allowing them to communicate and work together. The motherboard acts as the central hub, providing electrical connections and pathways for data transfer between the CPU (Central Processing Unit), memory, storage devices, expansion cards, and other peripherals.</p> <p></p> <p>Key components and features found on a typical motherboard include:</p> <ul> <li>CPU Socket: This is where the CPU is installed. The CPU socket allows for a secure connection between the processor and the motherboard, enabling data and power transfer.</li> <li>Memory Slots (DIMM Slots): These slots hold the system's RAM (Random Access Memory) modules. The RAM provides temporary storage for actively used data and instructions, allowing for quick access by the CPU.</li> <li>Expansion Slots (PCIe, PCI, etc.): These slots allow for the installation of expansion cards such as graphics cards, sound cards, network cards, and other peripherals. PCIe (Peripheral Component Interconnect Express) is the most common type of expansion slot for modern motherboards.</li> <li>Chipset: The chipset is a set of integrated circuits that control the flow of data between the CPU, memory, storage devices, and peripherals. It includes the Northbridge and Southbridge components, each responsible for specific tasks.</li> <li>Storage Connectors (SATA, M.2, etc.): These connectors allow for the connection of storage devices such as hard drives (HDDs), solid-state drives (SSDs), and optical drives.</li> <li>Power Connectors: The motherboard has various power connectors, including the primary ATX power connector and supplementary connectors for CPU power. These connectors deliver power to the motherboard and its components.</li> <li>I/O Ports and Headers: The motherboard features ports and headers for connecting external devices such as USB, HDMI, Ethernet, audio, and more. I/O headers are used for connecting internal components like USB headers and front panel connectors.</li> <li>BIOS/UEFI Chip: The Basic Input/Output System (BIOS) or Unified Extensible Firmware Interface (UEFI) chip contains firmware that initializes the hardware during the boot process and provides basic system configuration.</li> <li>CMOS Battery: The CMOS (Complementary Metal-Oxide-Semiconductor) battery powers the CMOS memory, which stores system settings and the system clock even when the computer is powered off.</li> </ul> <p>Note</p> <p>Can you find each of these on your motherboard (or on the above diagram)?</p> <p>You may also hear the term form factor which determines the physical size and layout of the board.  Typically this will include ATX, microATX, and mini-ITX. The form factor influences the compatibility with computer cases and the number of available expansion slots.</p>"},{"location":"topics/system/03_inside_the_machine.html#main-memory-ram","title":"Main Memory (RAM)","text":"<p>Main memory is a crucial component of a computer system that stores data and instructions that are actively being used by the CPU. It is a volatile form of memory, meaning it loses its content when the power is turned off. The primary purpose of main memory is to provide fast access to data for the CPU during program execution.</p> <p></p> <p>Main memory is commonly referred to as RAM (Random Access Memory), and it is used to temporarily store data that is actively being processed by the CPU. It allows for quick read and write operations, enabling efficient data manipulation.  It is the interface between the larger, but slower, storage devices (hard drives) and the CPU.</p> <p>The RAM comes in the form of a bank of memory chips slotted into the available slots on the motherboard.  They come in various sizes e.g. 4Gb, 8Gb or larger.  Thus, 2 banks of 8Gb RAM chips will provide 16Gb of memory in total for your system.</p>"},{"location":"topics/system/03_inside_the_machine.html#the-processor-cpu","title":"The Processor (CPU)","text":"<p>The processor (or, Central Procesing Unit) is the \"brain\" of any computer system.  It is the crucial component responsible for executing instructions and performing calculations necessary for the computer to function. It plays a central role in processing data and managing the overall operation of the computer system.</p> <p></p> <p>As we'll see in a later section the processor has a number of sub-components:</p> <ul> <li>Arithmetic Logic Unit (ALU): The ALU is responsible for performing arithmetic and logic operations. It carries out tasks such as addition, subtraction, AND, OR, and comparison operations. The results of these operations are then used in further processing.</li> <li>Control Unit: The control unit manages the operations of the CPU. It fetches instructions from memory, decodes them, and directs the execution of the corresponding operations. It ensures that the instructions are executed in the correct sequence.</li> <li>Clock: The clock is a timing device that synchronizes the operations of the CPU. It generates a series of pulses at a specific frequency, known as the clock speed. The clock ensures that each operation within the CPU occurs at the right time.</li> <li>Registers: Registers are small, fast storage locations within the CPU. They store data that is immediately needed for processing. The CPU uses various types of registers, such as data registers and address registers, to efficiently manage information.</li> </ul> <p>The speed of the processor, often expressed in terms of clock speed measured in Hertz (Hz) or Gigahertz (GHz), refers to how quickly the CPU can execute instructions. A higher clock speed indicates a faster processor. For example, a processor with a clock speed of 2.4 GHz performs 2.4 billion clock cycles per second.</p> <p>Some CPUs have multiple processing cores, allowing them to handle multiple tasks simultaneously. More cores can lead to improved multitasking and overall performance, especially in applications designed to take advantage of parallel processing.</p> <p>The CPU often includes a small, high-speed memory called a cache. A larger cache size can help store frequently used data and instructions closer to the CPU, reducing the need to access slower main memory and improving overall speed.  The cache can be used to prefetch data and instructions from memory while waiting for the ALU to finish processing the previous operation.</p>"},{"location":"topics/system/03_inside_the_machine.html#graphics-card","title":"Graphics Card","text":"<p>A graphics card, also known as a GPU (Graphics Processing Unit) or video card, serves the primary purpose of rendering and displaying visual information on a computer monitor. Its role is crucial in handling graphics-intensive tasks and offloading the graphical processing from the computer's main CPU (Central Processing Unit). </p> <p></p> <p>Here are the key purposes of a graphics card:</p> <ul> <li>Graphics Rendering: The primary function of a graphics card is to render and display images, videos, and graphical user interfaces (GUIs) on a computer monitor. </li> <li>3D Graphics Processing: Graphics cards are particularly important for rendering complex 3D graphics in applications such as video games, 3D modeling software, and computer-aided design (CAD) programs. The specialized architecture of GPUs allows them to handle the mathematical calculations involved in rendering 3D environments efficiently.</li> <li>Video Playback and Decoding: Graphics cards include hardware components designed to accelerate video decoding. This feature is beneficial for playing high-definition videos and streaming content, as it offloads the video processing tasks from the CPU, freeing up resources for other computations.</li> <li>Parallel Processing: Modern graphics cards are equipped with a large number of parallel processing cores. This parallel architecture is well-suited for handling multiple tasks simultaneously, making GPUs highly efficient in performing parallel computations. This capability is utilized in applications like scientific simulations, machine learning, and parallel computing tasks.</li> </ul> <p>In gaming, graphics cards play a critical role in determining the visual quality and performance of games. A powerful graphics card can handle advanced rendering techniques, higher resolutions, and smoother frame rates, enhancing the overall gaming experience.  This may not be needed for a standard desktop computer that does nto require such intensive graphics processing and most major motherboards will come equipped with its own integrated graphics cards. But, if you're into gaming you may need to upgrade!</p> <p>Graphics cards may also support multiple monitors.</p>"},{"location":"topics/system/03_inside_the_machine.html#sound-card","title":"Sound card","text":"<p>A sound card, also known as an audio card or audio interface, is a hardware component designed to process and manage audio data in a computer system. Its primary purpose is to provide audio input and output capabilities, allowing users to hear sound and record audio through their computer.  As with the graphics card offloading the rendering of audio can provide an additional boost to a computer system and provides enhanced sound quality.</p> <p>Some audio interfaces are provided as an external component for a computer system and is generally preferred by studio musicians.</p> <p></p> <p>The key purposes of a sound card are:</p> <ul> <li>Audio Playback: The fundamental function of a sound card is to enable audio playback. It processes digital audio signals and converts them into analog signals that can be sent to speakers or headphones. </li> <li>Sound Quality Enhancement: Sound cards can enhance the overall audio quality by providing higher-quality digital-to-analog converters (DACs) and audio processing capabilities. This can result in clearer and more detailed audio reproduction compared to basic onboard audio solutions.</li> <li>Support for Surround Sound: Many sound cards support surround sound technologies, such as 5.1 or 7.1 channel audio. This is particularly important for gaming, home theatre setups, and multimedia content.</li> <li>Audio Recording: Sound cards facilitate audio input, allowing users to record sounds through microphones or other audio input devices. </li> <li>MIDI (Musical Instrument Digital Interface) Support: Some sound cards include MIDI support, allowing users to connect musical instruments or MIDI controllers to the computer for music creation and recording. Musicians and audio producers often rely on sound cards with MIDI capabilities for music composition and production.</li> <li>Reduced CPU Load: Dedicated sound cards offload audio processing tasks from the computer's main CPU, which can result in improved overall system performance. </li> <li>Gaming Audio Enhancement: High-quality sound cards are valued by gamers for their ability to provide immersive and accurate audio in games. This includes features such as positional audio, which helps gamers identify the direction and distance of in-game sounds for a more immersive gaming experience.</li> <li>Connectivity Options: Sound cards often come with a variety of audio ports, including headphone jacks, microphone inputs, line-in and line-out ports, and digital audio outputs. </li> </ul> <p>While many modern motherboards come with integrated audio solutions, dedicated sound cards are used in scenarios where higher audio quality, specialized features, or advanced connectivity options are desired. Audiophiles, gamers, and audio professionals may opt for standalone sound cards to meet their specific audio requirements.</p>"},{"location":"topics/system/03_inside_the_machine.html#network-card","title":"Network Card","text":"<p>A network card, also known as a network interface card (NIC), Ethernet adapter, or LAN (Local Area Network) adapter, is a hardware component that enables a computer to connect to a network. Its primary purpose is to provide communication between the computer and other devices on the network, allowing for the transmission and reception of data.  The network card may also provide wireless connectivity.</p> <p></p> <p>Key features and functions of a network card include:</p> <ul> <li>Network Connectivity: The primary role of a network card is to provide the necessary hardware interface for a computer to connect to a network. This can be a local wired network (Ethernet) or a wireless network (Wi-Fi).</li> <li>Ethernet Ports: In the case of wired connections, network cards often have Ethernet ports (RJ45 connectors) that allow the computer to be connected to a network using an Ethernet cable. This is a common setup in home and business environments.</li> <li>Wireless Connectivity (Wi-Fi): Some network cards support wireless connectivity, allowing the computer to connect to Wi-Fi networks. These wireless network cards have built-in antennas and support various Wi-Fi standards, providing flexibility for connecting to wireless routers and access points</li> <li>Data Link Layer Functionality: The network card operates at the Data Link layer (Layer 2) of the OSI model. It is responsible for framing data into packets, adding necessary addressing information, and handling error detection and correction.</li> <li>MAC Address: Each network card has a unique identifier known as a MAC (Media Access Control) address. This address is a hardware address assigned to the network card, and it is used for communication on the local network.</li> <li>Network Protocols: Network cards support various network protocols, such as TCP/IP (Transmission Control Protocol/Internet Protocol), which is the foundation of communication on the Internet. The network card processes these protocols to enable communication with other devices on the network.</li> <li>Data Transmission and Reception: The network card handles the transmission of data from the computer to the network and the reception of data from the network to the computer. It ensures that data is sent and received accurately and efficiently.</li> <li>Driver Software: To operate effectively, a network card requires driver software. This software serves as an interface between the operating system and the hardware, allowing the OS to communicate with and control the network card.</li> <li>Speed and Duplex Settings: Network cards support different speeds and duplex settings, which determine the rate of data transfer and whether the card can send and receive data simultaneously (full duplex) or one at a time (half duplex).</li> </ul> <p>The Network card is usually integrated with the motherboard - this is the norm.  There may be reason to upgrade if improved performance or advanced security is required or if the onboard card malfunctions.</p>"},{"location":"topics/system/03_inside_the_machine.html#secondary-storage","title":"Secondary Storage","text":"<p>Secondary storage refers to non-volatile, persistent storage devices that hold data and files for the long term, even when the power is turned off. Unlike primary storage (RAM or main memory), which is volatile and temporary, secondary storage retains data for an extended period, making it suitable for long-term storage and retrieval. Secondary storage devices are essential for storing the operating system, applications, user files, and other data on a computer or electronic device.</p> <p>Secondary stage comes in different forms, including:</p> <ul> <li>Hard Disk Drives (HDDs): HDDs use magnetic storage to store data on spinning disks with typical capacity of 1Tb and more.</li> <li>Solid-State Drives (SSDs): SSDs use NAND-based flash memory to store data. They are faster than HDDs, have no moving parts, and are becoming increasingly popular for their speed and reliability.  More expensive than HDDs.</li> <li>Optical Drives: Devices such as CD (Compact Disc), DVD (Digital Versatile Disc), and Blu-ray drives use optical storage to read and write data on optical discs. While becoming less common, they are still used for specific applications.</li> </ul> <p>Though not internal to a computer you will also find secondary storage devices such as:</p> <ul> <li>USB Flash Drives: Portable and compact, USB flash drives use flash memory to store data. They are widely used for transporting and transferring files between computers.</li> <li>Memory Cards: Commonly used in smartphones, and other portable devices, memory cards use flash memory to provide removable storage.</li> </ul> <p>Finally, for completeness, secondary storage can be centrally shared in a local and wide are network.  Network Attached Storage (NAS)provides shared storage accessible by multiple users and devices and Cloud Storage: services allow users to store and access data over the internet. Examples include services like Google Drive, Dropbox, and Microsoft OneDrive.</p> <p></p> <p>They each share the following characteristics, distinguishing them from primary storage (RAM):</p> <ul> <li>Non-Volatility: Secondary storage retains data even when the power is turned off. This characteristic allows for the long-term storage of information, making it suitable for data that needs to persist across sessions.</li> <li>Large Capacity: Secondary storage devices typically offer larger storage capacities compared to primary storage (RAM). This allows for the storage of operating systems, software applications, documents, multimedia files, and more.</li> <li>Slower Access Speeds: Accessing data from secondary storage is generally slower than accessing data from primary storage. This is due to factors such as mechanical movement (in the case of hard disk drives) or the nature of the storage medium.</li> </ul>"},{"location":"topics/system/03_inside_the_machine.html#power-supply-unit","title":"Power Supply Unit","text":"<p>Clearly the primary function of the Power Supply Unit (PSU) is to provide power to the computer but it also plays several important roles in ensuring the stability, efficiency, and overall functionality of the entire computer system. </p> <p></p> <p>Here are some key aspects of the importance of the power supply e.g.</p> <ul> <li>Stability of Power Delivery: Fluctuations or irregularities in power can lead to system instability, crashes, or damage to sensitive components. A reliable power supply helps maintain system stability.</li> <li>Protection Against Power Surges and Spikes: To safeguard the computer system from sudden increases in voltage and prevent damage to internal components, such as the motherboard, CPU, and storage devices.</li> <li>Efficient Power Conversion: Modern power supplies are designed to efficiently convert electrical power from the source (such as a wall outlet) into the required voltages for the various components in the computer. Higher efficiency means less wasted energy, reduced heat generation, and lower electricity bills.</li> <li>Regulation of Voltage and Current: The power supply regulates the voltage and current supplied to different components, ensuring that they receive the appropriate levels of power. This regulation is essential for preventing damage to sensitive electronic components and ensuring proper operation.</li> <li>Compatibility with Components: Power supplies come in various form factors and wattages. Selecting a power supply that is compatible with the components in the computer is crucial. Different components may have different power requirements, and the power supply must meet or exceed those requirements for optimal performance.</li> <li>Cooling and Fan Control: The power supply unit often includes a cooling fan to dissipate heat generated during operation. Some power supplies offer fan speed control based on temperature, helping to maintain a balance between cooling efficiency and noise levels.</li> </ul>"},{"location":"topics/system/03_inside_the_machine.html#heat-sink-and-fan","title":"Heat Sink and Fan","text":"<p>The computer will generate a lot of heat and the system needs to prevent overheating which can damage other components and degrade performance of the system.</p> <p></p> <p>The heat sink absorbs and dissipates heat away from the CPU. It is typically made of a thermally conductive material such as aluminum or copper, which helps transfer heat away from the CPU to a larger surface area. The increased surface area allows for more efficient heat dissipation into the surrounding air.</p> <p>It is mounted directly on top of the CPU, making direct contact with the CPU's heat-producing surface. The design of the heat sink, including its fins or ridges, maximizes the surface area available for heat exchange.</p> <p>Some heat sinks are equipped with heat pipes\u2014hollow tubes filled with a heat-conductive fluid. These pipes efficiently transport heat away from the CPU to the fins of the heat sink, enhancing the overall cooling performance.</p> <p>The fan works in conjunction with the heat sink. Its primary purpose is to enhance the heat dissipation process by increasing the airflow around the heat sink. It is usually mounted on top of or adjacent to the heat sink. As it spins, it draws air through the heat sink's fins, carrying away the heat and helping to maintain a lower temperature around the CPU.</p> <p>The fan speed is often controlled dynamically based on the CPU temperature. When the CPU is under heavy load and generates more heat, the fan speeds up to increase airflow and cooling. Conversely, when the CPU is under lighter loads, the fan may operate at a lower speed to reduce noise.</p>"},{"location":"topics/system/03_inside_the_machine.html#questions","title":"Questions","text":"1. Which of the following components acts as the central hub of a computer, providing electrical connections and pathways for data transfer between the CPU, memory, storage devices, and peripherals?Processor (CPU)MotherboardGraphics cardPower supply unitThe motherboard is a large, flat circuit board that connects various hardware components, allowing them to communicate and work together in a computer system.Submit 2. What is the primary purpose of RAM in a computer system?To store data permanentlyTo render graphicsTo provide fast access to data for the CPU during program executionTo cool the CPURAM (Random Access Memory) is a volatile form of memory used for temporarily storing data that is actively being processed by the CPU.Submit 3. Which component in a computer system is responsible for performing arithmetic and logic operations such as addition, subtraction, AND, and OR?Control UnitGraphics cardArithmetic Logic Unit (ALU)RAMThe Arithmetic Logic Unit (ALU) is part of the CPU responsible for performing arithmetic and logic operations, which are essential for data processing.Submit 4. Which type of storage is non-volatile and retains data even when the computer is powered off?RAMCPU CacheSecondary StorageHeat sinkSecondary storage devices, such as hard drives and SSDs, are non-volatile, meaning they retain data even when the computer is turned off.Submit 5. What is the primary role of a graphics card in a computer system?To manage audio dataTo provide network connectivityTo render and display images and videosTo supply power to the systemA graphics card is responsible for rendering and displaying visual information on the monitor, handling graphics-intensive tasks such as gaming and 3D modeling.Submit 6. Which of the following components is responsible for maintaining the system clock and storing system settings when the computer is powered off?CMOS BatteryPower Supply UnitRAMGraphics CardThe CMOS battery powers the CMOS memory, which stores system settings and the system clock even when the computer is powered off.Submit 7. Which form factor determines the physical size and layout of the motherboard, influencing compatibility with computer cases and expansion slots?PCIeSATAForm FactorBIOS/UEFIThe form factor determines the size and layout of the motherboard, impacting its compatibility with different computer cases and the number of expansion slots available.Submit 8. Which component provides communication between a computer and other devices on a network, enabling data transmission and reception?Sound cardGraphics cardNetwork cardRAMThe network card enables a computer to connect to a network and allows for the transmission and reception of data over the network.Submit 9. What is the primary function of the power supply unit (PSU) in a computer?To store dataTo regulate the voltage and current supplied to different componentsTo process graphicsTo enhance sound qualityThe power supply unit (PSU) provides power to the computer and regulates the voltage and current to ensure proper operation of all components.Submit 10. What is the role of the heat sink and fan in a computer system?To store data for quick access by the CPUTo provide network connectivityTo prevent overheating by dissipating heat from the CPUTo process sound and video dataThe heat sink and fan work together to dissipate heat from the CPU, preventing it from overheating and maintaining optimal performance.Submit"},{"location":"topics/system/04_memory.html","title":"Memory","text":""},{"location":"topics/system/04_memory.html#memory","title":"Memory","text":"<p>Objectives</p> <ul> <li>To explain that the primary purpose of main memory</li> <li>To distinguish between volatile and non-volatile memory</li> <li>To understand the Role of RAM in a Computer System</li> <li>To assess the impact of RAM capacity on a computer's performance</li> <li>To kow the difference between RAm and ROM</li> <li>To understand the concept of virtual memory</li> <li>To know the purpose of cache memory, its hierarchical organization (L1, L2, L3)</li> </ul> <p>The purpose of main memory is to store the instructions from the programs currently running on a computer system and to hold the data needed by those programs allowing quick access by the processor.</p> <p>Memory is the computer\u2019s facility to store data such as documents, music, pictures and any other files and data. It is either volatile or non-volatile</p> <p>Volatile memory - When there is no power to the computer\u2019s storage of the content is lost. </p> <p>Non-volatile memory - Even when there is no power, the data and files can be accessed again once power has been restored.</p>"},{"location":"topics/system/04_memory.html#random-access-memory-ram","title":"Random Access Memory (RAM)","text":"<p>Random Access Memory (RAM) is the working memory of the computer system.  Each time computer software is run, the instructions for that software is first copied into RAM.  Each time a file is opened, the contents of that file are copied into RAM.  When a user makes changes to a document those changes will be stored in RAM</p> <p>RAM is volatile, which means that it loses its data when the computer is powered off.  To ensure those changes are retained it is necessary to save the document to secondary storage.</p> <p>Other important aspects of RAM include:</p> <ul> <li> <p>Multi-tasking: RAM enables a computer to handle multiple tasks simultaneously. When you switch between applications or open multiple programs, the data for each of these tasks is stored in RAM, so they can be quickly accessed by the CPU without waiting for data to be retrieved from slower storage devices.</p> </li> <li> <p>Capacity: The amount of RAM in a computer can vary. Computers typically have several gigabytes (GB) of RAM, but more powerful systems used for tasks like gaming, video editing, or scientific simulations may have 16 GB or more. The amount of RAM you need depends on your specific use case.</p> </li> <li> <p>Types of RAM: There are different types of RAM, including DDR (Double Data Rate) RAM, DDR2, DDR3, DDR4, and DDR5, with each generation offering increased performance and efficiency. The type of RAM used in a computer depends on the motherboard and CPU compatibility.</p> </li> <li> <p>Upgradability: In many desktop computers, you can upgrade or add more RAM to improve performance, as long as your motherboard supports it. This is a common and relatively cost-effective way to enhance your computer's speed and multitasking capabilities.</p> </li> </ul>"},{"location":"topics/system/04_memory.html#read-only-memory-rom","title":"Read Only Memory (ROM)","text":"<p>ROM, which stands for Read-Only Memory, is a type of computer memory that stores data permanently, and this data cannot be easily modified or overwritten. Unlike RAM (Random Access Memory), which is volatile and loses its data when the computer is powered off, ROM retains its data even when the computer's power is turned off. Here are some key characteristics and uses of ROM:</p> <ul> <li> <p>Permanent Data Storage: ROM is used to store data that needs to be preserved for the long term. This data is typically in the form of firmware or software that is essential for the operation of a device or computer. Once data is written to ROM, it cannot be easily changed, which is why it's called \"read-only.\"</p> </li> <li> <p>Firmware: Many electronic devices, such as smartphones, tablets, game consoles, and computer motherboards, have firmware stored in ROM. Firmware is a type of software that provides low-level control and functionality for the hardware. For example, the BIOS (Basic Input/Output System) in a computer's motherboard is often stored in ROM.</p> </li> <li> <p>Boot-up Instructions: In a computer, the initial instructions that start the boot-up process are often stored in ROM. This is necessary because the computer needs these instructions to begin loading the operating system from other storage devices like hard drives or SSDs.</p> </li> <li> <p>Software Protection: Some software or data stored in ROM may be copy-protected or locked to prevent unauthorized modifications. This is common in gaming consoles to prevent piracy.</p> </li> </ul>"},{"location":"topics/system/04_memory.html#types-of-read-only-memory","title":"Types of Read Only Memory","text":"<p>There are various types of ROM, including:</p> <ul> <li>Mask ROM (MROM): The data is permanently programmed during manufacturing and cannot be changed.</li> <li>Programmable Read-Only Memory (PROM): Users or manufacturers can program the data once using a special device. Once programmed, the data is fixed and cannot be altered.</li> <li>Erasable Programmable Read-Only Memory (EPROM): Data can be erased and reprogrammed multiple times using ultraviolet light.</li> <li>Electrically Erasable Programmable Read-Only Memory (EEPROM): Data can be electrically erased and rewritten, making it more flexible for certain applications.</li> </ul>"},{"location":"topics/system/04_memory.html#virtual-memory","title":"Virtual Memory","text":"<p>Computers have a limited amount of physical RAM, which is used to store actively running programs and data. However, the available RAM may not always be sufficient for all the tasks a computer needs to perform. Virtual memory extends the available memory by using a portion of the computer's storage devices (typically the hard drive or SSD) as if it were additional RAM. This creates a virtual address space that appears larger than the actual physical RAM.</p> <p></p> <p>The part of the storage device used for virtual memory is often referred to as the \"page file\" (in Windows) or \"swap space\" (in Linux). When the physical RAM is fully utilized, less frequently used data and program code are temporarily transferred to the page file.</p> <p>The operating system manages the transfer of data between the physical RAM and the page file based on the program's needs. Portions of programs or data not actively in use may be swapped in and out of the physical RAM as needed.</p> <p>While virtual memory provides flexibility, it comes with a performance cost. Accessing data from the physical RAM is much faster than accessing it from the storage device. Therefore, excessive use of virtual memory can lead to slower performance because of the time required to transfer data between RAM and the storage device.</p>"},{"location":"topics/system/04_memory.html#cache-memory","title":"Cache Memory","text":"<p>In a computer system, there is a hierarchy of memory types, ranging from high-speed, low-capacity memory to slower, higher-capacity memory. This hierarchy includes cache memory, RAM, and secondary storage like hard drives or SSDs.</p> <p>Cache memory is located closer to the CPU (Central Processing Unit) than RAM. There are typically multiple levels of cache (L1, L2, L3) with L1 being the smallest and fastest, and L3 being larger but slower.</p> <p>The primary role of cache memory is to store copies of frequently accessed data and instructions from the main memory. Since it is faster than RAM, accessing data from the cache speeds up the overall performance of the computer.</p> <p>When the CPU needs to access data or instructions, it first checks if the required information is in the cache memory. If it is, this is known as a cache hit, and the data can be quickly retrieved. If the data is not in the cache, it results in a cache miss, and the CPU needs to fetch the data from the slower main memory.</p> <p>The cache memory is organized into different levels to balance speed and capacity. L1 cache is the smallest but fastest, residing directly on the CPU. L2 cache is larger but slightly slower, and L3 cache, if present, is larger still but slower compared to L1 and L2.</p> <p>The size of the cache memory affects its effectiveness. A larger cache can store more data, reducing the likelihood of cache misses. However, larger caches also tend to have longer access times.</p> <p>Cache management is dynamic, with the system determining which data to keep in the cache based on usage patterns. Frequently accessed data is retained, while less frequently accessed data may be replaced.</p> <p>The use of cache memory is a key strategy for improving CPU performance. By storing frequently used data closer to the CPU, the processor spends less time waiting for data to be fetched from slower main memory.</p>"},{"location":"topics/system/04_memory.html#memory-hierarchy","title":"Memory Hierarchy","text":"<p>Each of the different layers or memory work together and form a hierarchy as summarised in the following diagram:</p> <p></p>"},{"location":"topics/system/04_memory.html#questions","title":"Questions","text":"1. What is the primary purpose of main memory in a computer system?To store files and documents permanentlyTo store program instructions and data currently in useTo act as a backup in case of power failureTo manage network trafficMain memory is used to store program instructions and data that are actively being used by the processor. It allows for quick access to this information during operation.Submit 2. Which of the following best describes volatile memory?It retains data even when the power is offIt stores data permanentlyIt loses data when the power is offIt cannot be upgradedVolatile memory loses its data when the computer is powered off, unlike non-volatile memory, which retains data without power.Submit 3. Which type of memory is used to store firmware like the BIOS in a computer?RAMROMCache memoryVirtual memoryROM is used to store firmware, such as the BIOS, which provides essential instructions for the computer's operation and is not easily modified.Submit 4. What happens when RAM is fully utilized in a computer?The computer stops running programsAdditional RAM is created automaticallyThe computer starts using virtual memoryThe computer will automatically shut downWhen RAM is fully utilized, the operating system uses virtual memory, which extends available memory by using a portion of storage devices.Submit 5. Which type of memory is non-volatile?RAMCache memoryROMVirtual memoryROM is non-volatile, meaning it retains data even when power is turned off, unlike RAM, which is volatile.Submit 6. What is the main difference between RAM and ROM?RAM is volatile, while ROM is non-volatileRAM stores firmware, while ROM stores user filesRAM is slower than ROMROM is used for temporary storage, while RAM is for permanent storageThe main difference is that RAM is volatile and loses data when powered off, while ROM is non-volatile and retains data.Submit 7. What is the purpose of cache memory?To store data permanentlyTo provide additional storage spaceTo speed up data access by storing frequently used dataTo manage network communicationsCache memory speeds up data access by storing frequently accessed data closer to the CPU, reducing the time needed to retrieve it from slower memory.Submit 8. Which level of cache is the smallest and fastest?L1L2L3Virtual cacheL1 cache is the smallest and fastest level of cache memory, providing the quickest access to data directly on the CPU.Submit 9. What is virtual memory primarily used for?To store data permanentlyTo increase the amount of RAM availableTo cache frequently accessed dataTo manage system heatVirtual memory extends the apparent amount of RAM available by using a portion of storage devices, allowing for more programs to run simultaneously.Submit 10. How does a larger cache affect performance?It decreases the likelihood of cache missesIt increases the time required to access dataIt makes the computer slowerIt decreases the amount of RAM neededA larger cache can store more data, reducing the likelihood of cache misses and improving overall performance by decreasing the need to access slower memory.Submit"},{"location":"topics/system/05_secondary_storage.html","title":"Secondary Storage","text":""},{"location":"topics/system/05_secondary_storage.html#secondary-storage","title":"Secondary Storage","text":"<p>Objectives</p> <ul> <li>To explain the purpose and significance of secondary storage in a computer system, distinguishing it from primary storage (RAM) in terms of data retention and volatility.</li> <li>To describe common types of secondary storage devices, such as optical, magnetic, and solid-state storage, and understand their characteristics and applications.</li> <li>To understand how optical storage, magnetic storage, and solid-state storage work, including the underlying technologies and mechanisms involved in reading and writing data.</li> <li>Analyze the advantages and disadvantages of each type of secondary storage, considering factors such as capacity, speed, portability, durability, reliability, and cost.</li> <li>To recommend suitable storage devices and media for specific applications based on their understanding of the characteristics and suitability of different types of secondary storage.</li> </ul> <p>Secondary storage is a crucial component of computer systems, distinct from the faster but volatile primary storage (RAM). It serves the purpose of long-term data retention even when the computer is powered off. Secondary storage devices are non-volatile, providing a means to store large amounts of data permanently.</p> <p>Primary storage (RAM) is volatile, it loses its data when the power is turned off. Secondary storage retains data, ensuring that files, applications, and the operating system persist across sessions.</p> <p>Secondary storage devices offer significantly larger storage capacities compared to primary storage, accommodating vast amounts of data, including the operating system, applications, and user files.</p> <p>Secondary storage allows for the organization and storage of various types of data, including documents, multimedia files, applications, and the system's essential software components.</p> <p>Secondary storage facilitates the sharing and transfer of data between different devices. USB drives, external hard drives, and network-attached storage (NAS) are examples of secondary storage devices used for data portability.</p>"},{"location":"topics/system/05_secondary_storage.html#common-types-of-storage","title":"Common Types of Storage","text":""},{"location":"topics/system/05_secondary_storage.html#optical-storage","title":"Optical Storage","text":"<p>An optical disk has a single spiral track, the disk is placed on a spindle and rotates.  It is read from the inside to the outside. The binary data is encoded as microscopic variations in the height of the disc's surface, known as pits and lands. Bits are encoded as transitions between raised lands and etched pits.</p> <p></p> <p>To read the data, an infrared laser is beamed through the CD's polycarbonate substrate. The light that bounces off then measured. Because pits and lands pass different amounts of light, an optical pickup can read the pattern by detecting changes in the reflected beam as the laser scans the groove. These measurements can then be translated back into the original ones and zeros.</p> <p>DVDs use a similar methodology but employ a shorter-wavelength red laser that permits a narrower beam. This allows tracks to be spaced closely enough to shoehorn 4.37GB (4.7 billion bytes) onto one stamped data layer, more than six times the CD's 700MB capacity.</p> Description Optical storage uses lasers to read and write data on optical discs, like CDs, DVDs, and Blu-ray discs. Advantages High capacity, low cost, durability, portability. Disadvantages Slower access times compared to magnetic and solid-state storage."},{"location":"topics/system/05_secondary_storage.html#magnetic-storage","title":"Magnetic Storage","text":"<p>Magnetic disks work by using magnetic fields to encode binary data on the surfaces of rotating platters. The read/write heads interact with these magnetic fields to read and write data, and the organized structure of tracks and sectors allows for efficient storage and retrieval of information.</p> <p></p> <p>The surface of a magnetic disk is coated with a thin layer of magnetic material, typically a ferromagnetic material like iron oxide.  A hard disk consists of multiple circular disks called platters, which are stacked on a spindle. Each platter has two surfaces where data is magnetically recorded. A read/write head is positioned above and below each platter. These heads are mounted on arms that can move across the surface of the platters.  The direction of the magnetic polarity on the disk's surface determines the value of the stored bits. For example, one magnetic polarity might represent a binary 0, while the opposite polarity represents a binary 1.</p> <p>When data needs to be stored on the disk, the write head generates a magnetic field. The magnetic field aligns the magnetic particles on the surface of the platter, magnetizing specific regions to represent the 0s and 1s of the binary data.</p> <p>When data needs to be retrieved, the read head senses the magnetic orientation of the particles on the disk's surface as it passes over them. The magnetic field induces electrical currents in the read head, producing voltage changes that are then interpreted as binary data.</p> <p>Data is organized into concentric circles on the platters, known as tracks, and further divided into sectors. The combination of tracks and sectors creates a grid-like structure for efficient storage and retrieval.</p> <p>The platters spin at high speeds, typically thousands of revolutions per minute (RPM). The rotational speed affects the access time, or the time it takes for the desired data to rotate under the read/write heads.</p> <p>The movement of the read/write heads across the platters is controlled by the actuator arm. The time it takes for the heads to move to the correct track is known as seek time.</p> Description Magnetic storage uses magnetic fields to read and write data on magnetic media, like hard drives and magnetic tapes. Advantages High capacity, relatively low cost, fast access times. Disadvantages Susceptible to mechanical failures, not as portable as solid-state storage."},{"location":"topics/system/05_secondary_storage.html#solid-state-storage","title":"Solid-State Storage","text":"<p>Solid-state storage devices, such as Solid-State Drives (SSDs), work on entirely different principles compared to magnetic disks (Hard Disk Drives or HDDs). Instead of using magnetic fields to store data on spinning disks, SSDs utilize electronic memory cells to store and retrieve information. Here's an overview of how solid-state storage devices work:</p> <p>The fundamental components of an SSD are memory cells, which are electronic circuits that can store binary data as electrical charges. These cells are typically made from NAND-based flash memory - a type of non-volatile storage technology that retains data even when the power is turned off. It is composed of memory cells organized into pages and blocks.</p> <p>Similar to magnetic disks, data is represented in binary format, with each memory cell capable of storing multiple bits. Common configurations include Single-Level Cell (SLC), Multi-Level Cell (MLC), Triple-Level Cell (TLC), and Quad-Level Cell (QLC), indicating how many bits each cell can store.</p> <p>To write data, an SSD uses electrical voltage to program the memory cells. The voltage changes the state of the cells, representing binary 0s and 1s. Unlike HDDs, there are no moving parts involved in this process.</p> <p>To read data, the SSD measures the electrical charges stored in the memory cells. This is done by detecting the level of charge in each cell, allowing the retrieval of the originally stored binary values.</p> <p>One of the key distinctions from HDDs is that SSDs have no mechanical components, such as spinning disks or moving read/write heads. This absence of moving parts contributes to faster data access times, improved durability, and reduced susceptibility to mechanical failures.</p> Description Solid-state storage uses flash memory to store data, as found in USB drives, SSDs (Solid-State Drives), and memory cards. Advantages Very fast access times, high durability, no moving parts, portable. Disadvantages Higher cost per gigabyte compared to magnetic storage."},{"location":"topics/system/05_secondary_storage.html#suitable-storage-devices-and-media-for-a-given-application","title":"Suitable Storage Devices and Media for a Given Application","text":"Application Recommendation Archiving large volumes of data for long-term preservation. Optical storage, such as Blu-ray discs or DVDs. They offer high capacity and durability. Carrying important documents while traveling. Solid-state storage, like a USB flash drive. It's portable and reliable. Installing and running an operating system on a computer. Solid-state storage (SSD) or magnetic storage (hard drive). SSDs offer speed, while hard drives provide cost-effective high capacity."},{"location":"topics/system/05_secondary_storage.html#advantages-and-disadvantages-of-storage-devices-and-media","title":"Advantages and Disadvantages of Storage Devices and Media","text":"Feature Advantages Disadvantages Capacity Optical and magnetic storage offer high capacity. Solid-state storage provides a good balance between capacity and speed. Solid-state storage is typically smaller in capacity compared to optical or magnetic storage. Speed Solid-state storage is the fastest, followed by magnetic storage. Optical storage is slower for random access. Optical storage is slow for random access, which can affect performance. Portability Solid-state storage is highly portable due to its small size. Optical storage is moderately portable. Magnetic storage is less portable due to its size and sensitivity to shocks. Durability Solid-state storage is durable due to no moving parts. Optical storage is relatively durable. Magnetic storage is more prone to mechanical failure. Reliability Solid-state storage is highly reliable. Optical storage is moderately reliable. Magnetic storage may be less reliable due to mechanical parts. Cost Optical and magnetic storage are typically more cost-effective in terms of cost per gigabyte. Solid-state storage is more expensive but offers advantages in speed and reliability."},{"location":"topics/system/05_secondary_storage.html#cloud-storage","title":"Cloud Storage","text":"<p>Instead of storing data locally on physical hardware such as hard drives or servers, users can save their files and information to a remote data center via the internet, usually called cloud storage.  The user, through registering for an account with the provider, has access to a given amount of storage on the provider's servers.  Popular cloud storage solutions include Google Drive, Dropbox, Microsoft OneDrive, and Amazon S3 (Simple Storage Service).  Typically, users are given a minimum quota with the option to increase or decrease their allocated amount as needed.</p> <p>The providers take responsibility  for maintaining, managing and backing up the data.  Users can access their stored data from anywhere with an internet connection. It allows for easy file sharing, collaboration, and retrieval without being tied to a specific physical location.</p> <p>Cloud storage platforms often include collaboration features, allowing multiple users to work on and share documents in real-time. This promotes collaboration and streamlines workflows, especially for remote or distributed teams.</p> <p>Cloud storage eliminates the need for organizations or individuals to invest in and maintain their own physical infrastructure. Users typically pay for the storage capacity they use, making it a cost-efficient solution.</p> <p>Popular cloud storage services include Google Drive, Dropbox, Microsoft OneDrive, and Amazon S3 (Simple Storage Service). These services cater to a wide range of users, from individual consumers to large enterprises, offering different storage plans and features to meet diverse needs.</p>"},{"location":"topics/system/05_secondary_storage.html#cloud-storage-vs-local-storage","title":"Cloud storage vs local storage","text":"Aspect Cloud Storage Local Storage Accessibility Advantage: Remote access from anywhere with internet connectivity. Facilitates easy sharing and collaboration. Advantage: Direct access to data without internet dependency. Suitable for offline use. Disadvantage: Requires internet connection; access speed depends on network quality. Disadvantage: Limited accessibility, especially when away from the local storage device. Scalability Advantage: Easily scalable to accommodate changing storage needs. Pay-as-you-go models offer flexibility. Advantage: Limited by the physical capacity of the local storage device. Expansion may require additional hardware. Disadvantage: Costs can increase as storage usage grows. Dependency on the cloud provider's pricing structure. Disadvantage: Limited scalability; upgrading may involve purchasing new hardware. Data Redundancy Advantage: Built-in redundancy measures enhance data reliability and protect against hardware failures. Advantage: Dependent on user-managed backup and redundancy strategies. Disadvantage: Relies on the cloud provider's infrastructure for redundancy. Data may be at risk in case of provider issues. Disadvantage: Greater responsibility for user to implement backup and redundancy solutions. Automatic Backup Advantage: Many cloud services offer automatic and regular backups, reducing the risk of data loss. Advantage: Dependent on user-initiated backup processes. Disadvantage: Limited control over backup processes; reliance on provider's schedules. Disadvantage: User must actively manage and schedule backups. Collaboration Tools Advantage: Integration of collaboration features, enabling real-time document sharing and editing. Advantage: Collaboration relies on local network or file-sharing solutions. Disadvantage: Dependence on the cloud platform's collaboration capabilities. Disadvantage: May lack real-time collaboration features present in cloud platforms. Security Measures Advantage: Cloud providers implement robust security measures, including encryption and access controls. Advantage: Local storage can be physically secured and offline, reducing some online security risks. Disadvantage: Potential security concerns due to reliance on external providers; data breaches are a risk. Disadvantage: Vulnerable to physical damage or theft; user bears responsibility for local security measures. Cost-Efficiency Advantage: Eliminates the need for upfront hardware investments. Users pay for the storage capacity they use. Advantage: One-time purchase cost; no recurring fees. Disadvantage: Ongoing subscription costs; total cost of ownership may increase over time. Disadvantage: Initial hardware costs; potential additional costs for maintenance and upgrades. <p>Note: The advantages and disadvantages mentioned may vary based on specific cloud storage providers and local storage configurations.</p>"},{"location":"topics/system/05_secondary_storage.html#questions","title":"Questions","text":"1. What is the primary function of secondary storage in a computer system?To temporarily hold data for quick access by the CPUTo store data permanently even when the computer is powered offTo manage the computer's network connectionsTo execute instructions from software programsSecondary storage is used to store data permanently, ensuring that files and applications persist even when the computer is turned off.Submit 2. Which type of storage is characterized by having no moving parts and using electronic memory cells?Optical storageMagnetic storageSolid-state storageCloud storageSolid-state storage uses electronic memory cells to store data and has no moving parts, unlike magnetic and optical storage.Submit 3. What is one major advantage of optical storage over magnetic storage?Higher speed of data accessLower cost per gigabyteGreater durability and portabilityHigher data capacityOptical storage offers high durability and portability, making it advantageous over magnetic storage, which is more susceptible to mechanical failures.Submit 4. How does magnetic storage encode binary data?Using electrical charges on memory cellsThrough variations in surface pits and landsBy magnetic fields on rotating plattersVia light reflection changes on optical discsMagnetic storage encodes binary data using magnetic fields on the surfaces of rotating platters, with read/write heads interacting with these fields.Submit 5. Which storage type is typically the fastest in terms of data access times?Optical storageMagnetic storageSolid-state storageCloud storageSolid-state storage is the fastest in terms of data access times due to its use of electronic memory cells and absence of moving parts.Submit 6. What is a primary disadvantage of optical storage?High cost per gigabyteSlower access times compared to other typesLack of portabilityLower data capacityOptical storage has slower access times compared to magnetic and solid-state storage, which can affect performance.Submit 7. Which type of storage is recommended for carrying important documents while traveling?Optical storageMagnetic storageSolid-state storageCloud storageSolid-state storage, such as USB flash drives, is recommended for carrying important documents due to its portability and reliability.Submit 8. How does cloud storage primarily differ from local storage?Cloud storage requires an internet connection for accessLocal storage provides automatic backup featuresCloud storage offers faster data access timesLocal storage is more scalableCloud storage requires an internet connection for access, whereas local storage provides direct access to data without dependency on network connectivity.Submit 9. Which storage method is characterized by high capacity and cost-effectiveness but is prone to mechanical failure?Optical storageMagnetic storageSolid-state storageCloud storageMagnetic storage offers high capacity and is cost-effective but is prone to mechanical failures due to its moving parts.Submit 10. What is one disadvantage of solid-state storage compared to magnetic storage?Higher cost per gigabyteLower durabilitySlower data access timesLess portabilitySolid-state storage is generally more expensive per gigabyte compared to magnetic storage, despite its faster access times and higher durability.Submit"},{"location":"topics/system/06_systems_architecture.html","title":"Systems Architecture","text":""},{"location":"topics/system/06_systems_architecture.html#systems-architecture","title":"Systems Architecture","text":"<p>Objectives</p> <ul> <li>Recognize the CPU as the core component of a computer system responsible for executing instructions and performing calculations.</li> <li>Explain the main functions of the CPU, including fetching instructions, decoding instructions, executing operations, and storing or writing results back to memory.</li> <li>Identify and comprehend the impact of key performance factors on a CPU: clock speed, the number of processor cores, and cache size.</li> <li>Describe the roles and functions of essential CPU components, such as the Control Unit, Arithmetic Logic Unit (ALU), registers, cache memory, and the clock.</li> <li>Understand the Fetch-Decode-Execute Cycle as a fundamental process in CPU operation, involving fetching instructions from memory, decoding instructions, and executing operations.</li> <li>Recognize and explain the roles of special-purpose registers such as the Program Counter (PC), Memory Address Register (MAR), Memory Data Register (MDR), and Accumulator in the CPU's operation.</li> <li>Know the stored program concept, recognizing the role of memory as a store for both data and instructions.</li> </ul> <p>At the heart of the computer system sits the Central Processing Unit (CPU).  Its primary purpose is to execute instructions and perform calculations, making it the most crucial component of a computer system.</p> <p>It carries out the following main functions:</p> <ul> <li>Fetching instructions from memory.</li> <li>Decoding instructions to determine what operation to perform.</li> <li>Executing the operation, which may involve arithmetic or logic calculations.</li> <li>Storing or writing results back to memory.</li> </ul>"},{"location":"topics/system/06_systems_architecture.html#cpu-performance","title":"CPU Performance","text":"<p>The performance of a CPU is influenced by several factors, and three key parameters that significantly impact its performance are clock speed, the number of processor cores, and cache size.</p> <ul> <li>Clock Speed: The clock speed, measured in Hertz (Hz) or Gigahertz (GHz), represents how fast the CPU can execute instructions. It indicates the number of cycles per second that the CPU can perform. Generally, higher clock speeds lead to faster execution of instructions and better overall performance. A higher clock speed allows the CPU to process more instructions in a given time, improving the speed of computations. However, while a higher clock speed is beneficial, it's essential to note that comparing clock speeds alone may not provide an accurate measure of performance across different CPU architectures. Efficiency, architecture, and other factors also play a crucial role.</li> <li>Number of Processor Cores: Modern CPUs often have multiple processor cores, with each core capable of executing its set of instructions independently. Increasing the number of processor cores can improve multitasking and parallel processing capabilities. Tasks can be divided among multiple cores, allowing the CPU to handle multiple instructions simultaneously. This can lead to significant performance gains in applications designed to take advantage of parallelism. However, not all applications benefit equally from multiple cores. Some tasks are inherently sequential and may not see a substantial performance boost with additional cores. The effectiveness of multiple cores also depends on the software's ability to parallelize tasks.</li> <li>Cache Size: Cache memory is a small, high-speed type of volatile computer memory that provides quick access to frequently used data and instructions. Larger cache sizes can lead to improved performance by reducing the time it takes for the CPU to access frequently used data. A larger cache helps in storing more data and instructions closer to the CPU cores, minimizing the need to fetch data from slower main memory.  However, the impact of cache size on performance can vary based on the specific workload. For applications with frequent and predictable access patterns, a larger cache is more beneficial. However, the relationship between cache size and performance is complex and depends on the application's characteristics.</li> </ul>"},{"location":"topics/system/06_systems_architecture.html#components-of-the-cpu","title":"Components of the CPU","text":"<p>The CPU consists of several components:</p> <ul> <li> <p>Control Unit (CU): The control unit manages and coordinates the operations of the CPU. It fetches instructions from memory, decodes them, and controls the flow of data within the CPU and between other computer components.</p> </li> <li> <p>Arithmetic Logic Unit (ALU): The ALU is responsible for performing arithmetic and logic operations, such as addition, subtraction, AND, OR, and NOT operations. It carries out the actual computational tasks based on the instructions provided.</p> </li> <li> <p>Registers: Registers are small, high-speed storage locations within the CPU that temporarily hold data and instructions. They play a crucial role in the execution of instructions by providing quick access to operands and intermediate results.</p> </li> <li> <p>Cache Memory: Cache memory is a small, high-speed type of volatile computer memory that provides high-speed data access to a processor and stores frequently used computer programs, applications, and data. It helps reduce the time it takes for the CPU to access data from the main memory.</p> </li> <li> <p>Clock: The clock is a timing device that synchronizes the activities of the CPU. It generates a series of electrical pulses at a consistent rate, regulating the execution of instructions and the overall operation of the CPU.</p> </li> </ul> <p>These components work together to fetch, decode, and execute instructions from memory enabling the CPU to perform the necessary calculations and operations required for running applications and handling tasks.</p> <p></p> <p>The above schematic is a simplified interpretation of the components of a CPU.  In reality CPUs are significantly more complex and the technology of designing and building CPUs is a rapidly changing field for engineers.  However, at this level we can gain an appreciation of how a CPU goes about its business of fetching and executing instructions.</p> <p>For our purposes we will focus on what is known as the von Neumann architecture.  John von Neumann was a Hungarian mathematician, engineer and computer scientist.  In 1945 he designed an architecture for a digital computer with these components.  Critical to his design was the role of memory as the store for both data and instructions, encoding both in the same way.  This has now been handed down as the stored program concept.</p> <p>Note</p> <p>Whilst the phrase von Neumann architecture is something of a misnomer these days it provides a suitable model for investigating the inner workings of a CPU.</p>"},{"location":"topics/system/06_systems_architecture.html#fetch-decode-execute-cycle","title":"Fetch-Decode-Execute Cycle","text":"<p>The fetch-execute (FE) cycle, also known as the Fetch Decode Execute (FDE) cycle, is a fundamental process in the operation of a CPU (Central Processing Unit). It consists of two main stages: the Fetch stage and the Execute stage:</p> <ul> <li>Fetch: The CPU retrieves the next instruction from memory. This instruction is located at a memory address indicated by the Program Counter (PC).</li> <li>Execute: The CPU interprets and executes the fetched instruction, which may involve data processing or control operations.</li> </ul> <p>Referring to the CPU schematic above the CPU uses some special purpose registers as part of the FE cycle:</p> <ul> <li>Program Counter (PC): The Program Counter keeps track of the memory address of the next instruction to be fetched and executed.  It ensures that instructions are fetched and executed in a sequential and orderly fashion. The incrementing of the Program Counter after each fetch ensures that the CPU progresses through the program or set of instructions stored in memory.</li> <li>Memory Address Register (MAR):  The primary function of the MAR is to hold the memory address of the location in RAM (Random Access Memory) where data or instructions are to be read from or written to.  It temporarily holds the memory address of the data or instruction being currently accessed or manipulated during the various stages of the Fetch-Decode-Execute Cycle.</li> <li>Memory Data Register (MDR): The primary function of the MDR is to temporarily store data that is either being fetched from memory or is about to be written to memory. The MDR acts as a buffer for data during the transfer between the CPU and the computer's memory.</li> <li>Current instruction register (CIR): Usually known as the Instruction Register, another special-purpose register within the CPU that temporarily holds the current instruction being processed or executed. During the Fetch-Decode-Execute Cycle, the CPU fetches an instruction from memory, and the fetched instruction is stored in the IR. The control unit then decodes the instruction to determine the operation to be performed and the operands involved. </li> <li>Accumulator (Acc): The accumulator is used for performing arithmetic and logic operations.  It serves as a temporary storage location for intermediate results during arithmetic calculations. The value in the accumulator can be updated through arithmetic operations like addition, subtraction, multiplication, and logical operations.</li> </ul> <p>Note</p> <p>While the concept of an accumulator has historical significance, modern processor architectures may use a more generalized set of registers, and the term \"accumulator\" is not as commonly used in contemporary CPUs. In modern architectures, there are usually multiple general-purpose registers that can be used for various purposes, including arithmetic and logical operations.</p> <ul> <li>Status Register (SR) Or, Flags Register, that contains individual bits, known as flags, which represent the status or condition of the processor after an operation. These flags provide information about the results of arithmetic and logic operations, as well as other processor conditions.  Typical 'flags' to be found here are Zero flag, Overflow flag, Carry flag, sign flag.  They play a crucial role in control flow decisions and conditional branching. For example, a conditional branch instruction might use the Zero Flag to decide whether to branch based on whether the result of a previous operation was zero.</li> </ul> <p>Here's a detailed breakdown of what actions occur at each stage of the Fetch-Execute Cycle, referring to various CPU components:</p>"},{"location":"topics/system/06_systems_architecture.html#fetch","title":"Fetch:","text":"<ul> <li> <p>Fetch Instruction:</p> <ul> <li>The Control Unit (CU) initiates the fetch process by sending a request to the memory to retrieve the next instruction.</li> <li>The Program Counter (PC) holds the memory address of the next instruction to be fetched.</li> <li>The memory address is transferred from the PC to the Memory Address Register (MAR).</li> </ul> </li> <li> <p>Memory Access:</p> <ul> <li>The address in the MAR is used to access memory (RAM), where the instruction is stored.</li> <li>The memory data (instruction) at the address indicated by the MAR is transferred to the Memory Data Register (MDR).</li> </ul> </li> <li> <p>Decode Instruction:</p> <ul> <li>The instruction in the MDR is decoded by the Control Unit.</li> <li>The Control Unit determines what operation needs to be executed and what data may be required.</li> </ul> </li> <li> <p>Increment PC:</p> <ul> <li>After the instruction is fetched and decoded, the Program Counter (PC) is incremented to point to the next instruction in memory. This ensures that the CPU is ready to fetch the next instruction in the subsequent cycle.</li> </ul> </li> </ul>"},{"location":"topics/system/06_systems_architecture.html#execute","title":"Execute:","text":"<ul> <li> <p>Execute Operation:</p> <ul> <li>Based on the decoded instruction, the Control Unit initiates the execution of the operation.</li> <li>If it's an arithmetic or logical operation, the Arithmetic Logic Unit (ALU) performs the calculation.</li> </ul> </li> <li> <p>Read/Write Data: </p> <ul> <li>If the operation involves reading or writing data to memory, the Memory Address Register (MAR) is loaded with the memory address where the data is located or needs to be stored.</li> <li>Data may be read from memory and transferred to the MDR for further processing or written to memory from the MDR.</li> </ul> </li> <li> <p>Update Registers:</p> <ul> <li>Depending on the operation, the results may be stored in various registers. For example, the result of an arithmetic operation may be placed in the Accumulator register.</li> </ul> </li> <li> <p>Control Unit Actions:</p> <ul> <li>The Control Unit monitors the execution of the operation, ensuring it proceeds according to the decoded instruction.</li> <li>It may also set condition flags or registers based on the outcome of the operation, which can influence future execution.</li> </ul> </li> <li> <p>Repeat or Halt:</p> <ul> <li>After the execution stage is complete, the cycle repeats as the CPU fetches the next instruction, or the CPU may halt its operation if a halt instruction is encountered, ending the program's execution.</li> </ul> </li> </ul> <p></p> <p>The fetch-execute cycle continues to repeat, allowing the CPU to process instructions sequentially, executing each one in turn. The cycle is at the heart of how a CPU performs all tasks, from basic arithmetic operations to complex program execution.</p>"},{"location":"topics/system/06_systems_architecture.html#questions","title":"Questions","text":"1. What is the primary function of the CPU in a computer system?To store data permanentlyTo execute instructions and perform calculationsTo manage network connectionsTo display graphicsThe CPU is the core component of a computer system responsible for executing instructions and performing calculations, which makes it central to the operation of the system.Submit 2. Which component of the CPU is responsible for performing arithmetic and logic operations?Control Unit (CU)Arithmetic Logic Unit (ALU)Cache MemoryRegistersThe ALU performs arithmetic and logic operations, such as addition and logical comparisons, based on the instructions it receives.Submit 3. How does clock speed affect CPU performance?Higher clock speed allows the CPU to execute more instructions per secondHigher clock speed decreases the CPU's efficiencyClock speed does not affect CPU performanceHigher clock speed increases the CPU's cache sizeClock speed, measured in Hertz (Hz) or Gigahertz (GHz), represents the number of cycles per second the CPU can perform, thus affecting the rate at which instructions are executed.Submit 4. What is the purpose of the Program Counter (PC) in the Fetch-Decode-Execute Cycle?To store the data currently being processedTo hold the address of the next instruction to be fetchedTo decode the fetched instructionTo perform arithmetic operationsThe Program Counter (PC) keeps track of the memory address of the next instruction to be fetched, ensuring the CPU processes instructions in the correct sequence.Submit 5. Which CPU component temporarily holds the instruction currently being processed?Memory Address Register (MAR)Memory Data Register (MDR)Current Instruction Register (CIR)Accumulator (Acc)The Current Instruction Register (CIR) temporarily holds the instruction that is currently being processed, allowing the CPU to decode and execute it.Submit 6. What is the role of the Arithmetic Logic Unit (ALU) in the CPU?To fetch instructions from memoryTo execute arithmetic and logic operationsTo store data in cache memoryTo increment the Program CounterThe ALU is responsible for performing arithmetic operations like addition and subtraction, as well as logic operations such as AND and OR.Submit 7. Which of the following is NOT a special-purpose register in the CPU?Program Counter (PC)Memory Address Register (MAR)Status Register (SR)Cache MemoryCache Memory is a type of high-speed memory used to store frequently accessed data and instructions, not a special-purpose register within the CPU.Submit 8. What does cache memory do to improve CPU performance?It increases the clock speed of the CPUIt provides high-speed access to frequently used data and instructionsIt increases the number of processor coresIt stores instructions for long-term useCache memory reduces the time needed to access frequently used data by storing it closer to the CPU, which helps improve overall performance.Submit 9. What is the Fetch-Decode-Execute Cycle primarily used for in the CPU?To manage system memoryTo execute and process instructions sequentiallyTo handle input and output operationsTo increase network speedThe Fetch-Decode-Execute Cycle is a fundamental process where the CPU fetches instructions from memory, decodes them, and executes them in sequence.Submit 10. Which of the following is an example of a special-purpose register used to hold data during memory operations?Program Counter (PC)Memory Data Register (MDR)Arithmetic Logic Unit (ALU)Control Unit (CU)The Memory Data Register (MDR) temporarily holds data being transferred between the CPU and memory, acting as a buffer for data operations.Submit"},{"location":"blog/archive/2023.html","title":"2023","text":""},{"location":"blog/category/python.html","title":"python","text":""}]}